// Copyright 2021 Cartesi Pte. Ltd.

// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

/// @title Validator Manager
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "./EtherPortal.sol";
import "./Input.sol";

contract EtherPortalImpl is EtherPortal {
    address immutable outputContract;
    Input immutable inputContract;

    modifier onlyOutputContract {
        require(msg.sender == outputContract, "only outputContract");
        _;
    }

    constructor(address _inputContract, address _outputContract) {
        inputContract = Input(_inputContract);
        outputContract = _outputContract;
    }

    /// @notice deposits ether in portal contract and create ether in L2
    /// @param _L2receivers array with receivers addresses
    /// @param _amounts array of amounts of ether to be distributed
    /// @param _data information to be interpreted by L2
    /// @return hash of input generated by deposit
    /// @dev  receivers[i] receive amounts[i]
    function etherDeposit(
        address[] calldata _L2receivers,
        uint256[] calldata _amounts,
        bytes calldata _data
    ) public payable override returns (bytes32) {
        require(
            _L2receivers.length == _amounts.length,
            "receivers.len != amounts.len"
        );

        uint256 totalAmount;
        uint256 i;
        for (; i < _amounts.length; i++) {
            totalAmount = totalAmount + _amounts[i];
        }
        require(msg.value >= totalAmount, "not enough value");

        bytes memory input =
            abi.encode(_L2receivers, _amounts, _data);

        emit EtherDeposited(_L2receivers, _amounts, _data);
        return inputContract.addInput(input);
    }

    /// @notice executes a descartesV2 output
    /// @param _data data with information necessary to execute output
    /// @dev can only be called by Output contract
    function executeDescartesV2Output(bytes calldata _data)
        public
        override
        onlyOutputContract
        returns (bool)
    {
        (
            address payable receiver,
            uint256 value
        ) = abi.decode(_data, (address, uint256));

        receiver.transfer(value);

        emit EtherWithdrawn(receiver, value);

        return true;
    }
}
