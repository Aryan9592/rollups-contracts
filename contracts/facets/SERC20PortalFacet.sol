// Copyright 2021 Cartesi Pte. Ltd.

// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

/// @title Specific ERC20 Portal facet
pragma solidity ^0.8.0;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import {ISERC20Portal} from "../interfaces/ISERC20Portal.sol";

import {LibSERC20Portal} from "../libraries/LibSERC20Portal.sol";
import {LibInput} from "../libraries/LibInput.sol";

contract SERC20PortalFacet is ISERC20Portal {
    using LibSERC20Portal for LibSERC20Portal.DiamondStorage;
    using LibInput for LibInput.DiamondStorage;

    /// @notice deposit an amount of the specific ERC20 token in the portal and create tokens in L2
    /// @param _amount amount of the ERC20 token to be distributed
    /// @param _data information to be interpreted by L2
    /// @return hash of input generated by deposit
    function serc20Deposit(uint256 _amount, bytes calldata _data)
        public
        override
        returns (bytes32)
    {
        LibSERC20Portal.DiamondStorage storage serc20DS =
            LibSERC20Portal.diamondStorage();
        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();

        // Specific ERC-20 contract
        IERC20 erc20Contract = IERC20(serc20DS.erc20Contract);

        require(
            erc20Contract.transferFrom(msg.sender, address(this), _amount),
            "ERC20 transferFrom failed"
        );

        bytes memory input = abi.encode(msg.sender, _amount, _data);

        emit SERC20Deposited(msg.sender, _amount, _data);
        return inputDS.addInput(input);
    }

    /// @notice withdraw an amount of the specific ERC20 token from the portal
    /// @param _data data with withdrawal information
    /// @dev can only be called by the Rollups contract
    function serc20Withdrawal(bytes calldata _data)
        public
        override
        returns (bool)
    {
        LibSERC20Portal.DiamondStorage storage serc20DS =
            LibSERC20Portal.diamondStorage();

        // Specific ERC-20 contract
        IERC20 erc20Contract = IERC20(serc20DS.erc20Contract);

        // Delegate calls preserve msg.sender, msg.value and address(this)
        require(msg.sender == address(this), "only itself");

        (address payable receiver, uint256 value) =
            abi.decode(_data, (address, uint256));

        // transfer reverts on failure
        erc20Contract.transfer(receiver, value);

        emit SERC20Withdrawn(receiver, value);

        return true;
    }
}
