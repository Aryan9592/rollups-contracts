type EpochConnection {
  totalCount: Int!
  edges: [EpochEdge!]!
  nodes: [Epoch!]!
  pageInfo: PageInfo!
}

type Input {
  id: ID!
  index: Int!
  epoch: Epoch!
  blockNumber: BigInt!
  "Get notices from this particular input with additional ability to filter and paginate them"
  notices(first: Int, last: Int, after: String, before: String, where: NoticeFilter): NoticeConnection!
  "Get reports from this particular input with additional ability to filter and paginate them"
  reports(first: Int, last: Int, after: String, before: String, where: ReportFilter): ReportConnection!
}

type Query {
  epoch(id: ID!): Epoch!
  epochI(index: Int!): Epoch!
  input(id: ID!): Input!
  notice(id: ID!): Notice!
  report(id: ID!): Report!
  epochs(first: Int, last: Int, after: String, before: String): EpochConnection!
  "Get all available inputs with additional ability to filter and paginate them"
  inputs(first: Int, last: Int, after: String, before: String, where: InputFilter): InputConnection!
  "Get all available notices with additional ability to filter and paginate them"
  notices(first: Int, last: Int, after: String, before: String, where: NoticeFilter): NoticeConnection!
  "Get all available reports with additional ability to filter and paginate them"
  reports(first: Int, last: Int, after: String, before: String, where: ReportFilter): ReportConnection!
}

type NoticeEdge {
  node: Notice!
  cursor: String!
}

input NoticeFilter {
  dummy: String!
}

type Epoch {
  id: ID!
  index: Int!
  inputs(first: Int, last: Int, after: String, before: String, where: InputFilter): InputConnection!
  "Get reports from this particular epoch with additional ability to filter and paginate them"
  reports(first: Int, last: Int, after: String, before: String, where: ReportFilter): ReportConnection!
}

type InputConnection {
  totalCount: Int!
  edges: [InputEdge!]!
  nodes: [Input!]!
  pageInfo: PageInfo!
}

input ReportFilter {
  dummy: String!
}

type EpochEdge {
  node: Epoch!
  cursor: String!
}

type Notice {
  id: ID!
  index: Int!
  sessionId: String!
  input: Input!
  "Keccak in Ethereum hex binary format, starting with '0x'"
  keccak: String!
  "Payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
}

type ReportEdge {
  node: Report!
  cursor: String!
}

type ReportConnection {
  totalCount: Int!
  edges: [ReportEdge!]!
  nodes: [Report!]!
  pageInfo: PageInfo!
}

input InputFilter {
  dummy: String!
}

scalar BigInt

type NoticeConnection {
  totalCount: Int!
  edges: [NoticeEdge!]!
  nodes: [Notice!]!
  pageInfo: PageInfo!
}

"Connection pattern cursor based pagination page info"
type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type InputEdge {
  node: Input!
  cursor: String!
}

type Report {
  id: ID!
  index: Int!
  input: Input!
  "Payload in Ethereum hex binary format, starting with '0x'"
  payload: String!
}

schema {
  query: Query
}
