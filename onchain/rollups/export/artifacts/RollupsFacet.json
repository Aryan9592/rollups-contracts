{
  "contractName": "RollupsFacet",
  "sourceName": "contracts/facets/RollupsFacet.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "epochHash",
          "type": "bytes32"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "epochHash",
          "type": "bytes32"
        }
      ],
      "name": "FinalizeEpoch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Phase",
          "name": "newPhase",
          "type": "uint8"
        }
      ],
      "name": "PhaseChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "winningClaim",
          "type": "bytes32"
        }
      ],
      "name": "ResolveDispute",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_epochHash",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChallengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPhase",
      "outputs": [
        {
          "internalType": "enum Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInputAccumulationStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInputDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSealingEpochTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemplateHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506116c8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a3a40ea511610066578063a3a40ea51461010b578063b97dd9e214610120578063bd66528a14610128578063ddf7bcf01461013b578063e17ba0121461015d57600080fd5b806354ee1da51461009857806361b12c66146100c95780637864b77d146100de57806382ae9ef714610101575b600080fd5b60008051602061161383398151915254600160601b900463ffffffff165b6040519081526020015b60405180910390f35b600080516020611673833981519152546100b6565b60008051602061161383398151915254640100000000900463ffffffff166100b6565b610109610178565b005b610113610304565b6040516100c091906114b4565b6100b661034b565b6101096101363660046114c7565b610365565b60008051602061161383398151915254600160401b900463ffffffff166100b6565b6000805160206116138339815191525463ffffffff166100b6565b600080516020611613833981519152546000805160206116738339815191529060008051602061165383398151915290600090600160801b900463ffffffff1660028111156101c9576101c9611480565b905060018160028111156101df576101df611480565b146102315760405162461bcd60e51b815260206004820152601b60248201527f506861736520213d204177616974696e6720436f6e73656e737573000000000060448201526064015b60405180910390fd5b600183015463ffffffff600160601b820481169164010000000090041661025881836114f6565b42116102a65760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f64206e6f74206f766572000000000000006044820152606401610228565b83546102f45760405162461bcd60e51b815260206004820152601860248201527f4e6f20436c61696d20746f2062652066696e616c697a656400000000000000006044820152606401610228565b6102fd8561057f565b5050505050565b6000805160206116138339815191525460009060008051602061167383398151915290600160801b900463ffffffff16600281111561034557610345611480565b91505090565b6000600080516020611673833981519152610345816106b7565b6000805160206116738339815191527f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea56660008051602061165383398151915260006103cf611430565b6103d7611430565b6001870154600090600160801b900463ffffffff1660028111156103fd576103fd611480565b600189015490915063ffffffff600160401b820481169116600083600281111561042957610429611480565b14801561043e575061043b81836114f6565b42115b156104af5760018a8101805463ffffffff60801b1916600160801b1790556040519093506000805160206116338339815191529061047d9085906114b4565b60405180910390a161048e89610759565b60018a01805463ffffffff60601b1916600160601b4263ffffffff16021790555b60018360028111156104c3576104c3611480565b146105105760405162461bcd60e51b815260206004820152601a60248201527f506861736520213d204177616974696e67436f6e73656e7375730000000000006044820152606401610228565b61051b87338d610765565b9197509550935061052d886001015490565b60408051338152602081018e90527fd31325e5dc55b03edf08c70299d3b1bc8d4c2ca8512c90138ddd03e3f54fce6c910160405180910390a26105728a878787610982565b5050505050505050505050565b60018101805463ffffffff60801b191690556040517f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff907f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566906000805160206116538339815191529060008051602061163383398151915290610604906000906114b4565b60405180910390a160018401805463ffffffff60601b1963ffffffff4216600160401b02166fffffffffffffffff0000000000000000199091161763ffffffff60601b179055600061065582610ad8565b9050610662836001015490565b6040518281527f6e3d05bc77b9307d9ba574c7c3196a746edd51104ded1c823edc63be4b8a63c39060200160405180910390a2600180840180549182018155600090815260209020018190556102fd84610b35565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea5675460018201546000917f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566918390600160801b900463ffffffff16600281111561072357610723611480565b9050600081600281111561073957610739611480565b1461074e576107498260016114f6565b610750565b815b95945050505050565b61076281610b58565b50565b600061076f611430565b610777611430565b836107b25760405162461bcd60e51b815260206004820152600b60248201526a656d70747920636c61696d60a81b6044820152606401610228565b6107bc8686610b77565b6107fd5760405162461bcd60e51b81526020600482015260126024820152711cd95b99195c881b9bdd08185b1b1bddd95960721b6044820152606401610228565b60006108098787610c26565b600388015490915060f81c811c600116156108765760405162461bcd60e51b815260206004820152602760248201527f73656e6465722068616420636c61696d656420696e20746869732065706f6368604482015266206265666f726560c81b6064820152608401610228565b8654610880578487555b865485146108e0576108d4600260405180604001604052808a6000015481526020018881525060405180604001604052806108ba8c610d05565b6001600160a01b0390811682528b16602090910152610dbf565b93509350935050610979565b6108ea8787610e18565b6108f387610e43565b610937576040805180820182528681526000602080830182905283518085019094526001600160a01b038a168452830181905261093292909190610dbf565b610971565b6040805180820182528681526000602080830182905283518085019094526001600160a01b038a1684528301526109719160019190610dbf565b935093509350505b93509350939050565b600083600281111561099657610996611480565b03610a20576001840154600090600160801b900463ffffffff1660028111156109c1576109c1611480565b905060018160028111156109d7576109d7611480565b14610a1a576001858101805463ffffffff60801b1916600160801b17905560405160008051602061163383398151915291610a11916114b4565b60405180910390a15b50610ad2565b6001836002811115610a3457610a34611480565b03610a4757610a428461057f565b610ad2565b6001840154600090600160801b900463ffffffff166002811115610a6d57610a6d611480565b90506002816002811115610a8357610a83611480565b14610ac85760018501805463ffffffff60801b1916600160811b17905560405160008051602061163383398151915290610abf906002906114b4565b60405180910390a15b6102fd8383610e65565b50505050565b6000610ae382610e8e565b81546000835560038301546001600160f81b031660038401556040518181527fddc860800a99149017c480ec51523bf4143b7215e78956ae5c31e5c568f5383a9060200160405180910390a192915050565b600381015415610b4a5761076281600061144e565b61076260018201600061144e565b600381015415610b69576000610b6c565b60015b60ff16600390910155565b60006001600160a01b038216610bbb5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b6044820152606401610228565b60005b6001840154811015610c1a57836001018181548110610bdf57610bdf61150e565b6000918252602090912001546001600160a01b0390811690841603610c08576001915050610c20565b80610c1281611524565b915050610bbe565b50600090505b92915050565b60006001600160a01b038216610c6a5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b6044820152606401610228565b60005b6001840154811015610cc657836001018181548110610c8e57610c8e61150e565b6000918252602090912001546001600160a01b0390811690841603610cb4579050610c20565b80610cbe81611524565b915050610c6d565b5060405162461bcd60e51b81526020600482015260136024820152721d985b1a59185d1bdc881b9bdd08199bdd5b99606a1b6044820152606401610228565b600080610d16836003015460f81c90565b905060005b6001840154811015610d76576001811b821615610d6457836001018181548110610d4757610d4761150e565b6000918252602090912001546001600160a01b0316949350505050565b80610d6e81611524565b915050610d1b565b5060405162461bcd60e51b815260206004820152601c60248201527f4167726565696e672076616c696461746f72206e6f7420666f756e64000000006044820152606401610228565b6000610dc9611430565b610dd1611430565b7f495383aed97965c56495cdbadedfe9667a1b028c54d3fc4b5335895146e02b70868686604051610e049392919061153d565b60405180910390a150939492935090919050565b6000610e248383610c26565b6003840154909150610e369082610ee3565b8360030181905550505050565b600381015460009060f081901c60ff16610e5d8260f81c90565b149392505050565b80516020820151835160008051602061167383398151915292610e89928492610f21565b505050565b6000610e9e826003015460f81c90565b905060005b6001830154811015610e89576001811b821615610ed1576003830154610ecb90826001610fd7565b60038401555b80610edb81611524565b915050610ea3565b600060088210610f055760405162461bcd60e51b8152600401610228906115b0565b6000610f128360f86114f6565b6001901b841791505092915050565b6000610f2b611430565b610f33611430565b600080516020611653833981519152610f4e8188888861102a565b60018b01805463ffffffff60601b1916600160601b4263ffffffff1602179055604080516001600160a01b03808d1682528b16602082015290810189905292965090945092507f2afbde4d47160a9c5de25b0df88d5b83e705286f2a447cac162db5e99ad6f5d29060600160405180910390a1610fcd88858585610982565b5050505050505050565b600060088310610ff95760405162461bcd60e51b8152600401610228906115b0565b600061100585856111de565b9050600061101384836114f6565b905061102086868361122c565b9695505050505050565b6000611034611430565b61103c611430565b61104687866112e0565b865484036110e05761105787610e43565b61109b576040805180820182528581526000602080830182905283518085019094526001600160a01b038a16845283018190526110969290919061138e565b6110d5565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301526110d5916001919061138e565b9250925092506111d4565b600387015460f81c15611139576110d5600260405180604001604052808a60000154815260200187815250604051806040016040528061111f8c610d05565b6001600160a01b0390811682528b1660209091015261138e565b8387556111468787610e18565b61114f87610e43565b611193576040805180820182528581526000602080830182905283518085019094526001600160a01b038a168452830181905261118e9290919061138e565b6111cd565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301526111cd916001919061138e565b9250925092505b9450945094915050565b6000600882106112005760405162461bcd60e51b8152600401610228906115b0565b6000611211600163400000006115dc565b90508061121f84601e6115f3565b85901c1691505092915050565b60006008831061124e5760405162461bcd60e51b8152600401610228906115b0565b61125d600163400000006115dc565b8211156112a25760405162461bcd60e51b8152602060048201526013602482015272436c61696d734d61736b204f766572666c6f7760681b6044820152606401610228565b60006112af84601e6115f3565b6112be600163400000006115dc565b901b1990508481166112d185601e6115f3565b9390931b909217949350505050565b60005b6001830154811015610e89578260010181815481106113045761130461150e565b6000918252602090912001546001600160a01b039081169083160361137c57600083600101828154811061133a5761133a61150e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600383015461137290826113d3565b6003840155505050565b8061138681611524565b9150506112e3565b6000611398611430565b6113a0611430565b7f09201c193a07cae1df95ae692cc698685574c942a04514c48a4c3249f38594ff868686604051610e049392919061153d565b6000600882106113f55760405162461bcd60e51b8152600401610228906115b0565b8260006114038460f86114f6565b6001901b199182169190506114198460f06114f6565b6001901b199182169190506107508285600061122c565b60405180604001604052806002906020820280368337509192915050565b508054600082559060005260206000209081019061076291905b8082111561147c5760008155600101611468565b5090565b634e487b7160e01b600052602160045260246000fd5b6003811061076257634e487b7160e01b600052602160045260246000fd5b602081016114c183611496565b91905290565b6000602082840312156114d957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611509576115096114e0565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201611536576115366114e0565b5060010190565b60a0810161154a85611496565b84825260208083018560005b600281101561157357815183529183019190830190600101611556565b505050606083018460005b60028110156115a45781516001600160a01b03168352918301919083019060010161157e565b50505050949350505050565b602080825260129082015271696e646578206f7574206f662072616e676560701b604082015260600190565b6000828210156115ee576115ee6114e0565b500390565b600081600019048311821515161561160d5761160d6114e0565b50029056fed32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189ded606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fcd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189ca2646970667358221220e81f8fc3f6ca218053a29f8f06ea47c5ad871e137eec4dec64d79934e89d8c3a64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a3a40ea511610066578063a3a40ea51461010b578063b97dd9e214610120578063bd66528a14610128578063ddf7bcf01461013b578063e17ba0121461015d57600080fd5b806354ee1da51461009857806361b12c66146100c95780637864b77d146100de57806382ae9ef714610101575b600080fd5b60008051602061161383398151915254600160601b900463ffffffff165b6040519081526020015b60405180910390f35b600080516020611673833981519152546100b6565b60008051602061161383398151915254640100000000900463ffffffff166100b6565b610109610178565b005b610113610304565b6040516100c091906114b4565b6100b661034b565b6101096101363660046114c7565b610365565b60008051602061161383398151915254600160401b900463ffffffff166100b6565b6000805160206116138339815191525463ffffffff166100b6565b600080516020611613833981519152546000805160206116738339815191529060008051602061165383398151915290600090600160801b900463ffffffff1660028111156101c9576101c9611480565b905060018160028111156101df576101df611480565b146102315760405162461bcd60e51b815260206004820152601b60248201527f506861736520213d204177616974696e6720436f6e73656e737573000000000060448201526064015b60405180910390fd5b600183015463ffffffff600160601b820481169164010000000090041661025881836114f6565b42116102a65760405162461bcd60e51b815260206004820152601960248201527f4368616c6c656e676520706572696f64206e6f74206f766572000000000000006044820152606401610228565b83546102f45760405162461bcd60e51b815260206004820152601860248201527f4e6f20436c61696d20746f2062652066696e616c697a656400000000000000006044820152606401610228565b6102fd8561057f565b5050505050565b6000805160206116138339815191525460009060008051602061167383398151915290600160801b900463ffffffff16600281111561034557610345611480565b91505090565b6000600080516020611673833981519152610345816106b7565b6000805160206116738339815191527f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea56660008051602061165383398151915260006103cf611430565b6103d7611430565b6001870154600090600160801b900463ffffffff1660028111156103fd576103fd611480565b600189015490915063ffffffff600160401b820481169116600083600281111561042957610429611480565b14801561043e575061043b81836114f6565b42115b156104af5760018a8101805463ffffffff60801b1916600160801b1790556040519093506000805160206116338339815191529061047d9085906114b4565b60405180910390a161048e89610759565b60018a01805463ffffffff60601b1916600160601b4263ffffffff16021790555b60018360028111156104c3576104c3611480565b146105105760405162461bcd60e51b815260206004820152601a60248201527f506861736520213d204177616974696e67436f6e73656e7375730000000000006044820152606401610228565b61051b87338d610765565b9197509550935061052d886001015490565b60408051338152602081018e90527fd31325e5dc55b03edf08c70299d3b1bc8d4c2ca8512c90138ddd03e3f54fce6c910160405180910390a26105728a878787610982565b5050505050505050505050565b60018101805463ffffffff60801b191690556040517f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff907f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566906000805160206116538339815191529060008051602061163383398151915290610604906000906114b4565b60405180910390a160018401805463ffffffff60601b1963ffffffff4216600160401b02166fffffffffffffffff0000000000000000199091161763ffffffff60601b179055600061065582610ad8565b9050610662836001015490565b6040518281527f6e3d05bc77b9307d9ba574c7c3196a746edd51104ded1c823edc63be4b8a63c39060200160405180910390a2600180840180549182018155600090815260209020018190556102fd84610b35565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea5675460018201546000917f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566918390600160801b900463ffffffff16600281111561072357610723611480565b9050600081600281111561073957610739611480565b1461074e576107498260016114f6565b610750565b815b95945050505050565b61076281610b58565b50565b600061076f611430565b610777611430565b836107b25760405162461bcd60e51b815260206004820152600b60248201526a656d70747920636c61696d60a81b6044820152606401610228565b6107bc8686610b77565b6107fd5760405162461bcd60e51b81526020600482015260126024820152711cd95b99195c881b9bdd08185b1b1bddd95960721b6044820152606401610228565b60006108098787610c26565b600388015490915060f81c811c600116156108765760405162461bcd60e51b815260206004820152602760248201527f73656e6465722068616420636c61696d656420696e20746869732065706f6368604482015266206265666f726560c81b6064820152608401610228565b8654610880578487555b865485146108e0576108d4600260405180604001604052808a6000015481526020018881525060405180604001604052806108ba8c610d05565b6001600160a01b0390811682528b16602090910152610dbf565b93509350935050610979565b6108ea8787610e18565b6108f387610e43565b610937576040805180820182528681526000602080830182905283518085019094526001600160a01b038a168452830181905261093292909190610dbf565b610971565b6040805180820182528681526000602080830182905283518085019094526001600160a01b038a1684528301526109719160019190610dbf565b935093509350505b93509350939050565b600083600281111561099657610996611480565b03610a20576001840154600090600160801b900463ffffffff1660028111156109c1576109c1611480565b905060018160028111156109d7576109d7611480565b14610a1a576001858101805463ffffffff60801b1916600160801b17905560405160008051602061163383398151915291610a11916114b4565b60405180910390a15b50610ad2565b6001836002811115610a3457610a34611480565b03610a4757610a428461057f565b610ad2565b6001840154600090600160801b900463ffffffff166002811115610a6d57610a6d611480565b90506002816002811115610a8357610a83611480565b14610ac85760018501805463ffffffff60801b1916600160811b17905560405160008051602061163383398151915290610abf906002906114b4565b60405180910390a15b6102fd8383610e65565b50505050565b6000610ae382610e8e565b81546000835560038301546001600160f81b031660038401556040518181527fddc860800a99149017c480ec51523bf4143b7215e78956ae5c31e5c568f5383a9060200160405180910390a192915050565b600381015415610b4a5761076281600061144e565b61076260018201600061144e565b600381015415610b69576000610b6c565b60015b60ff16600390910155565b60006001600160a01b038216610bbb5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b6044820152606401610228565b60005b6001840154811015610c1a57836001018181548110610bdf57610bdf61150e565b6000918252602090912001546001600160a01b0390811690841603610c08576001915050610c20565b80610c1281611524565b915050610bbe565b50600090505b92915050565b60006001600160a01b038216610c6a5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b6044820152606401610228565b60005b6001840154811015610cc657836001018181548110610c8e57610c8e61150e565b6000918252602090912001546001600160a01b0390811690841603610cb4579050610c20565b80610cbe81611524565b915050610c6d565b5060405162461bcd60e51b81526020600482015260136024820152721d985b1a59185d1bdc881b9bdd08199bdd5b99606a1b6044820152606401610228565b600080610d16836003015460f81c90565b905060005b6001840154811015610d76576001811b821615610d6457836001018181548110610d4757610d4761150e565b6000918252602090912001546001600160a01b0316949350505050565b80610d6e81611524565b915050610d1b565b5060405162461bcd60e51b815260206004820152601c60248201527f4167726565696e672076616c696461746f72206e6f7420666f756e64000000006044820152606401610228565b6000610dc9611430565b610dd1611430565b7f495383aed97965c56495cdbadedfe9667a1b028c54d3fc4b5335895146e02b70868686604051610e049392919061153d565b60405180910390a150939492935090919050565b6000610e248383610c26565b6003840154909150610e369082610ee3565b8360030181905550505050565b600381015460009060f081901c60ff16610e5d8260f81c90565b149392505050565b80516020820151835160008051602061167383398151915292610e89928492610f21565b505050565b6000610e9e826003015460f81c90565b905060005b6001830154811015610e89576001811b821615610ed1576003830154610ecb90826001610fd7565b60038401555b80610edb81611524565b915050610ea3565b600060088210610f055760405162461bcd60e51b8152600401610228906115b0565b6000610f128360f86114f6565b6001901b841791505092915050565b6000610f2b611430565b610f33611430565b600080516020611653833981519152610f4e8188888861102a565b60018b01805463ffffffff60601b1916600160601b4263ffffffff1602179055604080516001600160a01b03808d1682528b16602082015290810189905292965090945092507f2afbde4d47160a9c5de25b0df88d5b83e705286f2a447cac162db5e99ad6f5d29060600160405180910390a1610fcd88858585610982565b5050505050505050565b600060088310610ff95760405162461bcd60e51b8152600401610228906115b0565b600061100585856111de565b9050600061101384836114f6565b905061102086868361122c565b9695505050505050565b6000611034611430565b61103c611430565b61104687866112e0565b865484036110e05761105787610e43565b61109b576040805180820182528581526000602080830182905283518085019094526001600160a01b038a16845283018190526110969290919061138e565b6110d5565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301526110d5916001919061138e565b9250925092506111d4565b600387015460f81c15611139576110d5600260405180604001604052808a60000154815260200187815250604051806040016040528061111f8c610d05565b6001600160a01b0390811682528b1660209091015261138e565b8387556111468787610e18565b61114f87610e43565b611193576040805180820182528581526000602080830182905283518085019094526001600160a01b038a168452830181905261118e9290919061138e565b6111cd565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301526111cd916001919061138e565b9250925092505b9450945094915050565b6000600882106112005760405162461bcd60e51b8152600401610228906115b0565b6000611211600163400000006115dc565b90508061121f84601e6115f3565b85901c1691505092915050565b60006008831061124e5760405162461bcd60e51b8152600401610228906115b0565b61125d600163400000006115dc565b8211156112a25760405162461bcd60e51b8152602060048201526013602482015272436c61696d734d61736b204f766572666c6f7760681b6044820152606401610228565b60006112af84601e6115f3565b6112be600163400000006115dc565b901b1990508481166112d185601e6115f3565b9390931b909217949350505050565b60005b6001830154811015610e89578260010181815481106113045761130461150e565b6000918252602090912001546001600160a01b039081169083160361137c57600083600101828154811061133a5761133a61150e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600383015461137290826113d3565b6003840155505050565b8061138681611524565b9150506112e3565b6000611398611430565b6113a0611430565b7f09201c193a07cae1df95ae692cc698685574c942a04514c48a4c3249f38594ff868686604051610e049392919061153d565b6000600882106113f55760405162461bcd60e51b8152600401610228906115b0565b8260006114038460f86114f6565b6001901b199182169190506114198460f06114f6565b6001901b199182169190506107508285600061122c565b60405180604001604052806002906020820280368337509192915050565b508054600082559060005260206000209081019061076291905b8082111561147c5760008155600101611468565b5090565b634e487b7160e01b600052602160045260246000fd5b6003811061076257634e487b7160e01b600052602160045260246000fd5b602081016114c183611496565b91905290565b6000602082840312156114d957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611509576115096114e0565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201611536576115366114e0565b5060010190565b60a0810161154a85611496565b84825260208083018560005b600281101561157357815183529183019190830190600101611556565b505050606083018460005b60028110156115a45781516001600160a01b03168352918301919083019060010161157e565b50505050949350505050565b602080825260129082015271696e646578206f7574206f662072616e676560701b604082015260600190565b6000828210156115ee576115ee6114e0565b500390565b600081600019048311821515161561160d5761160d6114e0565b50029056fed32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189ded606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fcd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189ca2646970667358221220e81f8fc3f6ca218053a29f8f06ea47c5ad871e137eec4dec64d79934e89d8c3a64736f6c634300080d0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(bytes32)": {
        "details": "ValidatorManager makes sure that msg.sender is allowed      and that claim != bytes32(0) TODO: add signatures for aggregated claims",
        "params": {
          "_epochHash": "hash of epoch"
        }
      },
      "finalizeEpoch()": {
        "details": "can only be called if challenge period is over"
      },
      "getCurrentEpoch()": {
        "details": "if phase is input accumulation, then the epoch number is length      of finalized epochs array, else there are two non finalized epochs,      one awaiting consensus/dispute and another accumulating input",
        "returns": {
          "_0": "index of current epoch"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C8 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3A40EA5 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA3A40EA5 EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0xB97DD9E2 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0xBD66528A EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0xDDF7BCF0 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0xE17BA012 EQ PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x54EE1DA5 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x61B12C66 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x7864B77D EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x82AE9EF7 EQ PUSH2 0x101 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0xB6 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x178 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x113 PUSH2 0x304 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x34B JUMP JUMPDEST PUSH2 0x109 PUSH2 0x136 CALLDATASIZE PUSH1 0x4 PUSH2 0x14C7 JUMP JUMPDEST PUSH2 0x365 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1C9 JUMPI PUSH2 0x1C9 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1DF JUMPI PUSH2 0x1DF PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0x231 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506861736520213D204177616974696E6720436F6E73656E7375730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV DUP2 AND SWAP2 PUSH5 0x100000000 SWAP1 DIV AND PUSH2 0x258 DUP2 DUP4 PUSH2 0x14F6 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x2A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4368616C6C656E676520706572696F64206E6F74206F76657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST DUP4 SLOAD PUSH2 0x2F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20436C61696D20746F2062652066696E616C697A65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH2 0x2FD DUP6 PUSH2 0x57F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x345 JUMPI PUSH2 0x345 PUSH2 0x1480 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x345 DUP2 PUSH2 0x6B7 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x3CF PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x1 DUP8 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3FD JUMPI PUSH2 0x3FD PUSH2 0x1480 JUMP JUMPDEST PUSH1 0x1 DUP10 ADD SLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x429 JUMPI PUSH2 0x429 PUSH2 0x1480 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x43E JUMPI POP PUSH2 0x43B DUP2 DUP4 PUSH2 0x14F6 JUMP JUMPDEST TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4AF JUMPI PUSH1 0x1 DUP11 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP4 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x47D SWAP1 DUP6 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x48E DUP10 PUSH2 0x759 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x60 SHL NOT AND PUSH1 0x1 PUSH1 0x60 SHL TIMESTAMP PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0x510 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506861736520213D204177616974696E67436F6E73656E737573000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH2 0x51B DUP8 CALLER DUP14 PUSH2 0x765 JUMP JUMPDEST SWAP2 SWAP8 POP SWAP6 POP SWAP4 POP PUSH2 0x52D DUP9 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP15 SWAP1 MSTORE PUSH32 0xD31325E5DC55B03EDF08C70299D3B1BC8D4C2CA8512C90138DDD03E3F54FCE6C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x572 DUP11 DUP8 DUP8 DUP8 PUSH2 0x982 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF SWAP1 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x604 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x60 SHL NOT PUSH4 0xFFFFFFFF TIMESTAMP AND PUSH1 0x1 PUSH1 0x40 SHL MUL AND PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT SWAP1 SWAP2 AND OR PUSH4 0xFFFFFFFF PUSH1 0x60 SHL OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x655 DUP3 PUSH2 0xAD8 JUMP JUMPDEST SWAP1 POP PUSH2 0x662 DUP4 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x6E3D05BC77B9307D9BA574C7C3196A746EDD51104DED1C823EDC63BE4B8A63C3 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP1 DUP5 ADD DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 ADD DUP2 SWAP1 SSTORE PUSH2 0x2FD DUP5 PUSH2 0xB35 JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP2 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x723 JUMPI PUSH2 0x723 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x739 JUMPI PUSH2 0x739 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0x74E JUMPI PUSH2 0x749 DUP3 PUSH1 0x1 PUSH2 0x14F6 JUMP JUMPDEST PUSH2 0x750 JUMP JUMPDEST DUP2 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x762 DUP2 PUSH2 0xB58 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76F PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x777 PUSH2 0x1430 JUMP JUMPDEST DUP4 PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x656D70747920636C61696D PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH2 0x7BC DUP7 DUP7 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x7FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1CD95B99195C881B9BDD08185B1B1BDDD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x809 DUP8 DUP8 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x3 DUP9 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xF8 SHR DUP2 SHR PUSH1 0x1 AND ISZERO PUSH2 0x876 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73656E6465722068616420636C61696D656420696E20746869732065706F6368 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x206265666F7265 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x228 JUMP JUMPDEST DUP7 SLOAD PUSH2 0x880 JUMPI DUP5 DUP8 SSTORE JUMPDEST DUP7 SLOAD DUP6 EQ PUSH2 0x8E0 JUMPI PUSH2 0x8D4 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x8BA DUP13 PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0xDBF JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x979 JUMP JUMPDEST PUSH2 0x8EA DUP8 DUP8 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x8F3 DUP8 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x937 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x932 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xDBF JUMP JUMPDEST PUSH2 0x971 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x971 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0xDBF JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x996 JUMPI PUSH2 0x996 PUSH2 0x1480 JUMP JUMPDEST SUB PUSH2 0xA20 JUMPI PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9C1 JUMPI PUSH2 0x9C1 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9D7 JUMPI PUSH2 0x9D7 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0xA1A JUMPI PUSH1 0x1 DUP6 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0xA11 SWAP2 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA34 JUMPI PUSH2 0xA34 PUSH2 0x1480 JUMP JUMPDEST SUB PUSH2 0xA47 JUMPI PUSH2 0xA42 DUP5 PUSH2 0x57F JUMP JUMPDEST PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA6D JUMPI PUSH2 0xA6D PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA83 JUMPI PUSH2 0xA83 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0xAC8 JUMPI PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x81 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0xABF SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH2 0x2FD DUP4 DUP4 PUSH2 0xE65 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE3 DUP3 PUSH2 0xE8E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 DUP4 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB AND PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xDDC860800A99149017C480EC51523BF4143B7215E78956AE5C31E5C568F5383A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0xB4A JUMPI PUSH2 0x762 DUP2 PUSH1 0x0 PUSH2 0x144E JUMP JUMPDEST PUSH2 0x762 PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x144E JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 PUSH2 0xB6C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xC1A JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDF JUMPI PUSH2 0xBDF PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xC08 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xC20 JUMP JUMPDEST DUP1 PUSH2 0xC12 DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBBE JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xCC6 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC8E JUMPI PUSH2 0xC8E PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xCB4 JUMPI SWAP1 POP PUSH2 0xC20 JUMP JUMPDEST DUP1 PUSH2 0xCBE DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC6D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D985B1A59185D1BDC881B9BDD08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD16 DUP4 PUSH1 0x3 ADD SLOAD PUSH1 0xF8 SHR SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xD76 JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0xD64 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD47 JUMPI PUSH2 0xD47 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0xD6E DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD1B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4167726565696E672076616C696461746F72206E6F7420666F756E6400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC9 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0xDD1 PUSH2 0x1430 JUMP JUMPDEST PUSH32 0x495383AED97965C56495CDBADEDFE9667A1B028C54D3FC4B5335895146E02B70 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE04 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP5 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE24 DUP4 DUP4 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0xE36 SWAP1 DUP3 PUSH2 0xEE3 JUMP JUMPDEST DUP4 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xF0 DUP2 SWAP1 SHR PUSH1 0xFF AND PUSH2 0xE5D DUP3 PUSH1 0xF8 SHR SWAP1 JUMP JUMPDEST EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD DUP4 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0xE89 SWAP3 DUP5 SWAP3 PUSH2 0xF21 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9E DUP3 PUSH1 0x3 ADD SLOAD PUSH1 0xF8 SHR SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0xE89 JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0xED1 JUMPI PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0xECB SWAP1 DUP3 PUSH1 0x1 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE JUMPDEST DUP1 PUSH2 0xEDB DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xEA3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 LT PUSH2 0xF05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF12 DUP4 PUSH1 0xF8 PUSH2 0x14F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SHL DUP5 OR SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2B PUSH2 0x1430 JUMP JUMPDEST PUSH2 0xF33 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF4E DUP2 DUP9 DUP9 DUP9 PUSH2 0x102A JUMP JUMPDEST PUSH1 0x1 DUP12 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x60 SHL NOT AND PUSH1 0x1 PUSH1 0x60 SHL TIMESTAMP PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP10 SWAP1 MSTORE SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH32 0x2AFBDE4D47160A9C5DE25B0DF88D5B83E705286F2A447CAC162DB5E99AD6F5D2 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xFCD DUP9 DUP6 DUP6 DUP6 PUSH2 0x982 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 LT PUSH2 0xFF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1005 DUP6 DUP6 PUSH2 0x11DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1013 DUP5 DUP4 PUSH2 0x14F6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1020 DUP7 DUP7 DUP4 PUSH2 0x122C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1034 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x103C PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x1046 DUP8 DUP7 PUSH2 0x12E0 JUMP JUMPDEST DUP7 SLOAD DUP5 SUB PUSH2 0x10E0 JUMPI PUSH2 0x1057 DUP8 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x109B JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x1096 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x10D5 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x11D4 JUMP JUMPDEST PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0xF8 SHR ISZERO PUSH2 0x1139 JUMPI PUSH2 0x10D5 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x111F DUP13 PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x138E JUMP JUMPDEST DUP4 DUP8 SSTORE PUSH2 0x1146 DUP8 DUP8 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x114F DUP8 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x1193 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x118E SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH2 0x11CD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x11CD SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 LT PUSH2 0x1200 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1211 PUSH1 0x1 PUSH4 0x40000000 PUSH2 0x15DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x121F DUP5 PUSH1 0x1E PUSH2 0x15F3 JUMP JUMPDEST DUP6 SWAP1 SHR AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 LT PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH2 0x125D PUSH1 0x1 PUSH4 0x40000000 PUSH2 0x15DC JUMP JUMPDEST DUP3 GT ISZERO PUSH2 0x12A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x436C61696D734D61736B204F766572666C6F77 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12AF DUP5 PUSH1 0x1E PUSH2 0x15F3 JUMP JUMPDEST PUSH2 0x12BE PUSH1 0x1 PUSH4 0x40000000 PUSH2 0x15DC JUMP JUMPDEST SWAP1 SHL NOT SWAP1 POP DUP5 DUP2 AND PUSH2 0x12D1 DUP6 PUSH1 0x1E PUSH2 0x15F3 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHL SWAP1 SWAP3 OR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0xE89 JUMPI DUP3 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1304 JUMPI PUSH2 0x1304 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND SUB PUSH2 0x137C JUMPI PUSH1 0x0 DUP4 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x133A JUMPI PUSH2 0x133A PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x1372 SWAP1 DUP3 PUSH2 0x13D3 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x1386 DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12E3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1398 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x13A0 PUSH2 0x1430 JUMP JUMPDEST PUSH32 0x9201C193A07CAE1DF95AE692CC698685574C942A04514C48A4C3249F38594FF DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE04 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 LT PUSH2 0x13F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST DUP3 PUSH1 0x0 PUSH2 0x1403 DUP5 PUSH1 0xF8 PUSH2 0x14F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SHL NOT SWAP2 DUP3 AND SWAP2 SWAP1 POP PUSH2 0x1419 DUP5 PUSH1 0xF0 PUSH2 0x14F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SHL NOT SWAP2 DUP3 AND SWAP2 SWAP1 POP PUSH2 0x750 DUP3 DUP6 PUSH1 0x0 PUSH2 0x122C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x762 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x147C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1468 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x762 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x14C1 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1509 JUMPI PUSH2 0x1509 PUSH2 0x14E0 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1536 JUMPI PUSH2 0x1536 PUSH2 0x14E0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x154A DUP6 PUSH2 0x1496 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP6 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1573 JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1556 JUMP JUMPDEST POP POP POP PUSH1 0x60 DUP4 ADD DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x15A4 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x157E JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E646578206F7574206F662072616E6765 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x15EE JUMPI PUSH2 0x15EE PUSH2 0x14E0 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x160D JUMPI PUSH2 0x160D PUSH2 0x14E0 JUMP JUMPDEST POP MUL SWAP1 JUMP INVALID 0xD3 0x2D PUSH32 0x90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189DED606D SLOAD 0x4C 0x22 MUL 0xD0 ORIGIN 0xD2 PUSH3 0x6C3909 0x23 0xE6 CALLCODE PUSH1 0xCA 0x5D DUP10 PUSH3 0x5BBA0C INVALID PUSH17 0xD2BDDA4E8F8AB37FEF2B2E34C4B62FF994 DUP15 0xE6 PUSH2 0xCDCF CALLVALUE 0xE2 MULMOD 0xD7 0xC2 0xF 0x4D 0x1F PUSH15 0x83085E93B1FCD32D7F90491BEE8117 0x2A BLOCKHASH PUSH12 0x65F3270D810392FE53BB0379 0xDD 0xE8 0xBD 0xD4 0xE6 0x24 XOR SWAP13 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0x1F DUP16 0xC3 0xF6 0xCA 0x21 DUP1 MSTORE8 LOG2 SWAP16 DUP16 MOD 0xEA SELFBALANCE 0xC5 0xAD DUP8 0x1E SGT PUSH31 0xEC4DEC64D79934E89D8C3A64736F6C634300080D0033000000000000000000 ",
      "sourceMap": "1025:7189:23:-:0;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@alreadyClaimed_6048": {
          "entryPoint": null,
          "id": 6048,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@claimFinalizedIncreaseCounts_8759": {
          "entryPoint": 3726,
          "id": 8759,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@claim_4801": {
          "entryPoint": 869,
          "id": 4801,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@clearAgreementMask_6002": {
          "entryPoint": null,
          "id": 6002,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@diamondStorage_7457": {
          "entryPoint": null,
          "id": 7457,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7756": {
          "entryPoint": null,
          "id": 7756,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7867": {
          "entryPoint": null,
          "id": 7867,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_8312": {
          "entryPoint": null,
          "id": 8312,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@emitClaimReceivedAndReturn_8709": {
          "entryPoint": 3519,
          "id": 8709,
          "parameterSlots": 3,
          "returnSlots": 3
        },
        "@emitDisputeEndedAndReturn_8671": {
          "entryPoint": 5006,
          "id": 8671,
          "parameterSlots": 3,
          "returnSlots": 3
        },
        "@finalizeEpoch_4877": {
          "entryPoint": 376,
          "id": 4877,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@getAgreementMask_6020": {
          "entryPoint": null,
          "id": 6020,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getChallengePeriod_5008": {
          "entryPoint": null,
          "id": 5008,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getClaimerOfCurrentClaim_8885": {
          "entryPoint": 3333,
          "id": 8885,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getConsensusGoalMask_6110": {
          "entryPoint": null,
          "id": 6110,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getCurrentEpoch_4898": {
          "entryPoint": 843,
          "id": 4898,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getCurrentEpoch_8239": {
          "entryPoint": 1719,
          "id": 8239,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getCurrentPhase_4920": {
          "entryPoint": 772,
          "id": 4920,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getInputAccumulationStart_4942": {
          "entryPoint": null,
          "id": 4942,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getInputDuration_4986": {
          "entryPoint": null,
          "id": 4986,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getNumClaims_5852": {
          "entryPoint": 4574,
          "id": 5852,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getNumberOfFinalizedEpochs_7788": {
          "entryPoint": null,
          "id": 7788,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getSealingEpochTimestamp_4964": {
          "entryPoint": null,
          "id": 4964,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getTemplateHash_5027": {
          "entryPoint": null,
          "id": 5027,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getValidatorIndex_9006": {
          "entryPoint": 3110,
          "id": 9006,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@increaseNumClaims_5893": {
          "entryPoint": 4055,
          "id": 5893,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@initiateDispute_7093": {
          "entryPoint": 3685,
          "id": 7093,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@isConsensus_8836": {
          "entryPoint": 3651,
          "id": 8836,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@isValidator_8958": {
          "entryPoint": 2935,
          "id": 8958,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@onClaim_8633": {
          "entryPoint": 1893,
          "id": 8633,
          "parameterSlots": 3,
          "returnSlots": 3
        },
        "@onDisputeEnd_8455": {
          "entryPoint": 4138,
          "id": 8455,
          "parameterSlots": 4,
          "returnSlots": 3
        },
        "@onNewEpoch_7692": {
          "entryPoint": 2869,
          "id": 7692,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@onNewEpoch_7774": {
          "entryPoint": null,
          "id": 7774,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@onNewEpoch_8498": {
          "entryPoint": 2776,
          "id": 8498,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@onNewInputAccumulation_7671": {
          "entryPoint": 1881,
          "id": 7671,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@removeValidator_6182": {
          "entryPoint": 5075,
          "id": 6182,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@removeValidator_8812": {
          "entryPoint": 4832,
          "id": 8812,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@resolveDispute_8001": {
          "entryPoint": 3873,
          "id": 8001,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@resolveValidatorResult_8102": {
          "entryPoint": 2434,
          "id": 8102,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@setAgreementMask_6089": {
          "entryPoint": 3811,
          "id": 6089,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@setNumClaims_5971": {
          "entryPoint": 4652,
          "id": 5971,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@startNewEpoch_8196": {
          "entryPoint": 1407,
          "id": 8196,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@swapInputBox_7713": {
          "entryPoint": 2904,
          "id": 7713,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@updateClaimAgreementMask_8912": {
          "entryPoint": 3608,
          "id": 8912,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_decode_tuple_t_bytes32": {
          "entryPoint": 5319,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_payable_t_address_payable_t_bytes32__to_t_address_t_address_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_enum$_Phase_$5662__to_t_uint8__fromStack_reversed": {
          "entryPoint": 5300,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_enum$_Result_$5716_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__to_t_uint8_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__fromStack_reversed": {
          "entryPoint": 5437,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_0fa6258d77e1ae243515c3844792e5570489e1a536afaa96177ed2afebc7bc1f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_13d43d64d78f81493e6d51a2cd7fe9a7d75c7361db948a4163eb953bb7c18e90__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_724a1a52159ca2ba80a0176a83b5dd7273d23b0484847d7480bf867e72e8022d__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 5552,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8a7130c090cfeeea0c44f268e56ab7cc213b4a2db431894594339a13db4dede8__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9435e67db38af498cac4ff0f67c95329bbd8b0b6f440c6fbb30817e980901290__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9f472971abf84cec2b9857f1d01ead29b405a6824513831338b49ed5445df55e__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c4d2189ab07abe2786c9ddd18bc105c0ac91aadb5554043dc1484eea89108e20__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_cdaeb840dc7c9c20ccfebaeaffab1ccdfa95fb47b9d777965bacfa7526d207ae__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_cf380c47f6d4378bba73c9b2df8a3523552d90befb210db4e6e6d52a38b34f25__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_d9df6a7699a9b21c144340fa7bcf61e7a08aaf8f8c7236889796c31e7b8f7317__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 5366,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 5619,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 5596,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "increment_t_uint256": {
          "entryPoint": 5412,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 5344,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 5248,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 5390,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_assert_enum_Phase": {
          "entryPoint": 5270,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:7940:49",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:49",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "115:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "125:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "137:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "148:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "133:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "133:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "125:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "167:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "178:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "160:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "160:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "160:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "84:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "95:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "106:4:49",
                    "type": ""
                  }
                ],
                "src": "14:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "297:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "307:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "319:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "330:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "315:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "315:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "307:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "349:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "360:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "342:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "342:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "342:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "266:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "277:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "288:4:49",
                    "type": ""
                  }
                ],
                "src": "196:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "410:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "427:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "434:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "439:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "430:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "430:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "420:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "420:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "420:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "467:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "470:4:49",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "460:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "460:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "460:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "491:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "494:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "484:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "484:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "484:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "378:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "558:159:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "600:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "621:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "628:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "633:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "624:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "624:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "614:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "614:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "614:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "665:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "668:4:49",
                                  "type": "",
                                  "value": "0x21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "658:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "658:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "658:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "693:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "696:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "686:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "686:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "686:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "581:5:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "588:1:49",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "578:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "578:12:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "571:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "571:20:49"
                      },
                      "nodeType": "YulIf",
                      "src": "568:143:49"
                    }
                  ]
                },
                "name": "validator_assert_enum_Phase",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "547:5:49",
                    "type": ""
                  }
                ],
                "src": "510:207:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "831:120:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "841:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "853:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "864:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "849:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "849:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "841:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "904:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_assert_enum_Phase",
                          "nodeType": "YulIdentifier",
                          "src": "876:27:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "876:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "876:35:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "927:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "938:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "920:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "920:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "920:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_enum$_Phase_$5662__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "800:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "811:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "822:4:49",
                    "type": ""
                  }
                ],
                "src": "722:229:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1026:110:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1072:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1081:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1084:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1074:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1074:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1074:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1047:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1056:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1043:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1043:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1068:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1039:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1039:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1036:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1097:33:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1120:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1107:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1107:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1097:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "992:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1003:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1015:6:49",
                    "type": ""
                  }
                ],
                "src": "956:180:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1315:177:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1332:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1343:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1325:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1325:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1325:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1366:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1377:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1362:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1362:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1382:2:49",
                            "type": "",
                            "value": "27"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1355:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1355:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1355:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1405:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1416:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1401:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1401:18:49"
                          },
                          {
                            "hexValue": "506861736520213d204177616974696e6720436f6e73656e737573",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "1421:29:49",
                            "type": "",
                            "value": "Phase != Awaiting Consensus"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1394:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1394:57:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1394:57:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1460:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1472:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1483:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1468:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1468:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1460:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9f472971abf84cec2b9857f1d01ead29b405a6824513831338b49ed5445df55e__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1292:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1306:4:49",
                    "type": ""
                  }
                ],
                "src": "1141:351:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1529:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1546:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1553:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1558:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1549:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1549:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1539:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1539:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1539:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1586:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1589:4:49",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1579:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1579:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1579:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1610:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1613:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "1603:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1603:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1603:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "1497:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1677:80:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1704:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1706:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1706:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1706:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1693:1:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1700:1:49"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1696:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1696:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1690:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1690:13:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1687:39:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1735:16:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1746:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1749:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1742:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1742:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "1735:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1660:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1663:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "1669:3:49",
                    "type": ""
                  }
                ],
                "src": "1629:128:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1936:175:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1953:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1964:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1946:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1946:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1946:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1987:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1998:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1983:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1983:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2003:2:49",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1976:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1976:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1976:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2026:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2037:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2022:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2022:18:49"
                          },
                          {
                            "hexValue": "4368616c6c656e676520706572696f64206e6f74206f766572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "2042:27:49",
                            "type": "",
                            "value": "Challenge period not over"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2015:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2015:55:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2015:55:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2079:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2091:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2102:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2087:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2087:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2079:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8a7130c090cfeeea0c44f268e56ab7cc213b4a2db431894594339a13db4dede8__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1913:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1927:4:49",
                    "type": ""
                  }
                ],
                "src": "1762:349:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2290:174:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2307:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2318:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2300:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2300:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2300:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2341:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2352:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2337:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2337:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2357:2:49",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2330:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2330:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2330:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2380:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2391:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2376:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2376:18:49"
                          },
                          {
                            "hexValue": "4e6f20436c61696d20746f2062652066696e616c697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "2396:26:49",
                            "type": "",
                            "value": "No Claim to be finalized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2369:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2369:54:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2369:54:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2432:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2444:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2455:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2440:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2440:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2432:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_13d43d64d78f81493e6d51a2cd7fe9a7d75c7361db948a4163eb953bb7c18e90__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2267:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2281:4:49",
                    "type": ""
                  }
                ],
                "src": "2116:348:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2643:176:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2660:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2671:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2653:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2653:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2653:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2694:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2705:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2690:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2690:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2710:2:49",
                            "type": "",
                            "value": "26"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2683:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2683:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2683:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2733:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2744:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2729:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2729:18:49"
                          },
                          {
                            "hexValue": "506861736520213d204177616974696e67436f6e73656e737573",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "2749:28:49",
                            "type": "",
                            "value": "Phase != AwaitingConsensus"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2722:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2722:56:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2722:56:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2787:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2799:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2810:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2795:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2795:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2787:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_cdaeb840dc7c9c20ccfebaeaffab1ccdfa95fb47b9d777965bacfa7526d207ae__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2620:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2634:4:49",
                    "type": ""
                  }
                ],
                "src": "2469:350:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2953:145:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2963:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2975:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2986:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2971:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2971:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2963:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3005:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3020:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3036:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3041:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3032:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3032:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3045:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3028:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3028:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3016:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3016:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2998:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2998:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2998:51:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3069:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3080:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3065:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3065:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "3085:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3058:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3058:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3058:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2914:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2925:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2933:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2944:4:49",
                    "type": ""
                  }
                ],
                "src": "2824:274:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3277:161:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3294:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3305:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3287:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3287:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3287:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3328:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3339:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3324:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3324:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3344:2:49",
                            "type": "",
                            "value": "11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3317:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3317:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3317:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3367:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3378:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3363:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3363:18:49"
                          },
                          {
                            "hexValue": "656d70747920636c61696d",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "3383:13:49",
                            "type": "",
                            "value": "empty claim"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3356:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3356:41:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3356:41:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3406:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3418:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3429:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3414:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3414:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3406:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_cf380c47f6d4378bba73c9b2df8a3523552d90befb210db4e6e6d52a38b34f25__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3254:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3268:4:49",
                    "type": ""
                  }
                ],
                "src": "3103:335:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3617:168:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3634:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3645:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3627:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3627:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3627:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3668:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3679:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3664:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3664:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3684:2:49",
                            "type": "",
                            "value": "18"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3657:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3657:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3657:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3707:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3718:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3703:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3703:18:49"
                          },
                          {
                            "hexValue": "73656e646572206e6f7420616c6c6f776564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "3723:20:49",
                            "type": "",
                            "value": "sender not allowed"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3696:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3696:48:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3696:48:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3753:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3765:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3776:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3761:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3761:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3753:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9435e67db38af498cac4ff0f67c95329bbd8b0b6f440c6fbb30817e980901290__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3594:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3608:4:49",
                    "type": ""
                  }
                ],
                "src": "3443:342:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3964:229:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3981:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3992:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3974:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3974:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3974:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4015:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4026:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4011:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4011:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4031:2:49",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4004:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4004:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4004:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4054:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4065:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4050:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4050:18:49"
                          },
                          {
                            "hexValue": "73656e6465722068616420636c61696d656420696e20746869732065706f6368",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4070:34:49",
                            "type": "",
                            "value": "sender had claimed in this epoch"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4043:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4043:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4043:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4125:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4136:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4121:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4121:18:49"
                          },
                          {
                            "hexValue": "206265666f7265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4141:9:49",
                            "type": "",
                            "value": " before"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4114:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4114:37:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4114:37:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4160:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4172:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4183:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4168:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4168:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4160:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_0fa6258d77e1ae243515c3844792e5570489e1a536afaa96177ed2afebc7bc1f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3941:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3955:4:49",
                    "type": ""
                  }
                ],
                "src": "3790:403:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4372:158:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4389:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4400:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4382:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4382:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4382:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4423:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4434:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4419:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4419:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4439:1:49",
                            "type": "",
                            "value": "9"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4412:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4412:29:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4412:29:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4461:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4472:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4457:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4457:18:49"
                          },
                          {
                            "hexValue": "616464726573732030",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4477:11:49",
                            "type": "",
                            "value": "address 0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4450:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4450:39:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4450:39:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4498:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4510:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4521:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4506:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4506:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4498:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4349:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4363:4:49",
                    "type": ""
                  }
                ],
                "src": "4198:332:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4567:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4584:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4591:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4596:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4587:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4587:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4577:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4577:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4577:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4624:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4627:4:49",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4617:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4617:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4617:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4648:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4651:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "4641:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4641:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4641:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "4535:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4714:88:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4745:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "4747:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4747:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4747:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4730:5:49"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4741:1:49",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "4737:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4737:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "4727:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4727:17:49"
                      },
                      "nodeType": "YulIf",
                      "src": "4724:43:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4776:20:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4787:5:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4794:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4783:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4783:13:49"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "4776:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "4696:5:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "4706:3:49",
                    "type": ""
                  }
                ],
                "src": "4667:135:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4981:169:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4998:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5009:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4991:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4991:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4991:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5032:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5043:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5028:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5028:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5048:2:49",
                            "type": "",
                            "value": "19"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5021:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5021:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5021:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5071:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5082:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5067:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5067:18:49"
                          },
                          {
                            "hexValue": "76616c696461746f72206e6f7420666f756e64",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5087:21:49",
                            "type": "",
                            "value": "validator not found"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5060:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5060:49:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5060:49:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5118:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5130:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5141:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5126:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5126:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5118:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4958:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4972:4:49",
                    "type": ""
                  }
                ],
                "src": "4807:343:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5329:178:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5346:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5357:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5339:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5339:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5339:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5380:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5391:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5376:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5376:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5396:2:49",
                            "type": "",
                            "value": "28"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5369:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5369:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5369:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5419:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5430:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5415:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5415:18:49"
                          },
                          {
                            "hexValue": "4167726565696e672076616c696461746f72206e6f7420666f756e64",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5435:30:49",
                            "type": "",
                            "value": "Agreeing validator not found"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5408:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5408:58:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5408:58:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5475:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5487:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5498:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5483:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5483:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5475:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_d9df6a7699a9b21c144340fa7bcf61e7a08aaf8f8c7236889796c31e7b8f7317__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5306:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5320:4:49",
                    "type": ""
                  }
                ],
                "src": "5155:352:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5786:758:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5796:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5808:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5819:3:49",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5804:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5804:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5796:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5860:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_assert_enum_Phase",
                          "nodeType": "YulIdentifier",
                          "src": "5832:27:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5832:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5832:35:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5883:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5894:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5876:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5876:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5876:25:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5910:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5920:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5914:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5931:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5946:9:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "5957:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5942:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5942:18:49"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "5935:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5969:10:49",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "5976:3:49"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "5969:3:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5988:20:49",
                      "value": {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "6002:6:49"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "5992:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6017:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6026:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "6021:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6083:120:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "6104:3:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "6115:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "6109:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6109:13:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "6097:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6097:26:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6097:26:49"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "6136:19:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "6147:3:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6152:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6143:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6143:12:49"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6136:3:49"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "6168:25:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "6182:6:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6190:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6178:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6178:15:49"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "6168:6:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "6047:1:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6050:4:49",
                            "type": "",
                            "value": "0x02"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "6044:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6044:11:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "6056:18:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "6058:14:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "6067:1:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6070:1:49",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6063:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6063:9:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "6058:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "6040:3:49",
                        "statements": []
                      },
                      "src": "6036:167:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6212:31:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6229:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6240:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6225:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6225:18:49"
                      },
                      "variables": [
                        {
                          "name": "pos_1",
                          "nodeType": "YulTypedName",
                          "src": "6216:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6252:14:49",
                      "value": {
                        "name": "pos_1",
                        "nodeType": "YulIdentifier",
                        "src": "6261:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "pos_1",
                          "nodeType": "YulIdentifier",
                          "src": "6252:5:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6275:22:49",
                      "value": {
                        "name": "value2",
                        "nodeType": "YulIdentifier",
                        "src": "6291:6:49"
                      },
                      "variables": [
                        {
                          "name": "srcPtr_1",
                          "nodeType": "YulTypedName",
                          "src": "6279:8:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6306:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6317:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i_1",
                          "nodeType": "YulTypedName",
                          "src": "6310:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6380:158:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6401:5:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "6418:8:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "6412:5:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6412:15:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "6437:3:49",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "6442:1:49",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "6433:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6433:11:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6446:1:49",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "6429:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6429:19:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "6408:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6408:41:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "6394:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6394:56:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6394:56:49"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "6463:23:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6476:5:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6483:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6472:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6472:14:49"
                            },
                            "variableNames": [
                              {
                                "name": "pos_1",
                                "nodeType": "YulIdentifier",
                                "src": "6463:5:49"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "6499:29:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6515:8:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6525:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6511:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6511:17:49"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr_1",
                                "nodeType": "YulIdentifier",
                                "src": "6499:8:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i_1",
                            "nodeType": "YulIdentifier",
                            "src": "6338:3:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6343:4:49",
                            "type": "",
                            "value": "0x02"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "6335:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6335:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "6349:22:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "6351:18:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6362:3:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6367:1:49",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "6358:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6358:11:49"
                            },
                            "variableNames": [
                              {
                                "name": "i_1",
                                "nodeType": "YulIdentifier",
                                "src": "6351:3:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "6331:3:49",
                        "statements": []
                      },
                      "src": "6327:211:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_enum$_Result_$5716_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__to_t_uint8_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5739:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5750:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5758:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5766:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5777:4:49",
                    "type": ""
                  }
                ],
                "src": "5512:1032:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6723:168:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6740:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6751:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6733:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6733:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6733:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6774:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6785:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6770:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6770:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6790:2:49",
                            "type": "",
                            "value": "18"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6763:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6763:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6763:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6813:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6824:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6809:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6809:18:49"
                          },
                          {
                            "hexValue": "696e646578206f7574206f662072616e6765",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6829:20:49",
                            "type": "",
                            "value": "index out of range"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6802:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6802:48:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6802:48:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6859:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6871:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6882:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6867:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6867:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6859:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_724a1a52159ca2ba80a0176a83b5dd7273d23b0484847d7480bf867e72e8022d__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6700:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6714:4:49",
                    "type": ""
                  }
                ],
                "src": "6549:342:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7069:218:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7079:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7091:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7102:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7087:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7087:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7079:4:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7114:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7132:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7137:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "7128:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7128:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7141:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "7124:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7124:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "7118:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7159:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7174:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7182:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7170:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7170:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7152:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7152:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7152:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7206:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7217:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7202:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7202:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7226:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7234:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7222:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7222:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7195:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7195:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7195:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7258:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7269:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7254:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7254:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "7274:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7247:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7247:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7247:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_payable_t_address_payable_t_bytes32__to_t_address_t_address_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7022:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "7033:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7041:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7049:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7060:4:49",
                    "type": ""
                  }
                ],
                "src": "6896:391:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7341:76:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7363:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "7365:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7365:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7365:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7357:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "7360:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "7354:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7354:8:49"
                      },
                      "nodeType": "YulIf",
                      "src": "7351:34:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7394:17:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7406:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "7409:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "7402:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7402:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "7394:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "7323:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "7326:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "7332:4:49",
                    "type": ""
                  }
                ],
                "src": "7292:125:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7474:116:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7533:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "7535:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7535:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7535:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "7505:1:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "7498:6:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7498:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7491:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7491:17:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "7513:1:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7524:1:49",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "7520:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7520:6:49"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "7528:1:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "7516:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7516:14:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7510:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7510:21:49"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "7487:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7487:45:49"
                      },
                      "nodeType": "YulIf",
                      "src": "7484:71:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7564:20:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7579:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "7582:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "7575:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7575:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "7564:7:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "7453:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "7456:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "7462:7:49",
                    "type": ""
                  }
                ],
                "src": "7422:168:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7769:169:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7786:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7797:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7779:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7779:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7779:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7820:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7831:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7816:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7816:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7836:2:49",
                            "type": "",
                            "value": "19"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7809:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7809:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7809:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7859:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7870:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7855:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7855:18:49"
                          },
                          {
                            "hexValue": "436c61696d734d61736b204f766572666c6f77",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7875:21:49",
                            "type": "",
                            "value": "ClaimsMask Overflow"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7848:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7848:49:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7848:49:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7906:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7918:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7929:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7914:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7914:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7906:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c4d2189ab07abe2786c9ddd18bc105c0ac91aadb5554043dc1484eea89108e20__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7746:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7760:4:49",
                    "type": ""
                  }
                ],
                "src": "7595:343:49"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function validator_assert_enum_Phase(value)\n    {\n        if iszero(lt(value, 3))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_enum$_Phase_$5662__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        validator_assert_enum_Phase(value0)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_9f472971abf84cec2b9857f1d01ead29b405a6824513831338b49ed5445df55e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Phase != Awaiting Consensus\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_8a7130c090cfeeea0c44f268e56ab7cc213b4a2db431894594339a13db4dede8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Challenge period not over\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_13d43d64d78f81493e6d51a2cd7fe9a7d75c7361db948a4163eb953bb7c18e90__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"No Claim to be finalized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cdaeb840dc7c9c20ccfebaeaffab1ccdfa95fb47b9d777965bacfa7526d207ae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Phase != AwaitingConsensus\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_cf380c47f6d4378bba73c9b2df8a3523552d90befb210db4e6e6d52a38b34f25__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"empty claim\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9435e67db38af498cac4ff0f67c95329bbd8b0b6f440c6fbb30817e980901290__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"sender not allowed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0fa6258d77e1ae243515c3844792e5570489e1a536afaa96177ed2afebc7bc1f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"sender had claimed in this epoch\")\n        mstore(add(headStart, 96), \" before\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"address 0\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"validator not found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d9df6a7699a9b21c144340fa7bcf61e7a08aaf8f8c7236889796c31e7b8f7317__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Agreeing validator not found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_enum$_Result_$5716_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__to_t_uint8_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        validator_assert_enum_Phase(value0)\n        mstore(headStart, value0)\n        let _1 := 32\n        let pos := add(headStart, _1)\n        pos := pos\n        let srcPtr := value1\n        let i := 0\n        for { } lt(i, 0x02) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        let pos_1 := add(headStart, 96)\n        pos_1 := pos_1\n        let srcPtr_1 := value2\n        let i_1 := 0\n        for { } lt(i_1, 0x02) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr_1), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr_1 := add(srcPtr_1, _1)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_724a1a52159ca2ba80a0176a83b5dd7273d23b0484847d7480bf867e72e8022d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"index out of range\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_payable_t_address_payable_t_bytes32__to_t_address_t_address_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_c4d2189ab07abe2786c9ddd18bc105c0ac91aadb5554043dc1484eea89108e20__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"ClaimsMask Overflow\")\n        tail := add(headStart, 96)\n    }\n}",
          "id": 49,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3A40EA5 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA3A40EA5 EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0xB97DD9E2 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0xBD66528A EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0xDDF7BCF0 EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0xE17BA012 EQ PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x54EE1DA5 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x61B12C66 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x7864B77D EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x82AE9EF7 EQ PUSH2 0x101 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0xB6 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x178 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x113 PUSH2 0x304 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x34B JUMP JUMPDEST PUSH2 0x109 PUSH2 0x136 CALLDATASIZE PUSH1 0x4 PUSH2 0x14C7 JUMP JUMPDEST PUSH2 0x365 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH4 0xFFFFFFFF AND PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1C9 JUMPI PUSH2 0x1C9 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1DF JUMPI PUSH2 0x1DF PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0x231 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506861736520213D204177616974696E6720436F6E73656E7375730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV DUP2 AND SWAP2 PUSH5 0x100000000 SWAP1 DIV AND PUSH2 0x258 DUP2 DUP4 PUSH2 0x14F6 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x2A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4368616C6C656E676520706572696F64206E6F74206F76657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST DUP4 SLOAD PUSH2 0x2F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20436C61696D20746F2062652066696E616C697A65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH2 0x2FD DUP6 PUSH2 0x57F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1613 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x345 JUMPI PUSH2 0x345 PUSH2 0x1480 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x345 DUP2 PUSH2 0x6B7 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x3CF PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x1 DUP8 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3FD JUMPI PUSH2 0x3FD PUSH2 0x1480 JUMP JUMPDEST PUSH1 0x1 DUP10 ADD SLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x429 JUMPI PUSH2 0x429 PUSH2 0x1480 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x43E JUMPI POP PUSH2 0x43B DUP2 DUP4 PUSH2 0x14F6 JUMP JUMPDEST TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4AF JUMPI PUSH1 0x1 DUP11 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP4 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x47D SWAP1 DUP6 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x48E DUP10 PUSH2 0x759 JUMP JUMPDEST PUSH1 0x1 DUP11 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x60 SHL NOT AND PUSH1 0x1 PUSH1 0x60 SHL TIMESTAMP PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0x510 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506861736520213D204177616974696E67436F6E73656E737573000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH2 0x51B DUP8 CALLER DUP14 PUSH2 0x765 JUMP JUMPDEST SWAP2 SWAP8 POP SWAP6 POP SWAP4 POP PUSH2 0x52D DUP9 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP15 SWAP1 MSTORE PUSH32 0xD31325E5DC55B03EDF08C70299D3B1BC8D4C2CA8512C90138DDD03E3F54FCE6C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x572 DUP11 DUP8 DUP8 DUP8 PUSH2 0x982 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF SWAP1 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x604 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x60 SHL NOT PUSH4 0xFFFFFFFF TIMESTAMP AND PUSH1 0x1 PUSH1 0x40 SHL MUL AND PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT SWAP1 SWAP2 AND OR PUSH4 0xFFFFFFFF PUSH1 0x60 SHL OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x655 DUP3 PUSH2 0xAD8 JUMP JUMPDEST SWAP1 POP PUSH2 0x662 DUP4 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x6E3D05BC77B9307D9BA574C7C3196A746EDD51104DED1C823EDC63BE4B8A63C3 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP1 DUP5 ADD DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 ADD DUP2 SWAP1 SSTORE PUSH2 0x2FD DUP5 PUSH2 0xB35 JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP2 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x723 JUMPI PUSH2 0x723 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x739 JUMPI PUSH2 0x739 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0x74E JUMPI PUSH2 0x749 DUP3 PUSH1 0x1 PUSH2 0x14F6 JUMP JUMPDEST PUSH2 0x750 JUMP JUMPDEST DUP2 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x762 DUP2 PUSH2 0xB58 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76F PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x777 PUSH2 0x1430 JUMP JUMPDEST DUP4 PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x656D70747920636C61696D PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH2 0x7BC DUP7 DUP7 PUSH2 0xB77 JUMP JUMPDEST PUSH2 0x7FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1CD95B99195C881B9BDD08185B1B1BDDD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x809 DUP8 DUP8 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x3 DUP9 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xF8 SHR DUP2 SHR PUSH1 0x1 AND ISZERO PUSH2 0x876 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73656E6465722068616420636C61696D656420696E20746869732065706F6368 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x206265666F7265 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x228 JUMP JUMPDEST DUP7 SLOAD PUSH2 0x880 JUMPI DUP5 DUP8 SSTORE JUMPDEST DUP7 SLOAD DUP6 EQ PUSH2 0x8E0 JUMPI PUSH2 0x8D4 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x8BA DUP13 PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0xDBF JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x979 JUMP JUMPDEST PUSH2 0x8EA DUP8 DUP8 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x8F3 DUP8 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x937 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x932 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xDBF JUMP JUMPDEST PUSH2 0x971 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x971 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0xDBF JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x996 JUMPI PUSH2 0x996 PUSH2 0x1480 JUMP JUMPDEST SUB PUSH2 0xA20 JUMPI PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9C1 JUMPI PUSH2 0x9C1 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9D7 JUMPI PUSH2 0x9D7 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0xA1A JUMPI PUSH1 0x1 DUP6 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0xA11 SWAP2 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA34 JUMPI PUSH2 0xA34 PUSH2 0x1480 JUMP JUMPDEST SUB PUSH2 0xA47 JUMPI PUSH2 0xA42 DUP5 PUSH2 0x57F JUMP JUMPDEST PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA6D JUMPI PUSH2 0xA6D PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xA83 JUMPI PUSH2 0xA83 PUSH2 0x1480 JUMP JUMPDEST EQ PUSH2 0xAC8 JUMPI PUSH1 0x1 DUP6 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x81 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1633 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0xABF SWAP1 PUSH1 0x2 SWAP1 PUSH2 0x14B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH2 0x2FD DUP4 DUP4 PUSH2 0xE65 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE3 DUP3 PUSH2 0xE8E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 DUP4 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB AND PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xDDC860800A99149017C480EC51523BF4143B7215E78956AE5C31E5C568F5383A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0xB4A JUMPI PUSH2 0x762 DUP2 PUSH1 0x0 PUSH2 0x144E JUMP JUMPDEST PUSH2 0x762 PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x144E JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 PUSH2 0xB6C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xC1A JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBDF JUMPI PUSH2 0xBDF PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xC08 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xC20 JUMP JUMPDEST DUP1 PUSH2 0xC12 DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBBE JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xC6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xCC6 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC8E JUMPI PUSH2 0xC8E PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xCB4 JUMPI SWAP1 POP PUSH2 0xC20 JUMP JUMPDEST DUP1 PUSH2 0xCBE DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC6D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D985B1A59185D1BDC881B9BDD08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD16 DUP4 PUSH1 0x3 ADD SLOAD PUSH1 0xF8 SHR SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xD76 JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0xD64 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD47 JUMPI PUSH2 0xD47 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0xD6E DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD1B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4167726565696E672076616C696461746F72206E6F7420666F756E6400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDC9 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0xDD1 PUSH2 0x1430 JUMP JUMPDEST PUSH32 0x495383AED97965C56495CDBADEDFE9667A1B028C54D3FC4B5335895146E02B70 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE04 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP5 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE24 DUP4 DUP4 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0xE36 SWAP1 DUP3 PUSH2 0xEE3 JUMP JUMPDEST DUP4 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xF0 DUP2 SWAP1 SHR PUSH1 0xFF AND PUSH2 0xE5D DUP3 PUSH1 0xF8 SHR SWAP1 JUMP JUMPDEST EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD DUP4 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1673 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH2 0xE89 SWAP3 DUP5 SWAP3 PUSH2 0xF21 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9E DUP3 PUSH1 0x3 ADD SLOAD PUSH1 0xF8 SHR SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0xE89 JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0xED1 JUMPI PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0xECB SWAP1 DUP3 PUSH1 0x1 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE JUMPDEST DUP1 PUSH2 0xEDB DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xEA3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 LT PUSH2 0xF05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF12 DUP4 PUSH1 0xF8 PUSH2 0x14F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SHL DUP5 OR SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2B PUSH2 0x1430 JUMP JUMPDEST PUSH2 0xF33 PUSH2 0x1430 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1653 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF4E DUP2 DUP9 DUP9 DUP9 PUSH2 0x102A JUMP JUMPDEST PUSH1 0x1 DUP12 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x60 SHL NOT AND PUSH1 0x1 PUSH1 0x60 SHL TIMESTAMP PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP10 SWAP1 MSTORE SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH32 0x2AFBDE4D47160A9C5DE25B0DF88D5B83E705286F2A447CAC162DB5E99AD6F5D2 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xFCD DUP9 DUP6 DUP6 DUP6 PUSH2 0x982 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 LT PUSH2 0xFF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1005 DUP6 DUP6 PUSH2 0x11DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1013 DUP5 DUP4 PUSH2 0x14F6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1020 DUP7 DUP7 DUP4 PUSH2 0x122C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1034 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x103C PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x1046 DUP8 DUP7 PUSH2 0x12E0 JUMP JUMPDEST DUP7 SLOAD DUP5 SUB PUSH2 0x10E0 JUMPI PUSH2 0x1057 DUP8 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x109B JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x1096 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH2 0x10D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x10D5 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x11D4 JUMP JUMPDEST PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0xF8 SHR ISZERO PUSH2 0x1139 JUMPI PUSH2 0x10D5 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x111F DUP13 PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x138E JUMP JUMPDEST DUP4 DUP8 SSTORE PUSH2 0x1146 DUP8 DUP8 PUSH2 0xE18 JUMP JUMPDEST PUSH2 0x114F DUP8 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0x1193 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x118E SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH2 0x11CD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x11CD SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 LT PUSH2 0x1200 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1211 PUSH1 0x1 PUSH4 0x40000000 PUSH2 0x15DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x121F DUP5 PUSH1 0x1E PUSH2 0x15F3 JUMP JUMPDEST DUP6 SWAP1 SHR AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 LT PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST PUSH2 0x125D PUSH1 0x1 PUSH4 0x40000000 PUSH2 0x15DC JUMP JUMPDEST DUP3 GT ISZERO PUSH2 0x12A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x436C61696D734D61736B204F766572666C6F77 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x228 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12AF DUP5 PUSH1 0x1E PUSH2 0x15F3 JUMP JUMPDEST PUSH2 0x12BE PUSH1 0x1 PUSH4 0x40000000 PUSH2 0x15DC JUMP JUMPDEST SWAP1 SHL NOT SWAP1 POP DUP5 DUP2 AND PUSH2 0x12D1 DUP6 PUSH1 0x1E PUSH2 0x15F3 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SHL SWAP1 SWAP3 OR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0xE89 JUMPI DUP3 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1304 JUMPI PUSH2 0x1304 PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND SUB PUSH2 0x137C JUMPI PUSH1 0x0 DUP4 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x133A JUMPI PUSH2 0x133A PUSH2 0x150E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x1372 SWAP1 DUP3 PUSH2 0x13D3 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x1386 DUP2 PUSH2 0x1524 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12E3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1398 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x13A0 PUSH2 0x1430 JUMP JUMPDEST PUSH32 0x9201C193A07CAE1DF95AE692CC698685574C942A04514C48A4C3249F38594FF DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xE04 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 LT PUSH2 0x13F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x228 SWAP1 PUSH2 0x15B0 JUMP JUMPDEST DUP3 PUSH1 0x0 PUSH2 0x1403 DUP5 PUSH1 0xF8 PUSH2 0x14F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SHL NOT SWAP2 DUP3 AND SWAP2 SWAP1 POP PUSH2 0x1419 DUP5 PUSH1 0xF0 PUSH2 0x14F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SHL NOT SWAP2 DUP3 AND SWAP2 SWAP1 POP PUSH2 0x750 DUP3 DUP6 PUSH1 0x0 PUSH2 0x122C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x762 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x147C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1468 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x762 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x14C1 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1509 JUMPI PUSH2 0x1509 PUSH2 0x14E0 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1536 JUMPI PUSH2 0x1536 PUSH2 0x14E0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x154A DUP6 PUSH2 0x1496 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP6 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x1573 JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1556 JUMP JUMPDEST POP POP POP PUSH1 0x60 DUP4 ADD DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x15A4 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x157E JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E646578206F7574206F662072616E6765 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x15EE JUMPI PUSH2 0x15EE PUSH2 0x14E0 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x160D JUMPI PUSH2 0x160D PUSH2 0x14E0 JUMP JUMPDEST POP MUL SWAP1 JUMP INVALID 0xD3 0x2D PUSH32 0x90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189DED606D SLOAD 0x4C 0x22 MUL 0xD0 ORIGIN 0xD2 PUSH3 0x6C3909 0x23 0xE6 CALLCODE PUSH1 0xCA 0x5D DUP10 PUSH3 0x5BBA0C INVALID PUSH17 0xD2BDDA4E8F8AB37FEF2B2E34C4B62FF994 DUP15 0xE6 PUSH2 0xCDCF CALLVALUE 0xE2 MULMOD 0xD7 0xC2 0xF 0x4D 0x1F PUSH15 0x83085E93B1FCD32D7F90491BEE8117 0x2A BLOCKHASH PUSH12 0x65F3270D810392FE53BB0379 0xDD 0xE8 0xBD 0xD4 0xE6 0x24 XOR SWAP13 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0x1F DUP16 0xC3 0xF6 0xCA 0x21 DUP1 MSTORE8 LOG2 SWAP16 DUP16 MOD 0xEA SELFBALANCE 0xC5 0xAD DUP8 0x1E SGT PUSH31 0xEC4DEC64D79934E89D8C3A64736F6C634300080D0033000000000000000000 ",
      "sourceMap": "1025:7189:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7183:226;-1:-1:-1;;;;;;;;;;;7370:31:23;-1:-1:-1;;;7370:31:23;;;;7183:226;;;160:25:49;;;148:2;133:18;7183:226:23;;;;;;;;8013:199;-1:-1:-1;;;;;;;;;;;8183:22:23;8013:199;;7741:214;-1:-1:-1;;;;;;;;;;;7922:25:23;;;;;;7741:214;;5128:891;;;:::i;:::-;;6620:208;;;:::i;:::-;;;;;;;:::i;6359:213::-;;;:::i;3092:1925::-;;;;;;:::i;:::-;;:::i;6897:228::-;-1:-1:-1;;;;;;;;;;;7085:32:23;-1:-1:-1;;;7085:32:23;;;;6897:228;;7469:210;-1:-1:-1;;;;;;;;;;;7648:23:23;;;7469:210;;5128:891;-1:-1:-1;;;;;;;;;;;5425:26:23;-1:-1:-1;;;;;;;;;;;1277:36:43;-1:-1:-1;;;;;;;;;;;942:45:44;5179:43:23;;-1:-1:-1;;;5425:26:23;;;;5419:33;;;;;;;;:::i;:::-;5398:54;-1:-1:-1;5499:23:23;5483:12;:39;;;;;;;;:::i;:::-;;5462:113;;;;-1:-1:-1;;;5462:113:23;;1343:2:49;5462:113:23;;;1325:21:49;1382:2;1362:18;;;1355:30;1421:29;1401:18;;;1394:57;1468:18;;5462:113:23;;;;;;;;;5618:31;;;;;-1:-1:-1;;;5618:31:23;;;;;5685:25;;;;5759:39;5685:25;5618:31;5759:39;:::i;:::-;5741:15;:57;5720:129;;;;-1:-1:-1;;;5720:129:23;;1964:2:49;5720:129:23;;;1946:21:49;2003:2;1983:18;;;1976:30;2042:27;2022:18;;;2015:55;2087:18;;5720:129:23;1762:349:49;5720:129:23;5881:31;;5860:116;;;;-1:-1:-1;;;5860:116:23;;2318:2:49;5860:116:23;;;2300:21:49;2357:2;2337:18;;;2330:30;2396:26;2376:18;;;2369:54;2440:18;;5860:116:23;2116:348:49;5860:116:23;5987:25;:9;:23;:25::i;:::-;5169:850;;;;;5128:891::o;6620:208::-;-1:-1:-1;;;;;;;;;;;6794:26:23;6668:5;;-1:-1:-1;;;;;;;;;;;1277:36:43;-1:-1:-1;;;6794:26:23;;;;6788:33;;;;;;;;:::i;:::-;6781:40;;;6620:208;:::o;6359:213::-;6416:7;-1:-1:-1;;;;;;;;;;;6538:27:23;1277:36:43;6538:25:23;:27::i;3092:1925::-;-1:-1:-1;;;;;;;;;;;852:34:41;744:35:42;-1:-1:-1;;;;;;;;;;;3153:43:23;3552:24;;:::i;:::-;3586:34;;:::i;:::-;3658:26;;;;3631:18;;-1:-1:-1;;;3658:26:23;;;;3652:33;;;;;;;;:::i;:::-;3728:32;;;;3631:54;;-1:-1:-1;3728:32:23;-1:-1:-1;;;3728:32:23;;;;;3794:23;3695:30;3845:12;:39;;;;;;;;:::i;:::-;;:111;;;;-1:-1:-1;3918:38:23;3943:13;3918:22;:38;:::i;:::-;3900:15;:56;3845:111;3828:547;;;3996:23;4033:26;;;:60;;-1:-1:-1;;;;4033:60:23;-1:-1:-1;;;4033:60:23;;;4112:36;;3996:23;;-1:-1:-1;;;;;;;;;;;;4112:36:23;;;3996:23;;4112:36;:::i;:::-;;;;;;;;4203:32;:7;:30;:32::i;:::-;4307:31;;;:57;;-1:-1:-1;;;;4307:57:23;-1:-1:-1;;;4348:15:23;4307:57;;;;;;3828:547;4422:23;4406:12;:39;;;;;;;;:::i;:::-;;4385:112;;;;-1:-1:-1;;;4385:112:23;;2671:2:49;4385:112:23;;;2653:21:49;2710:2;2690:18;;;2683:30;2749:28;2729:18;;;2722:56;2795:18;;4385:112:23;2469:350:49;4385:112:23;4536:93;:18;4584:10;4609;4536:26;:93::i;:::-;4507:122;;-1:-1:-1;4507:122:23;-1:-1:-1;4507:122:23;-1:-1:-1;4846:37:23;:8;1752:14:42;;:21;;1612:168;4846:37:23;4827:114;;;4897:10;2998:51:49;;3080:2;3065:18;;3058:34;;;4827:114:23;;2971:18:49;4827:114:23;;;;;;;4952:58;:9;4985:6;4993;5001:8;4952:32;:58::i;:::-;3143:1874;;;;;;;;;;3092:1925;:::o;5809:945:43:-;6238:19;;;:53;;-1:-1:-1;;;;6238:53:43;;;6306:36;;852:34:41;;744:35:42;;-1:-1:-1;;;;;;;;;;;942:45:44;-1:-1:-1;;;;;;;;;;;6306:36:43;;;5878:39;;6306:36;:::i;:::-;;;;;;;;6352:25;;;:51;;-1:-1:-1;;;;6352:51:43;6387:15;6352:51;-1:-1:-1;;;6352:51:43;6413:43;-1:-1:-1;;6413:43:43;;;;-1:-1:-1;;;6413:43:43;;;-1:-1:-1;6488:31:43;:18;:29;:31::i;:::-;6467:52;;6625:37;:8;1752:14:42;;:21;;1612:168;6625:37:43;6611:64;;160:25:49;;;6611:64:43;;148:2:49;133:18;6611:64:43;;;;;;;1480:14:42;;;;:30;;;;;;;-1:-1:-1;1480:30:42;;;;;;;;;;6727:20:43;:7;:18;:20::i;7136:472::-;1752:14:42;:21;7440:19:43;;;;7235:7;;744:35:42;;7235:7:43;;-1:-1:-1;;;7440:19:43;;;;7434:26;;;;;;;;:::i;:::-;7413:47;-1:-1:-1;7506:23:43;7490:12;:39;;;;;;;;:::i;:::-;;:111;;7582:19;:15;7600:1;7582:19;:::i;:::-;7490:111;;;7548:15;7490:111;7471:130;7136:472;-1:-1:-1;;;;;7136:472:43:o;5967:101:41:-;6045:16;6058:2;6045:12;:16::i;:::-;5967:101;:::o;6002:1531:44:-;6162:6;6182:17;;:::i;:::-;6213:25;;:::i;:::-;6271:5;6263:43;;;;-1:-1:-1;;;6263:43:44;;3305:2:49;6263:43:44;;;3287:21:49;3344:2;3324:18;;;3317:30;-1:-1:-1;;;3363:18:49;;;3356:41;3414:18;;6263:43:44;3103:335:49;6263:43:44;6324:23;6336:2;6340:6;6324:11;:23::i;:::-;6316:54;;;;-1:-1:-1;;;6316:54:44;;3645:2:49;6316:54:44;;;3627:21:49;3684:2;3664:18;;;3657:30;-1:-1:-1;;;3703:18:49;;;3696:48;3761:18;;6316:54:44;3443:342:49;6316:54:44;6454:13;6470:29;6488:2;6492:6;6470:17;:29::i;:::-;6531:13;;;;6454:45;;-1:-1:-1;5657:3:37;5623:37;5622:58;;5700:1;5621:80;5620:87;6509:122:44;;;;-1:-1:-1;;;6509:122:44;;3992:2:49;6509:122:44;;;3974:21:49;4031:2;4011:18;;;4004:30;4070:34;4050:18;;;4043:62;-1:-1:-1;;;4121:18:49;;;4114:37;4168:19;;6509:122:44;3790:403:49;6509:122:44;6713:15;;6709:83;;6758:23;;;6709:83;6815:15;;6806:24;;6802:265;;6869:187;6917:15;6869:187;;;;;;;;6955:2;:15;;;6869:187;;;;6972:5;6869:187;;;;;;;;;;;7001:28;7026:2;7001:24;:28::i;:::-;-1:-1:-1;;;;;6869:187:44;;;;;;;;;;;;:26;:187::i;:::-;6846:210;;;;;;;;;6802:265;7076:36;7101:2;7105:6;7076:24;:36::i;:::-;7142:15;7154:2;7142:11;:15::i;:::-;:384;;7360:166;;;;;;;;;;;7408:17;7360:166;;;;;;;;;;;;;;;-1:-1:-1;;;;;7360:166:44;;;;;;;;;;;7408:17;;7360:166;:26;:166::i;:::-;7142:384;;;7176:165;;;;;;;;;;;-1:-1:-1;7176:165:44;;;;;;;;;;;;;;;-1:-1:-1;;;;;7176:165:44;;;;;;;;;7224:16;;7176:165;:26;:165::i;:::-;7123:403;;;;;;;6002:1531;;;;;;;;:::o;4742:986:43:-;4949:17;4939:6;:27;;;;;;;;:::i;:::-;;4935:787;;5009:19;;;;4982:18;;-1:-1:-1;;;5009:19:43;;;;5003:26;;;;;;;;:::i;:::-;4982:47;-1:-1:-1;5063:23:43;5047:12;:39;;;;;;;;:::i;:::-;;5043:190;;5135:23;5106:19;;;:53;;-1:-1:-1;;;;5106:53:43;-1:-1:-1;;;5106:53:43;;;5182:36;;-1:-1:-1;;;;;;;;;;;5182:36:43;;;;:::i;:::-;;;;;;;;5043:190;4968:275;4935:787;;;5263:16;5253:6;:26;;;;;;;;:::i;:::-;;5249:473;;5295:17;5309:2;5295:13;:17::i;:::-;5249:473;;;5429:19;;;;5402:18;;-1:-1:-1;;;5429:19:43;;;;5423:26;;;;;;;;:::i;:::-;5402:47;-1:-1:-1;5483:21:43;5467:12;:37;;;;;;;;:::i;:::-;;5463:184;;5524:19;;;:51;;-1:-1:-1;;;;5524:51:43;-1:-1:-1;;;5524:51:43;;;5598:34;;-1:-1:-1;;;;;;;;;;;5598:34:43;;;5553:21;;5598:34;:::i;:::-;;;;;;;;5463:184;5660:51;5694:6;5702:8;5660:33;:51::i;5249:473::-;4742:986;;;;:::o;4952:491:44:-;5017:7;5124:32;5153:2;5124:28;:32::i;:::-;5186:15;;5167:16;5243:28;;5343:13;;;;-1:-1:-1;;;;;4746:49:37;5327:13:44;;;:50;5393:18;;160:25:49;;;5393:18:44;;148:2:49;133:18;5393::44;;;;;;;5428:8;4952:491;-1:-1:-1;;4952:491:44:o;6189:310:41:-;6425:18;;;;:23;:67;;6473:19;6480:2;:12;6473:19;:::i;6425:67::-;6451:19;6458:12;;;;6451:19;:::i;6589:129::-;6679:18;;;;:23;6678:33;;6710:1;6678:33;;;6706:1;6678:33;6657:54;;:18;;;;:54;6589:129::o;11875:328:44:-;11986:4;-1:-1:-1;;;;;12014:20:44;;12006:42;;;;-1:-1:-1;;;12006:42:44;;4400:2:49;12006:42:44;;;4382:21:49;4439:1;4419:18;;;4412:29;-1:-1:-1;;;4457:18:49;;;4450:39;4506:18;;12006:42:44;4198:332:49;12006:42:44;12064:9;12059:115;12079:13;;;:20;12075:24;;12059:115;;;12134:2;:13;;12148:1;12134:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;12134:16:44;;;12124:26;;;;12120:43;;12159:4;12152:11;;;;;12120:43;12101:3;;;;:::i;:::-;;;;12059:115;;;;12191:5;12184:12;;11875:328;;;;;:::o;12402:349::-;12519:7;-1:-1:-1;;;;;12550:20:44;;12542:42;;;;-1:-1:-1;;;12542:42:44;;4400:2:49;12542:42:44;;;4382:21:49;4439:1;4419:18;;;4412:29;-1:-1:-1;;;4457:18:49;;;4450:39;4506:18;;12542:42:44;4198:332:49;12542:42:44;12599:9;12594:112;12614:13;;;:20;12610:24;;12594:112;;;12669:2;:13;;12683:1;12669:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;12669:16:44;;;12659:26;;;;12655:40;;12694:1;-1:-1:-1;12687:8:44;;12655:40;12636:3;;;;:::i;:::-;;;;12594:112;;;-1:-1:-1;12715:29:44;;-1:-1:-1;;;12715:29:44;;5009:2:49;12715:29:44;;;4991:21:49;5048:2;5028:18;;;5021:30;-1:-1:-1;;;5067:18:49;;;5060:49;5126:18;;12715:29:44;4807:343:49;10690:592:44;10798:15;11000:21;11024:32;:2;:13;;;5127:3:37;5093:37;;4965:197;11024:32:44;11000:56;;11071:9;11066:162;11086:13;;;:20;11082:24;;11066:162;;;11148:1;:6;;11131:24;;:29;11127:91;;11187:2;:13;;11201:1;11187:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;11187:16:44;;10690:592;-1:-1:-1;;;;10690:592:44:o;11127:91::-;11108:3;;;;:::i;:::-;;;;11066:162;;;-1:-1:-1;11237:38:44;;-1:-1:-1;;;11237:38:44;;5357:2:49;11237:38:44;;;5339:21:49;5396:2;5376:18;;;5369:30;5435;5415:18;;;5408:58;5483:18;;11237:38:44;5155:352:49;8487:391:44;8679:6;8699:17;;:::i;:::-;8730:25;;:::i;:::-;8785:41;8799:6;8807;8815:10;8785:41;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;8844:6:44;;8852;;-1:-1:-1;8860:10:44;;8487:391;-1:-1:-1;8487:391:44:o;11477:259::-;11603:22;11628:29;11646:2;11650:6;11628:17;:29::i;:::-;11683:13;;;;11603:54;;-1:-1:-1;11683:46:44;;11603:54;11683:30;:46::i;:::-;11667:2;:13;;:62;;;;11593:143;11477:259;;:::o;10258:254::-;10397:13;;;;10353:4;;6533:44:37;;;;;;10439:29:44;:10;5127:3:37;5093:37;;4965:197;10439:29:44;:66;;10258:254;-1:-1:-1;;;10258:254:44:o;1119:292:39:-;1368:11;;;1381;;;1394:9;;-1:-1:-1;;;;;;;;;;;1277:36:43;1343:61:39;;1277:36:43;;1343:24:39;:61::i;:::-;1237:174;1119:292;;:::o;9082:451:44:-;9166:21;9190:32;:2;:13;;;5127:3:37;5093:37;;4965:197;9190:32:44;9166:56;;9237:9;9232:295;9252:13;;;:20;9248:24;;9232:295;;;9375:1;:6;;9358:24;;9357:31;9353:164;;9465:13;;;;:37;;9497:1;9500;9465:31;:37::i;:::-;9449:13;;;:53;9353:164;9274:3;;;;:::i;:::-;;;;9232:295;;5927:368:37;6049:10;6101:1;6083:15;:19;6075:50;;;;-1:-1:-1;;;6075:50:37;;;;;;;:::i;:::-;6135:15;6206:21;6212:15;6206:3;:21;:::i;:::-;6200:1;:28;;6154:75;;;-1:-1:-1;;5927:368:37;;;;:::o;3682:761:43:-;3859:13;3882:24;;:::i;:::-;3916:34;;:::i;:::-;-1:-1:-1;;;;;;;;;;;4112:106:43;942:45:44;4157:6:43;4177:5;4196:12;4112:31;:106::i;:::-;4265:24;;;:50;;-1:-1:-1;;;;4265:50:43;-1:-1:-1;;;4299:15:43;4265:50;;;;;;4331:43;;;-1:-1:-1;;;;;7170:15:49;;;7152:34;;7222:15;;7217:2;7202:18;;7195:43;7254:18;;;7247:34;;;4083:135:43;;-1:-1:-1;4083:135:43;;-1:-1:-1;4083:135:43;-1:-1:-1;4331:43:43;;7102:2:49;7087:18;4331:43:43;;;;;;;4384:52;4407:2;4411:6;4419;4427:8;4384:22;:52::i;:::-;3849:594;;;;3682:761;;;;:::o;3155:454:37:-;3300:10;3348:1;3330:15;:19;3322:50;;;;-1:-1:-1;;;3322:50:37;;;;;;;:::i;:::-;3382:18;3403:42;3416:11;3429:15;3403:12;:42::i;:::-;3382:63;-1:-1:-1;3455:14:37;3472:19;3485:6;3382:63;3472:19;:::i;:::-;3455:36;;3552:50;3565:11;3578:15;3595:6;3552:12;:50::i;:::-;3545:57;3155:454;-1:-1:-1;;;;;;3155:454:37:o;2779:2048:44:-;2982:6;3002:17;;:::i;:::-;3033:25;;:::i;:::-;3083:26;3099:2;3103:5;3083:15;:26::i;:::-;3140:15;;3124:31;;3120:587;;3260:15;3272:2;3260:11;:15::i;:::-;:436;;3508:188;;;;;;;;;;;3559:17;3508:188;;;;;;;;;;;;;;;-1:-1:-1;;;;;3508:188:44;;;;;;;;;;;3559:17;;3508:188;:25;:188::i;:::-;3260:436;;;3298:187;;;;;;;;;;;-1:-1:-1;3298:187:44;;;;;;;;;;;;;;;-1:-1:-1;;;;;3298:187:44;;;;;;;;;3349:16;;3298:187;:25;:187::i;:::-;3237:459;;;;;;;;3120:587;3841:13;;;;5127:3:37;5093:37;3841::44;3837:284;;3917:193;3964:15;3917:193;;;;;;;;4002:2;:15;;;3917:193;;;;4019:12;3917:193;;;;;;;;;;;4055:28;4080:2;4055:24;:28::i;:::-;-1:-1:-1;;;;;3917:193:44;;;;;;;;;;;;:25;:193::i;3837:284::-;4319:30;;;4359:36;4319:2;4388:6;4359:24;:36::i;:::-;4424:15;4436:2;4424:11;:15::i;:::-;:396;;4648:172;;;;;;;;;;;4695:17;4648:172;;;;;;;;;;;;;;;-1:-1:-1;;;;;4648:172:44;;;;;;;;;;;4695:17;;4648:172;:25;:172::i;:::-;4424:396;;;4458:171;;;;;;;;;;;-1:-1:-1;4458:171:44;;;;;;;;;;;;;;;-1:-1:-1;;;;;4458:171:44;;;;;;;;;4505:16;;4458:171;:25;:171::i;:::-;4405:415;;;;;;2779:2048;;;;;;;;;:::o;2510:372:37:-;2628:7;2677:1;2659:15;:19;2651:50;;;;-1:-1:-1;;;2651:50:37;;;;;;;:::i;:::-;2711:15;2729:23;2751:1;2730:17;2729:23;:::i;:::-;2711:41;-1:-1:-1;2711:41:37;2833:30;2848:15;1323:2;2833:30;:::i;:::-;2800:11;2782:82;;2781:94;2762:113;;;2510:372;;;;:::o;3871:633::-;4011:10;4059:1;4041:15;:19;4033:50;;;;-1:-1:-1;;;4033:50:37;;;;;;;:::i;:::-;4112:23;4134:1;4113:17;4112:23;:::i;:::-;4101:6;:35;;4093:67;;;;-1:-1:-1;;;4093:67:37;;7797:2:49;4093:67:37;;;7779:21:49;7836:2;7816:18;;;7809:30;-1:-1:-1;;;7855:18:49;;;7848:49;7914:18;;4093:67:37;7595:343:49;4093:67:37;4170:15;4232:30;4247:15;1323:2;4232:30;:::i;:::-;4191:23;4213:1;4192:17;4191:23;:::i;:::-;4190:73;;4188:76;;-1:-1:-1;4302:40:37;;;4427:30;4442:15;1323:2;4427:30;:::i;:::-;4416:42;;;;4395:64;;;;;-1:-1:-1;;;;3871:633:37:o;9677:478:44:-;9784:9;9779:370;9799:13;;;:20;9795:24;;9779:370;;;9857:2;:13;;9871:1;9857:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;9857:16:44;;;9844:29;;;;9840:299;;9977:1;9950:2;:13;;9964:1;9950:16;;;;;;;;:::i;:::-;;;;;;;;;;:29;;-1:-1:-1;;;;;;9950:29:44;-1:-1:-1;;;;;9950:29:44;;;;;;;;;;10069:13;;;;:32;;10099:1;10069:29;:32::i;:::-;10053:13;;;:48;1237:174:39;1119:292;;:::o;9840:299:44:-;9821:3;;;;:::i;:::-;;;;9779:370;;7815:389;8006:6;8026:17;;:::i;:::-;8057:25;;:::i;:::-;8112:40;8125:6;8133;8141:10;8112:40;;;;;;;;:::i;6813:772:37:-;6934:10;6986:1;6968:15;:19;6960:50;;;;-1:-1:-1;;;6960:50:37;;;;;;;:::i;:::-;7064:11;7020:23;7164:21;:15;7182:3;7164:21;:::i;:::-;7158:1;:28;;7156:31;7233:26;;;;7156:31;-1:-1:-1;7342:21:37;:15;7360:3;7342:21;:::i;:::-;7336:1;:28;;7334:31;7415:26;;;;7334:31;-1:-1:-1;7512:66:37;7415:26;7559:15;7576:1;7512:12;:66::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;378:127:49:-;439:10;434:3;430:20;427:1;420:31;470:4;467:1;460:15;494:4;491:1;484:15;510:207;588:1;581:5;578:12;568:143;;633:10;628:3;624:20;621:1;614:31;668:4;665:1;658:15;696:4;693:1;686:15;722:229;864:2;849:18;;876:35;904:6;876:35;:::i;:::-;920:25;;;722:229;:::o;956:180::-;1015:6;1068:2;1056:9;1047:7;1043:23;1039:32;1036:52;;;1084:1;1081;1074:12;1036:52;-1:-1:-1;1107:23:49;;956:180;-1:-1:-1;956:180:49:o;1497:127::-;1558:10;1553:3;1549:20;1546:1;1539:31;1589:4;1586:1;1579:15;1613:4;1610:1;1603:15;1629:128;1669:3;1700:1;1696:6;1693:1;1690:13;1687:39;;;1706:18;;:::i;:::-;-1:-1:-1;1742:9:49;;1629:128::o;4535:127::-;4596:10;4591:3;4587:20;4584:1;4577:31;4627:4;4624:1;4617:15;4651:4;4648:1;4641:15;4667:135;4706:3;4727:17;;;4724:43;;4747:18;;:::i;:::-;-1:-1:-1;4794:1:49;4783:13;;4667:135::o;5512:1032::-;5819:3;5804:19;;5832:35;5860:6;5832:35;:::i;:::-;5894:6;5883:9;5876:25;5920:2;5957;5946:9;5942:18;6002:6;6026:1;6036:167;6050:4;6047:1;6044:11;6036:167;;;6109:13;;6097:26;;6143:12;;;;6178:15;;;;6070:1;6063:9;6036:167;;;6040:3;;;6240:2;6229:9;6225:18;6291:6;6317:1;6327:211;6343:4;6338:3;6335:13;6327:211;;;6412:15;;-1:-1:-1;;;;;6408:41:49;6394:56;;6472:14;;;;6511:17;;;;6446:1;6358:11;6327:211;;;6331:3;;;;5512:1032;;;;;;:::o;6549:342::-;6751:2;6733:21;;;6790:2;6770:18;;;6763:30;-1:-1:-1;;;6824:2:49;6809:18;;6802:48;6882:2;6867:18;;6549:342::o;7292:125::-;7332:4;7360:1;7357;7354:8;7351:34;;;7365:18;;:::i;:::-;-1:-1:-1;7402:9:49;;7292:125::o;7422:168::-;7462:7;7528:1;7524;7520:6;7516:14;7513:1;7510:21;7505:1;7498:9;7491:17;7487:45;7484:71;;;7535:18;;:::i;:::-;-1:-1:-1;7575:9:49;;7422:168::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1166400",
        "executionCost": "1214",
        "totalCost": "1167614"
      },
      "external": {
        "claim(bytes32)": "infinite",
        "finalizeEpoch()": "infinite",
        "getChallengePeriod()": "infinite",
        "getCurrentEpoch()": "infinite",
        "getCurrentPhase()": "infinite",
        "getInputAccumulationStart()": "infinite",
        "getInputDuration()": "infinite",
        "getSealingEpochTimestamp()": "infinite",
        "getTemplateHash()": "infinite"
      }
    },
    "methodIdentifiers": {
      "claim(bytes32)": "bd66528a",
      "finalizeEpoch()": "82ae9ef7",
      "getChallengePeriod()": "7864b77d",
      "getCurrentEpoch()": "b97dd9e2",
      "getCurrentPhase()": "a3a40ea5",
      "getInputAccumulationStart()": "ddf7bcf0",
      "getInputDuration()": "e17ba012",
      "getSealingEpochTimestamp()": "54ee1da5",
      "getTemplateHash()": "61b12c66"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"epochHash\",\"type\":\"bytes32\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"epochHash\",\"type\":\"bytes32\"}],\"name\":\"FinalizeEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Phase\",\"name\":\"newPhase\",\"type\":\"uint8\"}],\"name\":\"PhaseChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"winningClaim\",\"type\":\"bytes32\"}],\"name\":\"ResolveDispute\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_epochHash\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPhase\",\"outputs\":[{\"internalType\":\"enum Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInputAccumulationStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInputDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSealingEpochTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemplateHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(bytes32)\":{\"details\":\"ValidatorManager makes sure that msg.sender is allowed      and that claim != bytes32(0) TODO: add signatures for aggregated claims\",\"params\":{\"_epochHash\":\"hash of epoch\"}},\"finalizeEpoch()\":{\"details\":\"can only be called if challenge period is over\"},\"getCurrentEpoch()\":{\"details\":\"if phase is input accumulation, then the epoch number is length      of finalized epochs array, else there are two non finalized epochs,      one awaiting consensus/dispute and another accumulating input\",\"returns\":{\"_0\":\"index of current epoch\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Claim(uint256,address,bytes32)\":{\"notice\":\"claim submitted\"},\"FinalizeEpoch(uint256,bytes32)\":{\"notice\":\"epoch finalized\"},\"PhaseChange(uint8)\":{\"notice\":\"phase change\"},\"ResolveDispute(address,address,bytes32)\":{\"notice\":\"dispute resolved\"}},\"kind\":\"user\",\"methods\":{\"claim(bytes32)\":{\"notice\":\"claim the result of current epoch\"},\"finalizeEpoch()\":{\"notice\":\"finalize epoch after timeout\"},\"getChallengePeriod()\":{\"notice\":\"returns the challenge period in seconds\"},\"getCurrentEpoch()\":{\"notice\":\"returns index of current (accumulating) epoch\"},\"getCurrentPhase()\":{\"notice\":\"returns the current phase\"},\"getInputAccumulationStart()\":{\"notice\":\"returns the input accumulation start timestamp\"},\"getInputDuration()\":{\"notice\":\"returns the input duration in seconds\"},\"getSealingEpochTimestamp()\":{\"notice\":\"returns the sealing epoch timestamp\"},\"getTemplateHash()\":{\"notice\":\"returns the machine's template hash\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/RollupsFacet.sol\":\"RollupsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/RollupsFacet.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups facet\\npragma solidity ^0.8.0;\\n\\nimport {IRollups, Phase} from \\\"../interfaces/IRollups.sol\\\";\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\nimport {LibOutput} from \\\"../libraries/LibOutput.sol\\\";\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\n\\ncontract RollupsFacet is IRollups {\\n    ////\\n    //                             All claims agreed OR challenge period ended\\n    //                              functions: claim() or finalizeEpoch()\\n    //                        +--------------------------------------------------+\\n    //                        |                                                  |\\n    //               +--------v-----------+   new input after IPAD     +---------+----------+\\n    //               |                    +--------------------------->+                    |\\n    //   START  ---> | Input Accumulation |   firt claim after IPAD    | Awaiting Consensus |\\n    //               |                    +--------------------------->+                    |\\n    //               +-+------------------+                            +-----------------+--+\\n    //                 ^                                                                 ^  |\\n    //                 |                                              dispute resolved   |  |\\n    //                 |  dispute resolved                            before challenge   |  |\\n    //                 |  after challenge     +--------------------+  period ended       |  |\\n    //                 |  period ended        |                    +---------------------+  |\\n    //                 +----------------------+  Awaiting Dispute  |                        |\\n    //                                        |                    +<-----------------------+\\n    //                                        +--------------------+    conflicting claim\\n    ///\\n\\n    using LibRollups for LibRollups.DiamondStorage;\\n    using LibInput for LibInput.DiamondStorage;\\n    using LibOutput for LibOutput.DiamondStorage;\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n\\n    /// @notice claim the result of current epoch\\n    /// @param _epochHash hash of epoch\\n    /// @dev ValidatorManager makes sure that msg.sender is allowed\\n    ///      and that claim != bytes32(0)\\n    /// TODO: add signatures for aggregated claims\\n    function claim(bytes32 _epochHash) public override {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        Result result;\\n        bytes32[2] memory claims;\\n        address payable[2] memory claimers;\\n\\n        Phase currentPhase = Phase(rollupsDS.currentPhase_int);\\n        uint256 inputAccumulationStart = rollupsDS.inputAccumulationStart;\\n        uint256 inputDuration = rollupsDS.inputDuration;\\n\\n        if (\\n            currentPhase == Phase.InputAccumulation &&\\n            block.timestamp > inputAccumulationStart + inputDuration\\n        ) {\\n            currentPhase = Phase.AwaitingConsensus;\\n            rollupsDS.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n            emit PhaseChange(Phase.AwaitingConsensus);\\n\\n            // warns input of new epoch\\n            inputDS.onNewInputAccumulation();\\n            // update timestamp of sealing epoch proposal\\n            rollupsDS.sealingEpochTimestamp = uint32(block.timestamp);\\n        }\\n\\n        require(\\n            currentPhase == Phase.AwaitingConsensus,\\n            \\\"Phase != AwaitingConsensus\\\"\\n        );\\n        (result, claims, claimers) = validatorManagerDS.onClaim(\\n            payable(msg.sender),\\n            _epochHash\\n        );\\n\\n        // emit the claim event before processing it\\n        // so if the epoch is finalized in this claim (consensus)\\n        // the number of final epochs doesnt gets contaminated\\n        emit Claim(\\n            outputDS.getNumberOfFinalizedEpochs(),\\n            msg.sender,\\n            _epochHash\\n        );\\n\\n        rollupsDS.resolveValidatorResult(result, claims, claimers);\\n    }\\n\\n    /// @notice finalize epoch after timeout\\n    /// @dev can only be called if challenge period is over\\n    function finalizeEpoch() public override {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        Phase currentPhase = Phase(rollupsDS.currentPhase_int);\\n        require(\\n            currentPhase == Phase.AwaitingConsensus,\\n            \\\"Phase != Awaiting Consensus\\\"\\n        );\\n\\n        uint256 sealingEpochTimestamp = rollupsDS.sealingEpochTimestamp;\\n        uint256 challengePeriod = rollupsDS.challengePeriod;\\n        require(\\n            block.timestamp > sealingEpochTimestamp + challengePeriod,\\n            \\\"Challenge period not over\\\"\\n        );\\n\\n        require(\\n            validatorManagerDS.currentClaim != bytes32(0),\\n            \\\"No Claim to be finalized\\\"\\n        );\\n\\n        rollupsDS.startNewEpoch();\\n    }\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two non finalized epochs,\\n    ///      one awaiting consensus/dispute and another accumulating input\\n    function getCurrentEpoch() public view override returns (uint256) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        return rollupsDS.getCurrentEpoch();\\n    }\\n\\n    /// @notice returns the current phase\\n    function getCurrentPhase() public view returns (Phase) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        return Phase(rollupsDS.currentPhase_int);\\n    }\\n\\n    /// @notice returns the input accumulation start timestamp\\n    function getInputAccumulationStart() public view returns (uint256) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        return uint256(rollupsDS.inputAccumulationStart);\\n    }\\n\\n    /// @notice returns the sealing epoch timestamp\\n    function getSealingEpochTimestamp() public view returns (uint256) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        return uint256(rollupsDS.sealingEpochTimestamp);\\n    }\\n\\n    /// @notice returns the input duration in seconds\\n    function getInputDuration() public view returns (uint256) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        return uint256(rollupsDS.inputDuration);\\n    }\\n\\n    /// @notice returns the challenge period in seconds\\n    function getChallengePeriod() public view returns (uint256) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        return uint256(rollupsDS.challengePeriod);\\n    }\\n\\n    /// @notice returns the machine's template hash\\n    function getTemplateHash() public view returns (bytes32) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        return rollupsDS.templateHash;\\n    }\\n}\\n\",\"keccak256\":\"0xb4fa1894b1be726ec583569a1027ce9d509528fcb5e1e012228344b5a7343360\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups interface\\npragma solidity >=0.7.0;\\n\\n// InputAccumulation - Inputs being accumulated for currrent epoch\\n// AwaitingConsensus - No disagreeing claims (or no claims)\\n// AwaitingDispute - Waiting for dispute to be over\\n// inputs received during InputAccumulation will be included in the\\n// current epoch. Inputs received while WaitingClaims or ChallengesInProgress\\n// are accumulated for the next epoch\\nenum Phase {\\n    InputAccumulation,\\n    AwaitingConsensus,\\n    AwaitingDispute\\n}\\n\\ninterface IRollups {\\n    /// @notice claim the result of current epoch\\n    /// @param _epochHash hash of epoch\\n    /// @dev ValidatorManager makes sure that msg.sender is allowed\\n    ///      and that claim != bytes32(0)\\n    /// TODO: add signatures for aggregated claims\\n    function claim(bytes32 _epochHash) external;\\n\\n    /// @notice finalize epoch after timeout\\n    /// @dev can only be called if challenge period is over\\n    function finalizeEpoch() external;\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two epochs two non\\n    ///      finalized epochs, one awaiting consensus/dispute and another\\n    ///      accumulating input\\n    function getCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice claim submitted\\n    /// @param epochHash claim being submitted by this epoch\\n    /// @param claimer address of current claimer\\n    /// @param epochNumber number of the epoch being submitted\\n    event Claim(\\n        uint256 indexed epochNumber,\\n        address claimer,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n}\\n\",\"keccak256\":\"0x241c3ee8bb900067903ac836d5f3ee81eca587c7f225ad6df686478a6b27329b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager interface\\npragma solidity >=0.7.0;\\n\\n// NoConflict - No conflicting claims or consensus\\n// Consensus - All validators had equal claims\\n// Conflict - Claim is conflicting with previous one\\nenum Result {\\n    NoConflict,\\n    Consensus,\\n    Conflict\\n}\\n\\n// TODO: What is the incentive for validators to not just copy the first claim that arrived?\\ninterface IValidatorManager {\\n    /// @notice get current claim\\n    function getCurrentClaim() external view returns (bytes32);\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n}\\n\",\"keccak256\":\"0x7eccbaf15dc80cd402459e8c940b0012fd3d3b8d2882fa13798afe92a9ea3b86\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibClaimsMask.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title ClaimsMask library\\npragma solidity >=0.8.8;\\n\\n// ClaimsMask is used to keep track of the number of claims for up to 8 validators\\n// | agreement mask | consensus goal mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n// |     8 bits     |        8 bits       |      30 bits       |      30 bits       | ... |      30 bits       |\\n// In Validator Manager, #claims_validator indicates the #claims the validator has made.\\n// In Fee Manager, #claims_validator indicates the #claims the validator has redeemed. In this case,\\n//      agreement mask and consensus goal mask are not used.\\n\\ntype ClaimsMask is uint256;\\n\\nlibrary LibClaimsMask {\\n    uint256 constant claimsBitLen = 30; // #bits used for each #claims\\n\\n    /// @notice this function creates a new ClaimsMask variable with value _value\\n    /// @param  _value the value following the format of ClaimsMask\\n    function newClaimsMask(uint256 _value) internal pure returns (ClaimsMask) {\\n        return ClaimsMask.wrap(_value);\\n    }\\n\\n    /// @notice this function creates a new ClaimsMask variable with the consensus goal mask set,\\n    ///         according to the number of validators\\n    /// @param  _numValidators the number of validators\\n    function newClaimsMaskWithConsensusGoalSet(uint256 _numValidators)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_numValidators <= 8, \\\"up to 8 validators\\\");\\n        uint256 consensusMask = (1 << _numValidators) - 1;\\n        return ClaimsMask.wrap(consensusMask << 240); // 256 - 8 - 8 = 240\\n    }\\n\\n    /// @notice this function returns the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    ///     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager\\n    function getNumClaims(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 bitmask = (1 << claimsBitLen) - 1;\\n        return\\n            (ClaimsMask.unwrap(_claimsMask) >>\\n                (claimsBitLen * _validatorIndex)) & bitmask;\\n    }\\n\\n    /// @notice this function increases the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the increase amount\\n    function increaseNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) internal pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 currentNum = getNumClaims(_claimsMask, _validatorIndex);\\n        uint256 newNum = currentNum + _value; // overflows checked by default with sol0.8\\n        return setNumClaims(_claimsMask, _validatorIndex, newNum);\\n    }\\n\\n    /// @notice this function sets the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the set value\\n    function setNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) internal pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        require(_value <= ((1 << claimsBitLen) - 1), \\\"ClaimsMask Overflow\\\");\\n        uint256 bitmask = ~(((1 << claimsBitLen) - 1) <<\\n            (claimsBitLen * _validatorIndex));\\n        uint256 clearedClaimsMask = ClaimsMask.unwrap(_claimsMask) & bitmask;\\n        _claimsMask = ClaimsMask.wrap(\\n            clearedClaimsMask | (_value << (claimsBitLen * _validatorIndex))\\n        );\\n        return _claimsMask;\\n    }\\n\\n    /// @notice get consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function clearAgreementMask(ClaimsMask _claimsMask)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        uint256 clearedMask = ClaimsMask.unwrap(_claimsMask) & ((1 << 248) - 1); // 256 - 8 = 248\\n        return ClaimsMask.wrap(clearedMask);\\n    }\\n\\n    /// @notice get the entire agreement mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getAgreementMask(ClaimsMask _claimsMask)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (ClaimsMask.unwrap(_claimsMask) >> 248); // get the first 8 bits\\n    }\\n\\n    /// @notice check if a validator has already claimed\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function alreadyClaimed(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // get the first 8 bits. Then & operation on the validator's bit to see if it's set\\n        return\\n            (((ClaimsMask.unwrap(_claimsMask) >> 248) >> _validatorIndex) &\\n                1) != 0;\\n    }\\n\\n    /// @notice set agreement mask for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function setAgreementMask(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 setMask = (ClaimsMask.unwrap(_claimsMask) |\\n            (1 << (248 + _validatorIndex))); // 256 - 8 = 248\\n        return ClaimsMask.wrap(setMask);\\n    }\\n\\n    /// @notice get the entire consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getConsensusGoalMask(ClaimsMask _claimsMask)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return ((ClaimsMask.unwrap(_claimsMask) << 8) >> 248); // get the second 8 bits\\n    }\\n\\n    /// @notice remove validator from the ClaimsMask\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function removeValidator(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 claimsMaskValue = ClaimsMask.unwrap(_claimsMask);\\n        // remove validator from agreement bitmask\\n        uint256 zeroMask = ~(1 << (_validatorIndex + 248)); // 256 - 8 = 248\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from consensus goal mask\\n        zeroMask = ~(1 << (_validatorIndex + 240)); // 256 - 8 - 8 = 240\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from #claims\\n        return\\n            setNumClaims(ClaimsMask.wrap(claimsMaskValue), _validatorIndex, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x80b7355ef8d176c87e9c446542c4a7de8ee208601639af8acc23f6854f8f0080\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibDisputeManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Dispute Manager library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibDisputeManager {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    /// @notice initiates a dispute betweent two players\\n    /// @param claims conflicting claims\\n    /// @param claimers addresses of senders of conflicting claim\\n    /// @dev this is a mock implementation that just gives the win\\n    ///      to the address in the first posititon of claimers array\\n    function initiateDispute(\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        rollupsDS.resolveDispute(claimers[0], claimers[1], claims[0]);\\n    }\\n}\\n\",\"keccak256\":\"0x7d3fdb94a17c7f61ef8f6431f42eaa307b30398e3c24093c0526f449752563c9\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibInput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibInput {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Input.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // always needs to keep track of two input boxes:\\n        // 1 for the input accumulation of next epoch\\n        // and 1 for the messages during current epoch. To save gas we alternate\\n        // between inputBox0 and inputBox1\\n        bytes32[] inputBox0;\\n        bytes32[] inputBox1;\\n        uint256 inputDriveSize; // size of input flashdrive\\n        uint256 currentInputBox;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice get input inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @param index index of input inside that inbox\\n    /// @return hash of input at index index\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getInput(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1[index] : ds.inputBox0[index];\\n    }\\n\\n    /// @notice get number of inputs inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @return number of inputs on that input box\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getNumberOfInputs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1.length : ds.inputBox0.length;\\n    }\\n\\n    /// @notice add input to processed by next epoch\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, msg.sender);\\n    }\\n\\n    /// @notice add internal input to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInternalInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, address(this));\\n    }\\n\\n    /// @notice add input from a specific sender to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @param sender input sender address\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInputFromSender(\\n        DiamondStorage storage ds,\\n        bytes memory input,\\n        address sender\\n    ) internal returns (bytes32) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n\\n        require(input.length <= ds.inputDriveSize, \\\"input len: [0,driveSize]\\\");\\n\\n        // notifyInput returns true if that input\\n        // belongs to a new epoch\\n        if (rollupsDS.notifyInput()) {\\n            swapInputBox(ds);\\n        }\\n\\n        // points to correct inputBox\\n        bytes32[] storage inputBox = ds.currentInputBox == 0\\n            ? ds.inputBox0\\n            : ds.inputBox1;\\n\\n        // get current epoch index\\n        uint256 currentEpoch = rollupsDS.getCurrentEpoch();\\n\\n        // keccak 64 bytes into 32 bytes\\n        bytes32 keccakMetadata = keccak256(\\n            abi.encode(\\n                sender,\\n                block.number,\\n                block.timestamp,\\n                currentEpoch, // epoch index\\n                inputBox.length // input index\\n            )\\n        );\\n\\n        bytes32 keccakInput = keccak256(input);\\n\\n        bytes32 inputHash = keccak256(abi.encode(keccakMetadata, keccakInput));\\n\\n        // add input to correct inbox\\n        inputBox.push(inputHash);\\n\\n        emit InputAdded(\\n            currentEpoch,\\n            inputBox.length - 1,\\n            sender,\\n            block.timestamp,\\n            input\\n        );\\n\\n        return inputHash;\\n    }\\n\\n    /// @notice called when a new input accumulation phase begins\\n    ///         swap inbox to receive inputs for upcoming epoch\\n    /// @param ds diamond storage pointer\\n    function onNewInputAccumulation(DiamondStorage storage ds) internal {\\n        swapInputBox(ds);\\n    }\\n\\n    /// @notice called when a new epoch begins, clears deprecated inputs\\n    /// @param ds diamond storage pointer\\n    function onNewEpoch(DiamondStorage storage ds) internal {\\n        // clear input box for new inputs\\n        // the current input box should be accumulating inputs\\n        // for the new epoch already. So we clear the other one.\\n        ds.currentInputBox == 0 ? delete ds.inputBox1 : delete ds.inputBox0;\\n    }\\n\\n    /// @notice changes current input box\\n    /// @param ds diamond storage pointer\\n    function swapInputBox(DiamondStorage storage ds) internal {\\n        ds.currentInputBox = (ds.currentInputBox == 0) ? 1 : 0;\\n    }\\n\\n    /// @notice input added\\n    /// @param epochNumber which epoch this input belongs to\\n    /// @param inputIndex index of the input just added\\n    /// @param sender msg.sender\\n    /// @param timestamp block.timestamp\\n    /// @param input input data\\n    event InputAdded(\\n        uint256 indexed epochNumber,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        uint256 timestamp,\\n        bytes input\\n    );\\n}\\n\",\"keccak256\":\"0x9fec6d72c872e8f7f3adc79fa2bc5de8396d6ae97e2e23817e780e7d7a6cfaea\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibOutput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Output library\\npragma solidity ^0.8.0;\\n\\nlibrary LibOutput {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Output.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        mapping(uint256 => uint256) voucherBitmask;\\n        bytes32[] epochHashes;\\n        bool lock; //reentrancy lock\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice to be called when an epoch is finalized\\n    /// @param ds diamond storage pointer\\n    /// @param epochHash hash of finalized epoch\\n    /// @dev an epoch being finalized means that its vouchers can be called\\n    function onNewEpoch(DiamondStorage storage ds, bytes32 epochHash) internal {\\n        ds.epochHashes.push(epochHash);\\n    }\\n\\n    /// @notice get number of finalized epochs\\n    /// @param ds diamond storage pointer\\n    function getNumberOfFinalizedEpochs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.epochHashes.length;\\n    }\\n}\\n\",\"keccak256\":\"0xd0f88e13210013e9d5bde03399bb76304d6ab4e1f06d01c7e3525adc87a2d65e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups library\\npragma solidity ^0.8.0;\\n\\nimport {Phase} from \\\"../interfaces/IRollups.sol\\\";\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\nimport {LibOutput} from \\\"../libraries/LibOutput.sol\\\";\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibDisputeManager} from \\\"../libraries/LibDisputeManager.sol\\\";\\n\\nlibrary LibRollups {\\n    using LibInput for LibInput.DiamondStorage;\\n    using LibOutput for LibOutput.DiamondStorage;\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Rollups.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 templateHash; // state hash of the cartesi machine at t0\\n        uint32 inputDuration; // duration of input accumulation phase in seconds\\n        uint32 challengePeriod; // duration of challenge period in seconds\\n        uint32 inputAccumulationStart; // timestamp when current input accumulation phase started\\n        uint32 sealingEpochTimestamp; // timestamp on when a proposed epoch (claim) becomes challengeable\\n        uint32 currentPhase_int; // current phase in integer form\\n    }\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when new input arrives, manages the phase changes\\n    /// @param ds diamond storage pointer\\n    /// @dev can only be called by input contract\\n    function notifyInput(DiamondStorage storage ds) internal returns (bool) {\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n        uint256 inputAccumulationStart = ds.inputAccumulationStart;\\n        uint256 inputDuration = ds.inputDuration;\\n\\n        if (\\n            currentPhase == Phase.InputAccumulation &&\\n            block.timestamp > inputAccumulationStart + inputDuration\\n        ) {\\n            ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n            emit PhaseChange(Phase.AwaitingConsensus);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice called when a dispute is resolved by the dispute manager\\n    /// @param ds diamond storage pointer\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    function resolveDispute(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    ) internal {\\n        Result result;\\n        bytes32[2] memory claims;\\n        address payable[2] memory claimers;\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        (result, claims, claimers) = validatorManagerDS.onDisputeEnd(\\n            winner,\\n            loser,\\n            winningClaim\\n        );\\n\\n        // restart challenge period\\n        ds.sealingEpochTimestamp = uint32(block.timestamp);\\n\\n        emit ResolveDispute(winner, loser, winningClaim);\\n        resolveValidatorResult(ds, result, claims, claimers);\\n    }\\n\\n    /// @notice resolve results returned by validator manager\\n    /// @param ds diamond storage pointer\\n    /// @param result result from claim or dispute operation\\n    /// @param claims array of claims in case of new conflict\\n    /// @param claimers array of claimers in case of new conflict\\n    function resolveValidatorResult(\\n        DiamondStorage storage ds,\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        if (result == Result.NoConflict) {\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingConsensus) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n                emit PhaseChange(Phase.AwaitingConsensus);\\n            }\\n        } else if (result == Result.Consensus) {\\n            startNewEpoch(ds);\\n        } else {\\n            // for the case when result == Result.Conflict\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingDispute) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingDispute);\\n                emit PhaseChange(Phase.AwaitingDispute);\\n            }\\n            LibDisputeManager.initiateDispute(claims, claimers);\\n        }\\n    }\\n\\n    /// @notice starts new epoch\\n    /// @param ds diamond storage pointer\\n    function startNewEpoch(DiamondStorage storage ds) internal {\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        // reset input accumulation start and deactivate challenge period start\\n        ds.currentPhase_int = uint32(Phase.InputAccumulation);\\n        emit PhaseChange(Phase.InputAccumulation);\\n        ds.inputAccumulationStart = uint32(block.timestamp);\\n        ds.sealingEpochTimestamp = type(uint32).max;\\n\\n        bytes32 finalClaim = validatorManagerDS.onNewEpoch();\\n\\n        // emit event before finalized epoch is added to the Output storage\\n        emit FinalizeEpoch(outputDS.getNumberOfFinalizedEpochs(), finalClaim);\\n\\n        outputDS.onNewEpoch(finalClaim);\\n        inputDS.onNewEpoch();\\n    }\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @param ds diamond storage pointer\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two non finalized epochs,\\n    ///      one awaiting consensus/dispute and another accumulating input\\n    function getCurrentEpoch(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n\\n        uint256 finalizedEpochs = outputDS.getNumberOfFinalizedEpochs();\\n\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n\\n        return\\n            currentPhase == Phase.InputAccumulation\\n                ? finalizedEpochs\\n                : finalizedEpochs + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x04f72881c6032af40537ac14ff3720df2899a5746a42abd841b2292d66db11ca\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager library\\npragma solidity ^0.8.0;\\n\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\n\\nlibrary LibValidatorManager {\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"ValidatorManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 currentClaim; // current claim - first claim of this epoch\\n        address payable[] validators; // up to 8 validators\\n        uint256 maxNumValidators; // the maximum number of validators, set in the constructor\\n        // A bit set used for up to 8 validators.\\n        // The first 8 bits are used to indicate whom supports the current claim\\n        // The second 8 bits are used to indicate those should have claimed in order to reach consensus\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // | agreement mask | consensus mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     8 bits     |     8 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask claimsMask;\\n    }\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when a dispute ends in rollups\\n    /// @param ds diamond storage pointer\\n    /// @param winner address of dispute winner\\n    /// @param loser address of dispute loser\\n    /// @param winningClaim the winnning claim\\n    /// @return result of dispute being finished\\n    function onDisputeEnd(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        removeValidator(ds, loser);\\n\\n        if (winningClaim == ds.currentClaim) {\\n            // first claim stood, dont need to update the bitmask\\n            return\\n                isConsensus(ds)\\n                    ? emitDisputeEndedAndReturn(\\n                        Result.Consensus,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    )\\n                    : emitDisputeEndedAndReturn(\\n                        Result.NoConflict,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    );\\n        }\\n\\n        // if first claim lost, and other validators have agreed with it\\n        // there is a new dispute to be played\\n        if (ds.claimsMask.getAgreementMask() != 0) {\\n            return\\n                emitDisputeEndedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, winningClaim],\\n                    [getClaimerOfCurrentClaim(ds), winner]\\n                );\\n        }\\n        // else there are no valdiators that agree with losing claim\\n        // we can update current claim and check for consensus in case\\n        // the winner is the only validator left\\n        ds.currentClaim = winningClaim;\\n        updateClaimAgreementMask(ds, winner);\\n        return\\n            isConsensus(ds)\\n                ? emitDisputeEndedAndReturn(\\n                    Result.Consensus,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                )\\n                : emitDisputeEndedAndReturn(\\n                    Result.NoConflict,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                );\\n    }\\n\\n    /// @notice called when a new epoch starts\\n    /// @param ds diamond storage pointer\\n    /// @return current claim\\n    function onNewEpoch(DiamondStorage storage ds) internal returns (bytes32) {\\n        // reward validators who has made the correct claim by increasing their #claims\\n        claimFinalizedIncreaseCounts(ds);\\n\\n        bytes32 tmpClaim = ds.currentClaim;\\n\\n        // clear current claim\\n        ds.currentClaim = bytes32(0);\\n        // clear validator agreement bit mask\\n        ds.claimsMask = ds.claimsMask.clearAgreementMask();\\n\\n        emit NewEpoch(tmpClaim);\\n        return tmpClaim;\\n    }\\n\\n    /// @notice called when a claim is received by rollups\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of sender of that claim\\n    /// @param claim claim received by rollups\\n    /// @return result of claim, Consensus | NoConflict | Conflict\\n    /// @return [currentClaim, conflicting claim] if there is Conflict\\n    ///         [currentClaim, bytes32(0)] if there is Consensus or NoConflcit\\n    /// @return [claimer1, claimer2] if there is  Conflcit\\n    ///         [claimer1, address(0)] if there is Consensus or NoConflcit\\n    function onClaim(\\n        DiamondStorage storage ds,\\n        address payable sender,\\n        bytes32 claim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        require(claim != bytes32(0), \\\"empty claim\\\");\\n        require(isValidator(ds, sender), \\\"sender not allowed\\\");\\n\\n        // require the validator hasn't claimed in the same epoch before\\n        uint256 index = getValidatorIndex(ds, sender);\\n        require(\\n            !ds.claimsMask.alreadyClaimed(index),\\n            \\\"sender had claimed in this epoch before\\\"\\n        );\\n\\n        // cant return because a single claim might mean consensus\\n        if (ds.currentClaim == bytes32(0)) {\\n            ds.currentClaim = claim;\\n        }\\n\\n        if (claim != ds.currentClaim) {\\n            return\\n                emitClaimReceivedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, claim],\\n                    [getClaimerOfCurrentClaim(ds), sender]\\n                );\\n        }\\n        updateClaimAgreementMask(ds, sender);\\n\\n        return\\n            isConsensus(ds)\\n                ? emitClaimReceivedAndReturn(\\n                    Result.Consensus,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                )\\n                : emitClaimReceivedAndReturn(\\n                    Result.NoConflict,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                );\\n    }\\n\\n    /// @notice emits dispute ended event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitDisputeEndedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit DisputeEnded(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice emits claim received event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitClaimReceivedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit ClaimReceived(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice only call this function when a claim has been finalized\\n    ///         Either a consensus has been reached or challenge period has past\\n    /// @param ds pointer to diamond storage\\n    function claimFinalizedIncreaseCounts(DiamondStorage storage ds) internal {\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            // if a validator agrees with the current claim\\n            if ((agreementMask & (1 << i)) != 0) {\\n                // increase #claims by 1\\n                ds.claimsMask = ds.claimsMask.increaseNumClaims(i, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice removes a validator\\n    /// @param ds diamond storage pointer\\n    /// @param validator address of validator to be removed\\n    function removeValidator(DiamondStorage storage ds, address validator)\\n        internal\\n    {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (validator == ds.validators[i]) {\\n                // put address(0) in validators position\\n                ds.validators[i] = payable(0);\\n                // remove the validator from claimsMask\\n                ds.claimsMask = ds.claimsMask.removeValidator(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice check if consensus has been reached\\n    /// @param ds pointer to diamond storage\\n    function isConsensus(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        ClaimsMask claimsMask = ds.claimsMask;\\n        return\\n            claimsMask.getAgreementMask() == claimsMask.getConsensusGoalMask();\\n    }\\n\\n    /// @notice get one of the validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @return validator that agreed with current claim\\n    function getClaimerOfCurrentClaim(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (address payable)\\n    {\\n        // TODO: we are always getting the first validator\\n        // on the array that agrees with the current claim to enter a dispute\\n        // should this be random?\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (agreementMask & (1 << i) != 0) {\\n                return ds.validators[i];\\n            }\\n        }\\n        revert(\\\"Agreeing validator not found\\\");\\n    }\\n\\n    /// @notice updates mask of validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of validator that will be included in mask\\n    function updateClaimAgreementMask(\\n        DiamondStorage storage ds,\\n        address payable sender\\n    ) internal {\\n        uint256 validatorIndex = getValidatorIndex(ds, sender);\\n        ds.claimsMask = ds.claimsMask.setAgreementMask(validatorIndex);\\n    }\\n\\n    /// @notice check if the sender is a validator\\n    /// @param ds pointer to diamond storage\\n    /// @param sender sender address\\n    function isValidator(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice find the validator and return the index or revert\\n    /// @param ds pointer to diamond storage\\n    /// @param sender validator address\\n    /// @return validator index or revert\\n    function getValidatorIndex(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return i;\\n        }\\n        revert(\\\"validator not found\\\");\\n    }\\n\\n    /// @notice get number of claims the sender has made\\n    /// @param ds pointer to diamond storage\\n    /// @param _sender validator address\\n    /// @return #claims\\n    function getNumberOfClaimsByAddress(\\n        DiamondStorage storage ds,\\n        address payable _sender\\n    ) internal view returns (uint256) {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (_sender == ds.validators[i]) {\\n                return getNumberOfClaimsByIndex(ds, i);\\n            }\\n        }\\n        // if validator not found\\n        return 0;\\n    }\\n\\n    /// @notice get number of claims by the index in the validator set\\n    /// @param ds pointer to diamond storage\\n    /// @param index the index in validator set\\n    /// @return #claims\\n    function getNumberOfClaimsByIndex(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.claimsMask.getNumClaims(index);\\n    }\\n\\n    /// @notice get the maximum number of validators defined in validator manager\\n    /// @param ds pointer to diamond storage\\n    /// @return the maximum number of validators\\n    function getMaxNumValidators(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.maxNumValidators;\\n    }\\n}\\n\",\"keccak256\":\"0xa25792dbbddcb4f5ec3ef71e463e2df9153a90fecfa4b2cd81e03a6a06a45e83\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "events": {
      "Claim(uint256,address,bytes32)": {
        "notice": "claim submitted"
      },
      "FinalizeEpoch(uint256,bytes32)": {
        "notice": "epoch finalized"
      },
      "PhaseChange(uint8)": {
        "notice": "phase change"
      },
      "ResolveDispute(address,address,bytes32)": {
        "notice": "dispute resolved"
      }
    },
    "kind": "user",
    "methods": {
      "claim(bytes32)": {
        "notice": "claim the result of current epoch"
      },
      "finalizeEpoch()": {
        "notice": "finalize epoch after timeout"
      },
      "getChallengePeriod()": {
        "notice": "returns the challenge period in seconds"
      },
      "getCurrentEpoch()": {
        "notice": "returns index of current (accumulating) epoch"
      },
      "getCurrentPhase()": {
        "notice": "returns the current phase"
      },
      "getInputAccumulationStart()": {
        "notice": "returns the input accumulation start timestamp"
      },
      "getInputDuration()": {
        "notice": "returns the input duration in seconds"
      },
      "getSealingEpochTimestamp()": {
        "notice": "returns the sealing epoch timestamp"
      },
      "getTemplateHash()": {
        "notice": "returns the machine's template hash"
      }
    },
    "version": 1
  }
}