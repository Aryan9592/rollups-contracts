{
  "contractName": "DebugFacet",
  "sourceName": "contracts/facets/DebugFacet.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Result",
          "name": "result",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32[2]",
          "name": "claims",
          "type": "bytes32[2]"
        },
        {
          "indexed": false,
          "internalType": "address payable[2]",
          "name": "validators",
          "type": "address[2]"
        }
      ],
      "name": "ClaimReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Result",
          "name": "result",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32[2]",
          "name": "claims",
          "type": "bytes32[2]"
        },
        {
          "indexed": false,
          "internalType": "address payable[2]",
          "name": "validators",
          "type": "address[2]"
        }
      ],
      "name": "DisputeEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "claim",
          "type": "bytes32"
        }
      ],
      "name": "NewEpoch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "_erc20Withdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "_erc721Withdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "_etherWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getFeePerClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getInputDriveSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getValidators",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_claim",
          "type": "bytes32"
        }
      ],
      "name": "_onClaim",
      "outputs": [
        {
          "internalType": "enum Result",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32[2]",
          "name": "",
          "type": "bytes32[2]"
        },
        {
          "internalType": "address payable[2]",
          "name": "",
          "type": "address[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_winner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_loser",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_winningClaim",
          "type": "bytes32"
        }
      ],
      "name": "_onDisputeEnd",
      "outputs": [
        {
          "internalType": "enum Result",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32[2]",
          "name": "",
          "type": "bytes32[2]"
        },
        {
          "internalType": "address payable[2]",
          "name": "",
          "type": "address[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochHash",
          "type": "bytes32"
        }
      ],
      "name": "_onNewEpochOutput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_onNewEpochVM",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Phase",
          "name": "_phase",
          "type": "uint8"
        }
      ],
      "name": "_setCurrentPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "_setNumClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50611536806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806398f69b161161007157806398f69b16146101895780639d45ceca146101eb578063bcb3571a146101f3578063d446e01014610206578063da048e3614610219578063f8a7ea5d1461022c57600080fd5b80631487d4a9146100b957806315afd588146100d75780633672682c146101085780633ea30fed1461012a57806357414ee81461014d57806383089f4114610162575b600080fd5b6100c161023f565b6040516100ce91906111f7565b60405180910390f35b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc74545b6040519081526020016100ce565b61011b610116366004611260565b6102b2565b6040516100ce939291906112a0565b61013d610138366004611328565b6102ec565b60405190151581526020016100ce565b61016061015b36600461139a565b610363565b005b7f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a688224991301546100fa565b6101606101973660046113c2565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea56780546001810182556000919091527f5a37c7635ca526c8f76c52ec540210850576205b63dbb3612d47df2b54d6918a0155565b6100fa6103bc565b61013d610201366004611328565b6103dc565b61013d610214366004611328565b610406565b6101606102273660046113db565b610430565b61011b61023a3660046113fd565b6104d6565b606060006000805160206114e1833981519152600181018054604080516020808402820181019092528281529394508301828280156102a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610289575b505050505091505090565b60006102bc6111d9565b6102c46111d9565b6000805160206114e18339815191526102de818787610514565b935093509350509250925092565b6040516351584bd760e11b81526000903090819063a2b097ae906103169087908790600401611439565b6020604051808303816000875af1158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190611468565b9150505b92915050565b7fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c8160028111156103965761039661128a565b8160010160106101000a81548163ffffffff021916908363ffffffff1602179055505050565b60006000805160206114e18339815191526103d68161079e565b91505090565b604051631d255ae560e21b8152600090309081906374956b94906103169087908790600401611439565b6040516315e55ce560e01b8152600090309081906315e55ce5906103169087908790600401611439565b60006000805160206114e183398151915260038101546040516301bcff6560e71b81526004810191909152602481018590526044810184905290915073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063de7fb28090606401602060405180830381865af41580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc919061148a565b6003909101555050565b60006104e06111d9565b6104e86111d9565b6000805160206114e183398151915261050381888888610867565b935093509350505b93509350939050565b600061051e6111d9565b6105266111d9565b836105665760405162461bcd60e51b815260206004820152600b60248201526a656d70747920636c61696d60a81b60448201526064015b60405180910390fd5b6105708686610a8c565b6105b15760405162461bcd60e51b81526020600482015260126024820152711cd95b99195c881b9bdd08185b1b1bddd95960721b604482015260640161055d565b60006105bd8787610b39565b600388015460405163cb9f881360e01b815291925073__$cf2fb72623b6ba225c3cfc459aec70b905$__9163cb9f881391610605918590600401918252602082015260400190565b602060405180830381865af4158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190611468565b156106a35760405162461bcd60e51b815260206004820152602760248201527f73656e6465722068616420636c61696d656420696e20746869732065706f6368604482015266206265666f726560c81b606482015260840161055d565b86546106ad578487555b8654851461070d57610701600260405180604001604052808a6000015481526020018881525060405180604001604052806106e78c610c18565b6001600160a01b0390811682528b16602090910152610d3f565b9350935093505061050b565b6107178787610d98565b61072087610e3a565b610764576040805180820182528681526000602080830182905283518085019094526001600160a01b038a168452830181905261075f92909190610d3f565b610503565b6040805180820182528681526000602080830182905283518085019094526001600160a01b038a1684528301526105039160019190610d3f565b60006107a982610f32565b81546000835560038301546040516367bdc85360e11b8152600481019190915273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063cf7b90a690602401602060405180830381865af4158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061148a565b60038401556040518181527fddc860800a99149017c480ec51523bf4143b7215e78956ae5c31e5c568f5383a9060200160405180910390a192915050565b60006108716111d9565b6108796111d9565b6108838786611074565b8654840361091d5761089487610e3a565b6108d8576040805180820182528581526000602080830182905283518085019094526001600160a01b038a16845283018190526108d392909190611194565b610912565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301526109129160019190611194565b925092509250610a82565b6003870154604051623ea57d60ea1b8152600481019190915273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063fa95f40090602401602060405180830381865af4158015610972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610996919061148a565b156109e757610912600260405180604001604052808a6000015481526020018781525060405180604001604052806109cd8c610c18565b6001600160a01b0390811682528b16602090910152611194565b8387556109f48787610d98565b6109fd87610e3a565b610a41576040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301819052610a3c92909190611194565b610a7b565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a168452830152610a7b9160019190611194565b9250925092505b9450945094915050565b60006001600160a01b038216610ad05760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b604482015260640161055d565b60005b6001840154811015610b2f57836001018181548110610af457610af46114a3565b6000918252602090912001546001600160a01b0390811690841603610b1d57600191505061035d565b80610b27816114b9565b915050610ad3565b5060009392505050565b60006001600160a01b038216610b7d5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b604482015260640161055d565b60005b6001840154811015610bd957836001018181548110610ba157610ba16114a3565b6000918252602090912001546001600160a01b0390811690841603610bc757905061035d565b80610bd1816114b9565b915050610b80565b5060405162461bcd60e51b81526020600482015260136024820152721d985b1a59185d1bdc881b9bdd08199bdd5b99606a1b604482015260640161055d565b6003810154604051623ea57d60ea1b81526004810191909152600090819073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063fa95f40090602401602060405180830381865af4158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c96919061148a565b905060005b6001840154811015610cf6576001811b821615610ce457836001018181548110610cc757610cc76114a3565b6000918252602090912001546001600160a01b0316949350505050565b80610cee816114b9565b915050610c9b565b5060405162461bcd60e51b815260206004820152601c60248201527f4167726565696e672076616c696461746f72206e6f7420666f756e6400000000604482015260640161055d565b6000610d496111d9565b610d516111d9565b7f495383aed97965c56495cdbadedfe9667a1b028c54d3fc4b5335895146e02b70868686604051610d84939291906112a0565b60405180910390a150939492935090919050565b6000610da48383610b39565b600384015460405163335c20d760e21b815291925073__$cf2fb72623b6ba225c3cfc459aec70b905$__9163cd70835c91610dec918590600401918252602082015260400190565b602060405180830381865af4158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d919061148a565b8360030181905550505050565b6003810154604051636a02b7ff60e11b8152600481018290526000919073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063d4056ffe90602401602060405180830381865af4158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb7919061148a565b604051623ea57d60ea1b81526004810183905273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063fa95f40090602401602060405180830381865af4158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a919061148a565b149392505050565b6003810154604051623ea57d60ea1b815260009173__$cf2fb72623b6ba225c3cfc459aec70b905$__9163fa95f40091610f729160040190815260200190565b602060405180830381865af4158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb3919061148a565b905060005b600183015481101561106f576001811b82161561105d5760038301546040516314bc74ad60e21b81526004810191909152602481018290526001604482015273__$cf2fb72623b6ba225c3cfc459aec70b905$__906352f1d2b490606401602060405180830381865af4158015611033573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611057919061148a565b60038401555b80611067816114b9565b915050610fb8565b505050565b60005b600183015481101561106f57826001018181548110611098576110986114a3565b6000918252602090912001546001600160a01b03908116908316036111825760008360010182815481106110ce576110ce6114a3565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556003830154604051632b099ae360e21b815260048101919091526024810182905273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063ac266b8c90604401602060405180830381865af4158015611154573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611178919061148a565b6003840155505050565b8061118c816114b9565b915050611077565b600061119e6111d9565b6111a66111d9565b7f09201c193a07cae1df95ae692cc698685574c942a04514c48a4c3249f38594ff868686604051610d84939291906112a0565b60405180604001604052806002906020820280368337509192915050565b6020808252825182820181905260009190848201906040850190845b818110156112385783516001600160a01b031683529284019291840191600101611213565b50909695505050505050565b80356001600160a01b038116811461125b57600080fd5b919050565b6000806040838503121561127357600080fd5b61127c83611244565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60a08101600385106112c257634e487b7160e01b600052602160045260246000fd5b84825260208083018560005b60028110156112eb578151835291830191908301906001016112ce565b505050606083018460005b600281101561131c5781516001600160a01b0316835291830191908301906001016112f6565b50505050949350505050565b6000806020838503121561133b57600080fd5b823567ffffffffffffffff8082111561135357600080fd5b818501915085601f83011261136757600080fd5b81358181111561137657600080fd5b86602082850101111561138857600080fd5b60209290920196919550909350505050565b6000602082840312156113ac57600080fd5b8135600381106113bb57600080fd5b9392505050565b6000602082840312156113d457600080fd5b5035919050565b600080604083850312156113ee57600080fd5b50508035926020909101359150565b60008060006060848603121561141257600080fd5b61141b84611244565b925061142960208501611244565b9150604084013590509250925092565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561147a57600080fd5b815180151581146113bb57600080fd5b60006020828403121561149c57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016114d957634e487b7160e01b600052601160045260246000fd5b506001019056fe8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fca2646970667358221220ae25d1b706b19196e3e4d366113729dfe7f03bc5ad9f13fb04c166be41a7e5d064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806398f69b161161007157806398f69b16146101895780639d45ceca146101eb578063bcb3571a146101f3578063d446e01014610206578063da048e3614610219578063f8a7ea5d1461022c57600080fd5b80631487d4a9146100b957806315afd588146100d75780633672682c146101085780633ea30fed1461012a57806357414ee81461014d57806383089f4114610162575b600080fd5b6100c161023f565b6040516100ce91906111f7565b60405180910390f35b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc74545b6040519081526020016100ce565b61011b610116366004611260565b6102b2565b6040516100ce939291906112a0565b61013d610138366004611328565b6102ec565b60405190151581526020016100ce565b61016061015b36600461139a565b610363565b005b7f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a688224991301546100fa565b6101606101973660046113c2565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea56780546001810182556000919091527f5a37c7635ca526c8f76c52ec540210850576205b63dbb3612d47df2b54d6918a0155565b6100fa6103bc565b61013d610201366004611328565b6103dc565b61013d610214366004611328565b610406565b6101606102273660046113db565b610430565b61011b61023a3660046113fd565b6104d6565b606060006000805160206114e1833981519152600181018054604080516020808402820181019092528281529394508301828280156102a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610289575b505050505091505090565b60006102bc6111d9565b6102c46111d9565b6000805160206114e18339815191526102de818787610514565b935093509350509250925092565b6040516351584bd760e11b81526000903090819063a2b097ae906103169087908790600401611439565b6020604051808303816000875af1158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190611468565b9150505b92915050565b7fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c8160028111156103965761039661128a565b8160010160106101000a81548163ffffffff021916908363ffffffff1602179055505050565b60006000805160206114e18339815191526103d68161079e565b91505090565b604051631d255ae560e21b8152600090309081906374956b94906103169087908790600401611439565b6040516315e55ce560e01b8152600090309081906315e55ce5906103169087908790600401611439565b60006000805160206114e183398151915260038101546040516301bcff6560e71b81526004810191909152602481018590526044810184905290915073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063de7fb28090606401602060405180830381865af41580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc919061148a565b6003909101555050565b60006104e06111d9565b6104e86111d9565b6000805160206114e183398151915261050381888888610867565b935093509350505b93509350939050565b600061051e6111d9565b6105266111d9565b836105665760405162461bcd60e51b815260206004820152600b60248201526a656d70747920636c61696d60a81b60448201526064015b60405180910390fd5b6105708686610a8c565b6105b15760405162461bcd60e51b81526020600482015260126024820152711cd95b99195c881b9bdd08185b1b1bddd95960721b604482015260640161055d565b60006105bd8787610b39565b600388015460405163cb9f881360e01b815291925073__$cf2fb72623b6ba225c3cfc459aec70b905$__9163cb9f881391610605918590600401918252602082015260400190565b602060405180830381865af4158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190611468565b156106a35760405162461bcd60e51b815260206004820152602760248201527f73656e6465722068616420636c61696d656420696e20746869732065706f6368604482015266206265666f726560c81b606482015260840161055d565b86546106ad578487555b8654851461070d57610701600260405180604001604052808a6000015481526020018881525060405180604001604052806106e78c610c18565b6001600160a01b0390811682528b16602090910152610d3f565b9350935093505061050b565b6107178787610d98565b61072087610e3a565b610764576040805180820182528681526000602080830182905283518085019094526001600160a01b038a168452830181905261075f92909190610d3f565b610503565b6040805180820182528681526000602080830182905283518085019094526001600160a01b038a1684528301526105039160019190610d3f565b60006107a982610f32565b81546000835560038301546040516367bdc85360e11b8152600481019190915273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063cf7b90a690602401602060405180830381865af4158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061148a565b60038401556040518181527fddc860800a99149017c480ec51523bf4143b7215e78956ae5c31e5c568f5383a9060200160405180910390a192915050565b60006108716111d9565b6108796111d9565b6108838786611074565b8654840361091d5761089487610e3a565b6108d8576040805180820182528581526000602080830182905283518085019094526001600160a01b038a16845283018190526108d392909190611194565b610912565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301526109129160019190611194565b925092509250610a82565b6003870154604051623ea57d60ea1b8152600481019190915273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063fa95f40090602401602060405180830381865af4158015610972573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610996919061148a565b156109e757610912600260405180604001604052808a6000015481526020018781525060405180604001604052806109cd8c610c18565b6001600160a01b0390811682528b16602090910152611194565b8387556109f48787610d98565b6109fd87610e3a565b610a41576040805180820182528581526000602080830182905283518085019094526001600160a01b038a1684528301819052610a3c92909190611194565b610a7b565b6040805180820182528581526000602080830182905283518085019094526001600160a01b038a168452830152610a7b9160019190611194565b9250925092505b9450945094915050565b60006001600160a01b038216610ad05760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b604482015260640161055d565b60005b6001840154811015610b2f57836001018181548110610af457610af46114a3565b6000918252602090912001546001600160a01b0390811690841603610b1d57600191505061035d565b80610b27816114b9565b915050610ad3565b5060009392505050565b60006001600160a01b038216610b7d5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b604482015260640161055d565b60005b6001840154811015610bd957836001018181548110610ba157610ba16114a3565b6000918252602090912001546001600160a01b0390811690841603610bc757905061035d565b80610bd1816114b9565b915050610b80565b5060405162461bcd60e51b81526020600482015260136024820152721d985b1a59185d1bdc881b9bdd08199bdd5b99606a1b604482015260640161055d565b6003810154604051623ea57d60ea1b81526004810191909152600090819073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063fa95f40090602401602060405180830381865af4158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c96919061148a565b905060005b6001840154811015610cf6576001811b821615610ce457836001018181548110610cc757610cc76114a3565b6000918252602090912001546001600160a01b0316949350505050565b80610cee816114b9565b915050610c9b565b5060405162461bcd60e51b815260206004820152601c60248201527f4167726565696e672076616c696461746f72206e6f7420666f756e6400000000604482015260640161055d565b6000610d496111d9565b610d516111d9565b7f495383aed97965c56495cdbadedfe9667a1b028c54d3fc4b5335895146e02b70868686604051610d84939291906112a0565b60405180910390a150939492935090919050565b6000610da48383610b39565b600384015460405163335c20d760e21b815291925073__$cf2fb72623b6ba225c3cfc459aec70b905$__9163cd70835c91610dec918590600401918252602082015260400190565b602060405180830381865af4158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d919061148a565b8360030181905550505050565b6003810154604051636a02b7ff60e11b8152600481018290526000919073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063d4056ffe90602401602060405180830381865af4158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb7919061148a565b604051623ea57d60ea1b81526004810183905273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063fa95f40090602401602060405180830381865af4158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a919061148a565b149392505050565b6003810154604051623ea57d60ea1b815260009173__$cf2fb72623b6ba225c3cfc459aec70b905$__9163fa95f40091610f729160040190815260200190565b602060405180830381865af4158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb3919061148a565b905060005b600183015481101561106f576001811b82161561105d5760038301546040516314bc74ad60e21b81526004810191909152602481018290526001604482015273__$cf2fb72623b6ba225c3cfc459aec70b905$__906352f1d2b490606401602060405180830381865af4158015611033573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611057919061148a565b60038401555b80611067816114b9565b915050610fb8565b505050565b60005b600183015481101561106f57826001018181548110611098576110986114a3565b6000918252602090912001546001600160a01b03908116908316036111825760008360010182815481106110ce576110ce6114a3565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556003830154604051632b099ae360e21b815260048101919091526024810182905273__$cf2fb72623b6ba225c3cfc459aec70b905$__9063ac266b8c90604401602060405180830381865af4158015611154573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611178919061148a565b6003840155505050565b8061118c816114b9565b915050611077565b600061119e6111d9565b6111a66111d9565b7f09201c193a07cae1df95ae692cc698685574c942a04514c48a4c3249f38594ff868686604051610d84939291906112a0565b60405180604001604052806002906020820280368337509192915050565b6020808252825182820181905260009190848201906040850190845b818110156112385783516001600160a01b031683529284019291840191600101611213565b50909695505050505050565b80356001600160a01b038116811461125b57600080fd5b919050565b6000806040838503121561127357600080fd5b61127c83611244565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60a08101600385106112c257634e487b7160e01b600052602160045260246000fd5b84825260208083018560005b60028110156112eb578151835291830191908301906001016112ce565b505050606083018460005b600281101561131c5781516001600160a01b0316835291830191908301906001016112f6565b50505050949350505050565b6000806020838503121561133b57600080fd5b823567ffffffffffffffff8082111561135357600080fd5b818501915085601f83011261136757600080fd5b81358181111561137657600080fd5b86602082850101111561138857600080fd5b60209290920196919550909350505050565b6000602082840312156113ac57600080fd5b8135600381106113bb57600080fd5b9392505050565b6000602082840312156113d457600080fd5b5035919050565b600080604083850312156113ee57600080fd5b50508035926020909101359150565b60008060006060848603121561141257600080fd5b61141b84611244565b925061142960208501611244565b9150604084013590509250925092565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561147a57600080fd5b815180151581146113bb57600080fd5b60006020828403121561149c57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016114d957634e487b7160e01b600052601160045260246000fd5b506001019056fe8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fca2646970667358221220ae25d1b706b19196e3e4d366113729dfe7f03bc5ad9f13fb04c166be41a7e5d064736f6c634300080d0033",
  "linkReferences": {
    "contracts/libraries/LibClaimsMask.sol": {
      "LibClaimsMask": [
        {
          "length": 20,
          "start": 1166
        },
        {
          "length": 20,
          "start": 1524
        },
        {
          "length": 20,
          "start": 2027
        },
        {
          "length": 20,
          "start": 2392
        },
        {
          "length": 20,
          "start": 3160
        },
        {
          "length": 20,
          "start": 3547
        },
        {
          "length": 20,
          "start": 3705
        },
        {
          "length": 20,
          "start": 3820
        },
        {
          "length": 20,
          "start": 3944
        },
        {
          "length": 20,
          "start": 4121
        },
        {
          "length": 20,
          "start": 4410
        }
      ]
    }
  },
  "deployedLinkReferences": {
    "contracts/libraries/LibClaimsMask.sol": {
      "LibClaimsMask": [
        {
          "length": 20,
          "start": 1134
        },
        {
          "length": 20,
          "start": 1492
        },
        {
          "length": 20,
          "start": 1995
        },
        {
          "length": 20,
          "start": 2360
        },
        {
          "length": 20,
          "start": 3128
        },
        {
          "length": 20,
          "start": 3515
        },
        {
          "length": 20,
          "start": 3673
        },
        {
          "length": 20,
          "start": 3788
        },
        {
          "length": 20,
          "start": 3912
        },
        {
          "length": 20,
          "start": 4089
        },
        {
          "length": 20,
          "start": 4378
        }
      ]
    }
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_onDisputeEnd(address,address,bytes32)": {
        "params": {
          "_loser": "address of dispute loser",
          "_winner": "address of dispute winner",
          "_winningClaim": "the winning claim"
        },
        "returns": {
          "_0": "result of dispute being finished"
        }
      },
      "_onNewEpochVM()": {
        "returns": {
          "_0": "current claim"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {
        "contracts/libraries/LibClaimsMask.sol": {
          "LibClaimsMask": [
            {
              "length": 20,
              "start": 1166
            },
            {
              "length": 20,
              "start": 1524
            },
            {
              "length": 20,
              "start": 2027
            },
            {
              "length": 20,
              "start": 2392
            },
            {
              "length": 20,
              "start": 3160
            },
            {
              "length": 20,
              "start": 3547
            },
            {
              "length": 20,
              "start": 3705
            },
            {
              "length": 20,
              "start": 3820
            },
            {
              "length": 20,
              "start": 3944
            },
            {
              "length": 20,
              "start": 4121
            },
            {
              "length": 20,
              "start": 4410
            }
          ]
        }
      },
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1536 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98F69B16 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x98F69B16 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x9D45CECA EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xBCB3571A EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0xD446E010 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xDA048E36 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xF8A7EA5D EQ PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1487D4A9 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x15AFD588 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x3672682C EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x3EA30FED EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x57414EE8 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x83089F41 EQ PUSH2 0x162 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC74 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0x11B PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x2EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x139A JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A688224991301 SLOAD PUSH2 0xFA JUMP JUMPDEST PUSH2 0x160 PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x13C2 JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x5A37C7635CA526C8F76C52EC540210850576205B63DBB3612D47DF2B54D6918A ADD SSTORE JUMP JUMPDEST PUSH2 0xFA PUSH2 0x3BC JUMP JUMPDEST PUSH2 0x13D PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x13D PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x406 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x227 CALLDATASIZE PUSH1 0x4 PUSH2 0x13DB JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH2 0x11B PUSH2 0x23A CALLDATASIZE PUSH1 0x4 PUSH2 0x13FD JUMP JUMPDEST PUSH2 0x4D6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x289 JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x2C4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x2DE DUP2 DUP8 DUP8 PUSH2 0x514 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x51584BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 DUP2 SWAP1 PUSH4 0xA2B097AE SWAP1 PUSH2 0x316 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1439 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x335 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x1468 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x396 JUMPI PUSH2 0x396 PUSH2 0x128A JUMP JUMPDEST DUP2 PUSH1 0x1 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x3D6 DUP2 PUSH2 0x79E JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D255AE5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 DUP2 SWAP1 PUSH4 0x74956B94 SWAP1 PUSH2 0x316 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1439 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x15E55CE5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 DUP2 SWAP1 PUSH4 0x15E55CE5 SWAP1 PUSH2 0x316 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1439 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x1BCFF65 PUSH1 0xE7 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0xDE7FB280 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x4A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E0 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x503 DUP2 DUP9 DUP9 DUP9 PUSH2 0x867 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51E PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x526 PUSH2 0x11D9 JUMP JUMPDEST DUP4 PUSH2 0x566 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x656D70747920636C61696D PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x570 DUP7 DUP7 PUSH2 0xA8C JUMP JUMPDEST PUSH2 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1CD95B99195C881B9BDD08185B1B1BDDD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BD DUP8 DUP8 PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x3 DUP9 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xCB9F8813 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0x0 SWAP2 PUSH4 0xCB9F8813 SWAP2 PUSH2 0x605 SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x622 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x646 SWAP2 SWAP1 PUSH2 0x1468 JUMP JUMPDEST ISZERO PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73656E6465722068616420636C61696D656420696E20746869732065706F6368 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x206265666F7265 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55D JUMP JUMPDEST DUP7 SLOAD PUSH2 0x6AD JUMPI DUP5 DUP8 SSTORE JUMPDEST DUP7 SLOAD DUP6 EQ PUSH2 0x70D JUMPI PUSH2 0x701 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x6E7 DUP13 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0xD3F JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x50B JUMP JUMPDEST PUSH2 0x717 DUP8 DUP8 PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x720 DUP8 PUSH2 0xE3A JUMP JUMPDEST PUSH2 0x764 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x75F SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x503 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0xD3F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A9 DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 DUP4 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x67BDC853 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xCF7B90A6 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x805 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x829 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xDDC860800A99149017C480EC51523BF4143B7215E78956AE5C31E5C568F5383A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x871 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x879 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x883 DUP8 DUP7 PUSH2 0x1074 JUMP JUMPDEST DUP7 SLOAD DUP5 SUB PUSH2 0x91D JUMPI PUSH2 0x894 DUP8 PUSH2 0xE3A JUMP JUMPDEST PUSH2 0x8D8 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x8D3 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x912 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xA82 JUMP JUMPDEST PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xFA95F400 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x972 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST ISZERO PUSH2 0x9E7 JUMPI PUSH2 0x912 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x9CD DUP13 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x1194 JUMP JUMPDEST DUP4 DUP8 SSTORE PUSH2 0x9F4 DUP8 DUP8 PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x9FD DUP8 PUSH2 0xE3A JUMP JUMPDEST PUSH2 0xA41 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xA3C SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0xA7B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0xA7B SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAD0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xB2F JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xAF4 JUMPI PUSH2 0xAF4 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xB1D JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH2 0xB27 DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAD3 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xBD9 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBA1 JUMPI PUSH2 0xBA1 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xBC7 JUMPI SWAP1 POP PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH2 0xBD1 DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB80 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D985B1A59185D1BDC881B9BDD08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xFA95F400 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC96 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xCF6 JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0xCE4 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xCC7 JUMPI PUSH2 0xCC7 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0xCEE DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC9B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4167726565696E672076616C696461746F72206E6F7420666F756E6400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD49 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0xD51 PUSH2 0x11D9 JUMP JUMPDEST PUSH32 0x495383AED97965C56495CDBADEDFE9667A1B028C54D3FC4B5335895146E02B70 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xD84 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP5 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA4 DUP4 DUP4 PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x335C20D7 PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0x0 SWAP2 PUSH4 0xCD70835C SWAP2 PUSH2 0xDEC SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE2D SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST DUP4 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x6A02B7FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xD4056FFE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEB7 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xFA95F400 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xF06 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF2A SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0xFA95F400 SWAP2 PUSH2 0xF72 SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xF8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB3 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x106F JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0x105D JUMPI PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x14BC74AD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x0 SWAP1 PUSH4 0x52F1D2B4 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1033 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1057 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE JUMPDEST DUP1 PUSH2 0x1067 DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xFB8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x106F JUMPI DUP3 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1098 JUMPI PUSH2 0x1098 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND SUB PUSH2 0x1182 JUMPI PUSH1 0x0 DUP4 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x10CE JUMPI PUSH2 0x10CE PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B099AE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xAC266B8C SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1154 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1178 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x118C DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1077 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119E PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11A6 PUSH2 0x11D9 JUMP JUMPDEST PUSH32 0x9201C193A07CAE1DF95AE692CC698685574C942A04514C48A4C3249F38594FF DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xD84 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1238 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1213 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x125B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127C DUP4 PUSH2 0x1244 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH1 0x3 DUP6 LT PUSH2 0x12C2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP6 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x12EB JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12CE JUMP JUMPDEST POP POP POP PUSH1 0x60 DUP4 ADD DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x131C JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12F6 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x133B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x141B DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP3 POP PUSH2 0x1429 PUSH1 0x20 DUP6 ADD PUSH2 0x1244 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x147A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x149C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x14D9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID DUP11 0xB3 PUSH32 0xEF2B2E34C4B62FF9948EE661CDCF34E209D7C20F4D1F6E83085E93B1FCA26469 PUSH17 0x667358221220AE25D1B706B19196E3E4D3 PUSH7 0x113729DFE7F03B 0xC5 0xAD SWAP16 SGT 0xFB DIV 0xC1 PUSH7 0xBE41A7E5D06473 PUSH16 0x6C634300080D00330000000000000000 ",
      "sourceMap": "1334:4153:13:-:0;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@_erc20Withdrawal_2608": {
          "entryPoint": 748,
          "id": 2608,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_erc721Withdrawal_2631": {
          "entryPoint": 1030,
          "id": 2631,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_etherWithdrawal_2564": {
          "entryPoint": 988,
          "id": 2564,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getFeePerClaim_2649": {
          "entryPoint": null,
          "id": 2649,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getInputDriveSize_2541": {
          "entryPoint": null,
          "id": 2541,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getValidators_2431": {
          "entryPoint": 575,
          "id": 2431,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_onClaim_2465": {
          "entryPoint": 690,
          "id": 2465,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "@_onDisputeEnd_2503": {
          "entryPoint": 1238,
          "id": 2503,
          "parameterSlots": 3,
          "returnSlots": 3
        },
        "@_onNewEpochOutput_2585": {
          "entryPoint": null,
          "id": 2585,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_onNewEpochVM_2523": {
          "entryPoint": 956,
          "id": 2523,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_setCurrentPhase_2412": {
          "entryPoint": 867,
          "id": 2412,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_setNumClaims_2677": {
          "entryPoint": 1072,
          "id": 2677,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@claimFinalizedIncreaseCounts_8761": {
          "entryPoint": 3890,
          "id": 8761,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@diamondStorage_7147": {
          "entryPoint": null,
          "id": 7147,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7459": {
          "entryPoint": null,
          "id": 7459,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7758": {
          "entryPoint": null,
          "id": 7758,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7869": {
          "entryPoint": null,
          "id": 7869,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_8314": {
          "entryPoint": null,
          "id": 8314,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@emitClaimReceivedAndReturn_8711": {
          "entryPoint": 3391,
          "id": 8711,
          "parameterSlots": 3,
          "returnSlots": 3
        },
        "@emitDisputeEndedAndReturn_8673": {
          "entryPoint": 4500,
          "id": 8673,
          "parameterSlots": 3,
          "returnSlots": 3
        },
        "@getClaimerOfCurrentClaim_8887": {
          "entryPoint": 3096,
          "id": 8887,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getValidatorIndex_9008": {
          "entryPoint": 2873,
          "id": 9008,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@isConsensus_8838": {
          "entryPoint": 3642,
          "id": 8838,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@isValidator_8960": {
          "entryPoint": 2700,
          "id": 8960,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@onClaim_8635": {
          "entryPoint": 1300,
          "id": 8635,
          "parameterSlots": 3,
          "returnSlots": 3
        },
        "@onDisputeEnd_8457": {
          "entryPoint": 2151,
          "id": 8457,
          "parameterSlots": 4,
          "returnSlots": 3
        },
        "@onNewEpoch_7776": {
          "entryPoint": null,
          "id": 7776,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@onNewEpoch_8500": {
          "entryPoint": 1950,
          "id": 8500,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@removeValidator_8814": {
          "entryPoint": 4212,
          "id": 8814,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@updateClaimAgreementMask_8914": {
          "entryPoint": 3480,
          "id": 8914,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_decode_address_payable": {
          "entryPoint": 4676,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address_payablet_address_payablet_bytes32": {
          "entryPoint": 5117,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_address_payablet_bytes32": {
          "entryPoint": 4704,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 5224,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32": {
          "entryPoint": 5058,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes_calldata_ptr": {
          "entryPoint": 4904,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_enum$_Phase_$5664": {
          "entryPoint": 5018,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256_fromMemory": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256t_uint256": {
          "entryPoint": 5083,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_fromMemory": {
          "entryPoint": 5258,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed": {
          "entryPoint": 4599,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 5177,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_enum$_Result_$5718_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__to_t_uint8_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__fromStack_reversed": {
          "entryPoint": 4768,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_0fa6258d77e1ae243515c3844792e5570489e1a536afaa96177ed2afebc7bc1f__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9435e67db38af498cac4ff0f67c95329bbd8b0b6f440c6fbb30817e980901290__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_cf380c47f6d4378bba73c9b2df8a3523552d90befb210db4e6e6d52a38b34f25__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_d9df6a7699a9b21c144340fa7bcf61e7a08aaf8f8c7236889796c31e7b8f7317__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762__to_t_uint256__fromStack_library_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "increment_t_uint256": {
          "entryPoint": 5305,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "panic_error_0x21": {
          "entryPoint": 4746,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 5283,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:9492:49",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:49",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "181:507:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "191:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "201:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "195:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "212:32:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "230:9:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "241:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "226:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "226:18:49"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "216:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "260:9:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "271:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "253:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "253:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "253:21:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "283:17:49",
                      "value": {
                        "name": "tail_1",
                        "nodeType": "YulIdentifier",
                        "src": "294:6:49"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "287:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "309:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "329:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "323:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "323:13:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "313:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "352:6:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "360:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "345:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "345:22:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "345:22:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "376:25:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "387:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "398:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "383:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "383:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "376:3:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "410:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "428:6:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "436:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "424:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "424:15:49"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "414:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "448:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "457:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "452:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "516:146:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "537:3:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "552:6:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "546:5:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "546:13:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "569:3:49",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "574:1:49",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "565:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "565:11:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "578:1:49",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "561:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "561:19:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "542:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "542:39:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "530:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "530:52:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "530:52:49"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "595:19:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "606:3:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "611:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "602:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "602:12:49"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "595:3:49"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "627:25:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "641:6:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "649:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "637:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "637:15:49"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "627:6:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "478:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "481:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "475:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "475:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "489:18:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "491:14:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "500:1:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "503:1:49",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "496:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "496:9:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "491:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "471:3:49",
                        "statements": []
                      },
                      "src": "467:195:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "671:11:49",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "679:3:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "671:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "150:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "161:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "172:4:49",
                    "type": ""
                  }
                ],
                "src": "14:674:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "794:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "804:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "816:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "827:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "812:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "812:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "804:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "846:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "857:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "839:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "839:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "839:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "763:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "774:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "785:4:49",
                    "type": ""
                  }
                ],
                "src": "693:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "932:124:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "942:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "964:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "951:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "951:20:49"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "942:5:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1034:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1043:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1046:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1036:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1036:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1036:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "993:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1004:5:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1019:3:49",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1024:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1015:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1015:11:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1028:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1011:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1011:19:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1000:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1000:31:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "990:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "990:42:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "983:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "983:50:49"
                      },
                      "nodeType": "YulIf",
                      "src": "980:70:49"
                    }
                  ]
                },
                "name": "abi_decode_address_payable",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "911:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "922:5:49",
                    "type": ""
                  }
                ],
                "src": "875:181:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1156:175:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1202:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1211:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1214:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1204:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1204:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1204:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1177:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1186:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1173:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1173:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1198:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1169:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1169:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1166:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1227:47:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1264:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address_payable",
                          "nodeType": "YulIdentifier",
                          "src": "1237:26:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1237:37:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1227:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1283:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1310:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1321:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1306:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1306:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1293:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1293:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1283:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_payablet_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1114:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1125:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1137:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1145:6:49",
                    "type": ""
                  }
                ],
                "src": "1061:270:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1368:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1385:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1392:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1397:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1388:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1388:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1378:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1378:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1378:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1425:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1428:4:49",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1418:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1418:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1418:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1449:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1452:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "1442:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1442:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1442:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "1336:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1742:867:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1752:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1764:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1775:3:49",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1760:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1760:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1752:4:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1821:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1842:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1849:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1854:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "1845:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1845:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1835:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1835:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1835:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1886:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1889:4:49",
                                  "type": "",
                                  "value": "0x21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "1879:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1879:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1879:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1914:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1917:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1907:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1907:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1907:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1801:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1809:1:49",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1798:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1798:13:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1791:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1791:21:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1788:144:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1948:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1959:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1941:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1941:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1941:25:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1975:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1985:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "1979:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1996:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2011:9:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2022:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2007:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2007:18:49"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "2000:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2034:10:49",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "2041:3:49"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "2034:3:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2053:20:49",
                      "value": {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "2067:6:49"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "2057:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2082:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2091:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "2086:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2148:120:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "2169:3:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "2180:6:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "2174:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2174:13:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2162:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2162:26:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2162:26:49"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2201:19:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "2212:3:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2217:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2208:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2208:12:49"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2201:3:49"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2233:25:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "2247:6:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2255:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2243:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2243:15:49"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2233:6:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "2112:1:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2115:4:49",
                            "type": "",
                            "value": "0x02"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "2109:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2109:11:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "2121:18:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2123:14:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "2132:1:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2135:1:49",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2128:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2128:9:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2123:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "2105:3:49",
                        "statements": []
                      },
                      "src": "2101:167:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2277:31:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2294:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2305:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2290:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2290:18:49"
                      },
                      "variables": [
                        {
                          "name": "pos_1",
                          "nodeType": "YulTypedName",
                          "src": "2281:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2317:14:49",
                      "value": {
                        "name": "pos_1",
                        "nodeType": "YulIdentifier",
                        "src": "2326:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "pos_1",
                          "nodeType": "YulIdentifier",
                          "src": "2317:5:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2340:22:49",
                      "value": {
                        "name": "value2",
                        "nodeType": "YulIdentifier",
                        "src": "2356:6:49"
                      },
                      "variables": [
                        {
                          "name": "srcPtr_1",
                          "nodeType": "YulTypedName",
                          "src": "2344:8:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2371:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2382:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i_1",
                          "nodeType": "YulTypedName",
                          "src": "2375:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2445:158:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2466:5:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2483:8:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2477:5:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2477:15:49"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2502:3:49",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2507:1:49",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "2498:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2498:11:49"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2511:1:49",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "2494:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2494:19:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2473:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2473:41:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2459:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2459:56:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2459:56:49"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2528:23:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2541:5:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2548:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2537:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2537:14:49"
                            },
                            "variableNames": [
                              {
                                "name": "pos_1",
                                "nodeType": "YulIdentifier",
                                "src": "2528:5:49"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2564:29:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2580:8:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2590:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2576:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2576:17:49"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr_1",
                                "nodeType": "YulIdentifier",
                                "src": "2564:8:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i_1",
                            "nodeType": "YulIdentifier",
                            "src": "2403:3:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2408:4:49",
                            "type": "",
                            "value": "0x02"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "2400:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2400:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "2414:22:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2416:18:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2427:3:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2432:1:49",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2423:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2423:11:49"
                            },
                            "variableNames": [
                              {
                                "name": "i_1",
                                "nodeType": "YulIdentifier",
                                "src": "2416:3:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "2396:3:49",
                        "statements": []
                      },
                      "src": "2392:211:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_enum$_Result_$5718_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__to_t_uint8_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1695:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1706:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1714:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1722:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1733:4:49",
                    "type": ""
                  }
                ],
                "src": "1468:1141:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2703:502:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2749:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2758:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2761:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2751:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2751:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2751:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2724:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2733:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2720:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2720:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2745:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2716:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2716:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "2713:52:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2774:37:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2801:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2788:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2788:23:49"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "2778:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2820:28:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2830:18:49",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "2824:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2875:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2884:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2887:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2877:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2877:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2877:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2863:6:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2871:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2860:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2860:14:49"
                      },
                      "nodeType": "YulIf",
                      "src": "2857:34:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2900:32:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2914:9:49"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2925:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2910:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2910:22:49"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "2904:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2980:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2989:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2992:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2982:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2982:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2982:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2959:2:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2963:4:49",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2955:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2955:13:49"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2970:7:49"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2951:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2951:27:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2944:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2944:35:49"
                      },
                      "nodeType": "YulIf",
                      "src": "2941:55:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3005:30:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "3032:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3019:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3019:16:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "3009:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3062:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3071:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3074:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3064:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3064:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3064:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3050:6:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "3058:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3047:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3047:14:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3044:34:49"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3128:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3137:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3140:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3130:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3130:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3130:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3101:2:49"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3105:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3097:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3097:15:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3114:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3093:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3093:24:49"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "3119:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3090:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3090:37:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3087:57:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3153:21:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "3167:2:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3171:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3163:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3163:11:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3153:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3183:16:49",
                      "value": {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "3193:6:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "3183:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2661:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2672:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2684:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2692:6:49",
                    "type": ""
                  }
                ],
                "src": "2614:591:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3305:92:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3315:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3327:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3338:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3323:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3323:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3315:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3357:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3382:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3375:6:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3375:14:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3368:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3368:22:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3350:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3350:41:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3350:41:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3274:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3285:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3296:4:49",
                    "type": ""
                  }
                ],
                "src": "3210:187:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3482:186:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3528:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3537:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3540:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3530:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3530:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3530:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3503:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3512:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3499:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3499:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3524:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3495:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3495:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3492:52:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3553:36:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3579:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3566:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3566:23:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "3557:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3622:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3631:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3634:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3624:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3624:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3624:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3611:5:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3618:1:49",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3608:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3608:12:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3601:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3601:20:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3598:40:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3647:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "3657:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3647:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_enum$_Phase_$5664",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3448:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3459:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3471:6:49",
                    "type": ""
                  }
                ],
                "src": "3402:266:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3743:110:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3789:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3798:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3801:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3791:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3791:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3791:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3764:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3773:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3760:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3760:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3785:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3756:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3756:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3753:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3814:33:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3837:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3824:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3824:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3814:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3709:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3720:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3732:6:49",
                    "type": ""
                  }
                ],
                "src": "3673:180:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3959:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3969:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3981:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3992:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3977:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3977:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3969:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4011:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4022:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4004:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4004:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4004:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3928:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3939:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3950:4:49",
                    "type": ""
                  }
                ],
                "src": "3858:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4127:161:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4173:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4182:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4185:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4175:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4175:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4175:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4148:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4157:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4144:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4144:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4169:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4140:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4140:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "4137:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4198:33:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4221:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4208:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4208:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4198:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4240:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4267:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4278:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4263:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4263:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4250:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4250:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4240:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4085:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4096:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4108:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4116:6:49",
                    "type": ""
                  }
                ],
                "src": "4040:248:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4413:240:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4459:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4468:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4471:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4461:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4461:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4461:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4434:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4443:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4430:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4430:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4455:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4426:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4426:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "4423:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4484:47:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4521:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address_payable",
                          "nodeType": "YulIdentifier",
                          "src": "4494:26:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4494:37:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4484:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4540:56:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4581:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4592:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4577:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4577:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address_payable",
                          "nodeType": "YulIdentifier",
                          "src": "4550:26:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4550:46:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4540:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4605:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4632:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4643:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4628:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4628:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4615:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4615:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "4605:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_payablet_address_payablet_bytes32",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4363:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4374:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4386:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4394:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4402:6:49",
                    "type": ""
                  }
                ],
                "src": "4293:360:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4787:259:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4804:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4815:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4797:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4797:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4797:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4838:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4849:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4834:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4834:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "4854:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4827:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4827:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4827:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4887:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4898:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4883:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4883:18:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4903:6:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "4911:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "4870:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4870:48:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4870:48:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4942:9:49"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4953:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4938:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4938:22:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4962:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4934:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4934:31:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4967:1:49",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4927:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4927:42:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4927:42:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4978:62:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4994:9:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5013:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5021:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5009:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5009:15:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5030:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "5026:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5026:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5005:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5005:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4990:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4990:45:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5037:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4986:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4986:54:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4978:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4748:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4759:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4767:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4778:4:49",
                    "type": ""
                  }
                ],
                "src": "4658:388:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5129:199:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5175:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5184:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5187:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5177:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5177:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5177:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5150:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5159:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5146:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5146:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5171:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5142:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5142:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "5139:52:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5200:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5219:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "5213:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5213:16:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "5204:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5282:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5291:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5294:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5284:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5284:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5284:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5251:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5272:5:49"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "5265:6:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5265:13:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "5258:6:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5258:21:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "5248:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5248:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "5241:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5241:40:49"
                      },
                      "nodeType": "YulIf",
                      "src": "5238:60:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5307:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "5317:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5307:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5095:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5106:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5118:6:49",
                    "type": ""
                  }
                ],
                "src": "5051:277:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5529:162:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5539:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5551:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5562:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5547:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5547:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5539:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5581:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5592:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5574:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5574:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5574:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5619:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5630:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5615:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5615:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "5635:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5608:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5608:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5608:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5662:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5673:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5658:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5658:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "5678:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5651:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5651:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5651:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5482:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5493:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5501:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5509:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5520:4:49",
                    "type": ""
                  }
                ],
                "src": "5333:358:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5808:103:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5854:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5863:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5866:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5856:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5856:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5856:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5829:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5838:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5825:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5825:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5850:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5821:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5821:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "5818:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5879:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5895:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "5889:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5889:16:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5879:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5774:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5785:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5797:6:49",
                    "type": ""
                  }
                ],
                "src": "5696:215:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6090:161:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6107:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6118:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6100:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6100:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6100:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6141:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6152:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6137:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6137:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6157:2:49",
                            "type": "",
                            "value": "11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6130:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6130:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6130:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6180:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6191:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6176:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6176:18:49"
                          },
                          {
                            "hexValue": "656d70747920636c61696d",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6196:13:49",
                            "type": "",
                            "value": "empty claim"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6169:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6169:41:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6169:41:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6219:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6231:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6242:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6227:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6227:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6219:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_cf380c47f6d4378bba73c9b2df8a3523552d90befb210db4e6e6d52a38b34f25__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6067:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6081:4:49",
                    "type": ""
                  }
                ],
                "src": "5916:335:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6430:168:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6447:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6458:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6440:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6440:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6440:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6481:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6492:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6477:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6477:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6497:2:49",
                            "type": "",
                            "value": "18"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6470:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6470:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6470:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6520:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6531:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6516:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6516:18:49"
                          },
                          {
                            "hexValue": "73656e646572206e6f7420616c6c6f776564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6536:20:49",
                            "type": "",
                            "value": "sender not allowed"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6509:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6509:48:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6509:48:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6566:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6578:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6589:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6574:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6574:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6566:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9435e67db38af498cac4ff0f67c95329bbd8b0b6f440c6fbb30817e980901290__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6407:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6421:4:49",
                    "type": ""
                  }
                ],
                "src": "6256:342:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6771:119:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6781:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6793:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6804:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6789:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6789:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6781:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6823:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "6834:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6816:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6816:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6816:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6861:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6872:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6857:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6857:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "6877:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6850:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6850:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6850:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6732:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6743:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6751:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6762:4:49",
                    "type": ""
                  }
                ],
                "src": "6603:287:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7069:229:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7086:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7097:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7079:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7079:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7079:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7120:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7131:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7116:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7116:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7136:2:49",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7109:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7109:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7109:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7159:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7170:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7155:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7155:18:49"
                          },
                          {
                            "hexValue": "73656e6465722068616420636c61696d656420696e20746869732065706f6368",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7175:34:49",
                            "type": "",
                            "value": "sender had claimed in this epoch"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7148:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7148:62:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7148:62:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7230:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7241:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7226:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7226:18:49"
                          },
                          {
                            "hexValue": "206265666f7265",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7246:9:49",
                            "type": "",
                            "value": " before"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7219:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7219:37:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7219:37:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7265:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7277:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7288:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7273:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7273:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7265:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_0fa6258d77e1ae243515c3844792e5570489e1a536afaa96177ed2afebc7bc1f__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7046:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7060:4:49",
                    "type": ""
                  }
                ],
                "src": "6895:403:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7443:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7453:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7465:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7476:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7461:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7461:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7453:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7495:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "7506:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7488:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7488:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7488:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762__to_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7412:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7423:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7434:4:49",
                    "type": ""
                  }
                ],
                "src": "7303:216:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7605:103:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7651:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7660:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7663:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7653:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7653:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7653:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7626:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7635:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7622:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7622:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7647:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "7618:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7618:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "7615:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7676:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7692:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "7686:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7686:16:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7676:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7571:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "7582:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7594:6:49",
                    "type": ""
                  }
                ],
                "src": "7524:184:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7887:158:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7904:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7915:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7897:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7897:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7897:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7938:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7949:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7934:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7934:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7954:1:49",
                            "type": "",
                            "value": "9"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7927:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7927:29:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7927:29:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7976:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7987:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7972:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7972:18:49"
                          },
                          {
                            "hexValue": "616464726573732030",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7992:11:49",
                            "type": "",
                            "value": "address 0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7965:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7965:39:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7965:39:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8013:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8025:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8036:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8021:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8021:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8013:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7864:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7878:4:49",
                    "type": ""
                  }
                ],
                "src": "7713:332:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8082:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8099:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8106:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8111:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "8102:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8102:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8092:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8092:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8092:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8139:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8142:4:49",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8132:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8132:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8132:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8163:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8166:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "8156:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8156:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8156:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "8050:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8229:185:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8268:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8289:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8296:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8301:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "8292:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8292:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8282:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8282:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8282:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8333:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8336:4:49",
                                  "type": "",
                                  "value": "0x11"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8326:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8326:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8326:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8361:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8364:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8354:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8354:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8354:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8245:5:49"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8256:1:49",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "8252:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8252:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "8242:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8242:17:49"
                      },
                      "nodeType": "YulIf",
                      "src": "8239:140:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8388:20:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8399:5:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8406:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8395:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8395:13:49"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "8388:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "8211:5:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "8221:3:49",
                    "type": ""
                  }
                ],
                "src": "8182:232:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8593:169:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8610:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8621:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8603:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8603:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8603:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8644:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8655:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8640:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8640:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8660:2:49",
                            "type": "",
                            "value": "19"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8633:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8633:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8633:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8683:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8694:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8679:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8679:18:49"
                          },
                          {
                            "hexValue": "76616c696461746f72206e6f7420666f756e64",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8699:21:49",
                            "type": "",
                            "value": "validator not found"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8672:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8672:49:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8672:49:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8730:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8742:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8753:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8738:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8738:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8730:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8570:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8584:4:49",
                    "type": ""
                  }
                ],
                "src": "8419:343:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8941:178:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8958:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8969:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8951:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8951:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8951:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8992:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9003:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8988:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8988:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9008:2:49",
                            "type": "",
                            "value": "28"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8981:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8981:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8981:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9031:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9042:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9027:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9027:18:49"
                          },
                          {
                            "hexValue": "4167726565696e672076616c696461746f72206e6f7420666f756e64",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9047:30:49",
                            "type": "",
                            "value": "Agreeing validator not found"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9020:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9020:58:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9020:58:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9087:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9099:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9110:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9095:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9095:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9087:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_d9df6a7699a9b21c144340fa7bcf61e7a08aaf8f8c7236889796c31e7b8f7317__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8918:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8932:4:49",
                    "type": ""
                  }
                ],
                "src": "8767:352:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9328:162:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "9338:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9350:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9361:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9346:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9346:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9338:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9380:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "9391:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9373:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9373:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9373:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9418:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9429:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9414:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9414:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "9434:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9407:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9407:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9407:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9461:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9472:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9457:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9457:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "9477:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9450:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9450:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9450:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9281:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "9292:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9300:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9308:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9319:4:49",
                    "type": ""
                  }
                ],
                "src": "9124:366:49"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address_payable(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_payablet_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_payable(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_Result_$5718_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__to_t_uint8_t_array$_t_bytes32_$2_memory_ptr_t_array$_t_address_payable_$2_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        if iszero(lt(value0, 3))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n        let _1 := 32\n        let pos := add(headStart, _1)\n        pos := pos\n        let srcPtr := value1\n        let i := 0\n        for { } lt(i, 0x02) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        let pos_1 := add(headStart, 96)\n        pos_1 := pos_1\n        let srcPtr_1 := value2\n        let i_1 := 0\n        for { } lt(i_1, 0x02) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr_1), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr_1 := add(srcPtr_1, _1)\n        }\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_enum$_Phase_$5664(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(lt(value, 3)) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_payable(headStart)\n        value1 := abi_decode_address_payable(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_cf380c47f6d4378bba73c9b2df8a3523552d90befb210db4e6e6d52a38b34f25__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"empty claim\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9435e67db38af498cac4ff0f67c95329bbd8b0b6f440c6fbb30817e980901290__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"sender not allowed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_0fa6258d77e1ae243515c3844792e5570489e1a536afaa96177ed2afebc7bc1f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"sender had claimed in this epoch\")\n        mstore(add(headStart, 96), \" before\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"address 0\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"validator not found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d9df6a7699a9b21c144340fa7bcf61e7a08aaf8f8c7236889796c31e7b8f7317__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Agreeing validator not found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5762_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n}",
          "id": 49,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {
        "contracts/libraries/LibClaimsMask.sol": {
          "LibClaimsMask": [
            {
              "length": 20,
              "start": 1134
            },
            {
              "length": 20,
              "start": 1492
            },
            {
              "length": 20,
              "start": 1995
            },
            {
              "length": 20,
              "start": 2360
            },
            {
              "length": 20,
              "start": 3128
            },
            {
              "length": 20,
              "start": 3515
            },
            {
              "length": 20,
              "start": 3673
            },
            {
              "length": 20,
              "start": 3788
            },
            {
              "length": 20,
              "start": 3912
            },
            {
              "length": 20,
              "start": 4089
            },
            {
              "length": 20,
              "start": 4378
            }
          ]
        }
      },
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x98F69B16 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x98F69B16 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x9D45CECA EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xBCB3571A EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0xD446E010 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xDA048E36 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xF8A7EA5D EQ PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1487D4A9 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x15AFD588 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x3672682C EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x3EA30FED EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x57414EE8 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0x83089F41 EQ PUSH2 0x162 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC74 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0x11B PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x2EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x139A JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A688224991301 SLOAD PUSH2 0xFA JUMP JUMPDEST PUSH2 0x160 PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x13C2 JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x5A37C7635CA526C8F76C52EC540210850576205B63DBB3612D47DF2B54D6918A ADD SSTORE JUMP JUMPDEST PUSH2 0xFA PUSH2 0x3BC JUMP JUMPDEST PUSH2 0x13D PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x13D PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x406 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x227 CALLDATASIZE PUSH1 0x4 PUSH2 0x13DB JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH2 0x11B PUSH2 0x23A CALLDATASIZE PUSH1 0x4 PUSH2 0x13FD JUMP JUMPDEST PUSH2 0x4D6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x289 JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x2C4 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x2DE DUP2 DUP8 DUP8 PUSH2 0x514 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x51584BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 DUP2 SWAP1 PUSH4 0xA2B097AE SWAP1 PUSH2 0x316 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1439 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x335 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x1468 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x396 JUMPI PUSH2 0x396 PUSH2 0x128A JUMP JUMPDEST DUP2 PUSH1 0x1 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x3D6 DUP2 PUSH2 0x79E JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D255AE5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 DUP2 SWAP1 PUSH4 0x74956B94 SWAP1 PUSH2 0x316 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1439 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x15E55CE5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 DUP2 SWAP1 PUSH4 0x15E55CE5 SWAP1 PUSH2 0x316 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1439 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x1BCFF65 PUSH1 0xE7 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0xDE7FB280 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x4A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E0 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x11D9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14E1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x503 DUP2 DUP9 DUP9 DUP9 PUSH2 0x867 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51E PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x526 PUSH2 0x11D9 JUMP JUMPDEST DUP4 PUSH2 0x566 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x656D70747920636C61696D PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x570 DUP7 DUP7 PUSH2 0xA8C JUMP JUMPDEST PUSH2 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1CD95B99195C881B9BDD08185B1B1BDDD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BD DUP8 DUP8 PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x3 DUP9 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xCB9F8813 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0x0 SWAP2 PUSH4 0xCB9F8813 SWAP2 PUSH2 0x605 SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x622 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x646 SWAP2 SWAP1 PUSH2 0x1468 JUMP JUMPDEST ISZERO PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73656E6465722068616420636C61696D656420696E20746869732065706F6368 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x206265666F7265 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x55D JUMP JUMPDEST DUP7 SLOAD PUSH2 0x6AD JUMPI DUP5 DUP8 SSTORE JUMPDEST DUP7 SLOAD DUP6 EQ PUSH2 0x70D JUMPI PUSH2 0x701 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x6E7 DUP13 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0xD3F JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x50B JUMP JUMPDEST PUSH2 0x717 DUP8 DUP8 PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x720 DUP8 PUSH2 0xE3A JUMP JUMPDEST PUSH2 0x764 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x75F SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xD3F JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x503 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0xD3F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A9 DUP3 PUSH2 0xF32 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 DUP4 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x67BDC853 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xCF7B90A6 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x805 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x829 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xDDC860800A99149017C480EC51523BF4143B7215E78956AE5C31E5C568F5383A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x871 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x879 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x883 DUP8 DUP7 PUSH2 0x1074 JUMP JUMPDEST DUP7 SLOAD DUP5 SUB PUSH2 0x91D JUMPI PUSH2 0x894 DUP8 PUSH2 0xE3A JUMP JUMPDEST PUSH2 0x8D8 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x8D3 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0x912 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xA82 JUMP JUMPDEST PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xFA95F400 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x972 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST ISZERO PUSH2 0x9E7 JUMPI PUSH2 0x912 PUSH1 0x2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x9CD DUP13 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x1194 JUMP JUMPDEST DUP4 DUP8 SSTORE PUSH2 0x9F4 DUP8 DUP8 PUSH2 0xD98 JUMP JUMPDEST PUSH2 0x9FD DUP8 PUSH2 0xE3A JUMP JUMPDEST PUSH2 0xA41 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0xA3C SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0xA7B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE DUP4 ADD MSTORE PUSH2 0xA7B SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAD0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xB2F JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xAF4 JUMPI PUSH2 0xAF4 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xB1D JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH2 0xB27 DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAD3 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xBD9 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xBA1 JUMPI PUSH2 0xBA1 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0xBC7 JUMPI SWAP1 POP PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH2 0xBD1 DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB80 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D985B1A59185D1BDC881B9BDD08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xFA95F400 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC96 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0xCF6 JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0xCE4 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xCC7 JUMPI PUSH2 0xCC7 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0xCEE DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC9B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4167726565696E672076616C696461746F72206E6F7420666F756E6400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x55D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD49 PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0xD51 PUSH2 0x11D9 JUMP JUMPDEST PUSH32 0x495383AED97965C56495CDBADEDFE9667A1B028C54D3FC4B5335895146E02B70 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xD84 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 SWAP5 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA4 DUP4 DUP4 PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x335C20D7 PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0x0 SWAP2 PUSH4 0xCD70835C SWAP2 PUSH2 0xDEC SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE2D SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST DUP4 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x6A02B7FF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xD4056FFE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEB7 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xFA95F400 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xF06 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF2A SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH3 0x3EA57D PUSH1 0xEA SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0xFA95F400 SWAP2 PUSH2 0xF72 SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xF8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB3 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x106F JUMPI PUSH1 0x1 DUP2 SHL DUP3 AND ISZERO PUSH2 0x105D JUMPI PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x14BC74AD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x0 SWAP1 PUSH4 0x52F1D2B4 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1033 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1057 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE JUMPDEST DUP1 PUSH2 0x1067 DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xFB8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x106F JUMPI DUP3 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1098 JUMPI PUSH2 0x1098 PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND SUB PUSH2 0x1182 JUMPI PUSH1 0x0 DUP4 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x10CE JUMPI PUSH2 0x10CE PUSH2 0x14A3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B099AE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xAC266B8C SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1154 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1178 SWAP2 SWAP1 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x118C DUP2 PUSH2 0x14B9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1077 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119E PUSH2 0x11D9 JUMP JUMPDEST PUSH2 0x11A6 PUSH2 0x11D9 JUMP JUMPDEST PUSH32 0x9201C193A07CAE1DF95AE692CC698685574C942A04514C48A4C3249F38594FF DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xD84 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1238 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1213 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x125B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127C DUP4 PUSH2 0x1244 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH1 0x3 DUP6 LT PUSH2 0x12C2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP6 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x12EB JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12CE JUMP JUMPDEST POP POP POP PUSH1 0x60 DUP4 ADD DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x131C JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12F6 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x133B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x141B DUP5 PUSH2 0x1244 JUMP JUMPDEST SWAP3 POP PUSH2 0x1429 PUSH1 0x20 DUP6 ADD PUSH2 0x1244 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x147A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x13BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x149C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x14D9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID DUP11 0xB3 PUSH32 0xEF2B2E34C4B62FF9948EE661CDCF34E209D7C20F4D1F6E83085E93B1FCA26469 PUSH17 0x667358221220AE25D1B706B19196E3E4D3 PUSH7 0x113729DFE7F03B 0xC5 0xAD SWAP16 SGT 0xFB DIV 0xC1 PUSH7 0xBE41A7E5D06473 PUSH16 0x6C634300080D00330000000000000000 ",
      "sourceMap": "1334:4153:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1888:248;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4539:210;4718:24;;4539:210;;;839:25:49;;;827:2;812:18;4539:210:13;693:177:49;2142:384:13;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;4137:192::-;;;;;;:::i;:::-;;:::i;:::-;;;3375:14:49;;3368:22;3350:41;;3338:2;3323:18;4137:192:13;3210:187:49;1679:203:13;;;;;;:::i;:::-;;:::i;:::-;;3564:183;3718:22;;3564:183;;3951:180;;;;;;:::i;:::-;1480:14:42;:30;;:14;:30;;;;4014:41:13;1480:30:42;;;;;;;3951:180:13;3331:227;;;:::i;3753:192::-;;;;;;:::i;:::-;;:::i;4335:198::-;;;;;;:::i;:::-;;:::i;4755:335::-;;;;;;:::i;:::-;;:::i;2778:470::-;;;;;;:::i;:::-;;:::i;1888:248::-;1935:24;1971:73;-1:-1:-1;;;;;;;;;;;2100:29:13;;;2093:36;;;;;;;;;;;;;;;;;;;1971:112;;-1:-1:-1;2093:36:13;;2100:29;2093:36;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2093:36:13;;;;;;;;;;;;;;;;;;;;;;;;1888:248;:::o;2142:384::-;2246:6;2266:17;;:::i;:::-;2297:25;;:::i;:::-;-1:-1:-1;;;;;;;;;;;2476:43:13;942:45:44;2503:7:13;2512:6;2476:26;:43::i;:::-;2469:50;;;;;;;2142:384;;;;;:::o;4137:192::-;4288:34;;-1:-1:-1;;;4288:34:13;;4201:4;;4265;;;;4288:27;;:34;;4316:5;;;;4288:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4281:41;;;4137:192;;;;;:::o;1679:203::-;1277:36:43;1868:6:13;1861:14;;;;;;;;:::i;:::-;1832:9;:26;;;:43;;;;;;;;;;;;;;;;;;1726:156;1679:203;:::o;3331:227::-;3372:7;-1:-1:-1;;;;;;;;;;;3520:31:13;942:45:44;3520:29:13;:31::i;:::-;3513:38;;;3331:227;:::o;3753:192::-;3904:34;;-1:-1:-1;;;3904:34:13;;3817:4;;3881;;;;3904:27;;:34;;3932:5;;;;3904:34;;;:::i;4335:198::-;4490:36;;-1:-1:-1;;;4490:36:13;;4400:4;;4467;;;;4490:29;;:36;;4520:5;;;;4490:36;;;:::i;4755:335::-;4836:73;-1:-1:-1;;;;;;;;;;;4990:42:13;;;;:93;;-1:-1:-1;;;4990:93:13;;;;;5574:25:49;;;;5615:18;;;5608:34;;;5658:18;;;5651:34;;;4990:42:13;;-1:-1:-1;4990:68:13;;;;5547:18:49;;4990:93:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4958:29;;;;:125;-1:-1:-1;;4755:335:13:o;2778:470::-;2948:6;2968:17;;:::i;:::-;2999:25;;:::i;:::-;-1:-1:-1;;;;;;;;;;;3178:63:13;942:45:44;3210:7:13;3219:6;3227:13;3178:31;:63::i;:::-;3171:70;;;;;;;2778:470;;;;;;;;:::o;6002:1531:44:-;6162:6;6182:17;;:::i;:::-;6213:25;;:::i;:::-;6271:5;6263:43;;;;-1:-1:-1;;;6263:43:44;;6118:2:49;6263:43:44;;;6100:21:49;6157:2;6137:18;;;6130:30;-1:-1:-1;;;6176:18:49;;;6169:41;6227:18;;6263:43:44;;;;;;;;;6324:23;6336:2;6340:6;6324:11;:23::i;:::-;6316:54;;;;-1:-1:-1;;;6316:54:44;;6458:2:49;6316:54:44;;;6440:21:49;6497:2;6477:18;;;6470:30;-1:-1:-1;;;6516:18:49;;;6509:48;6574:18;;6316:54:44;6256:342:49;6316:54:44;6454:13;6470:29;6488:2;6492:6;6470:17;:29::i;:::-;6531:13;;;;:35;;-1:-1:-1;;;6531:35:44;;6454:45;;-1:-1:-1;6531:28:44;;;;:35;;6454:45;;6531:35;;6816:25:49;;;6872:2;6857:18;;6850:34;6804:2;6789:18;;6603:287;6531:35:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6530:36;6509:122;;;;-1:-1:-1;;;6509:122:44;;7097:2:49;6509:122:44;;;7079:21:49;7136:2;7116:18;;;7109:30;7175:34;7155:18;;;7148:62;-1:-1:-1;;;7226:18:49;;;7219:37;7273:19;;6509:122:44;6895:403:49;6509:122:44;6713:15;;6709:83;;6758:23;;;6709:83;6815:15;;6806:24;;6802:265;;6869:187;6917:15;6869:187;;;;;;;;6955:2;:15;;;6869:187;;;;6972:5;6869:187;;;;;;;;;;;7001:28;7026:2;7001:24;:28::i;:::-;-1:-1:-1;;;;;6869:187:44;;;;;;;;;;;;:26;:187::i;:::-;6846:210;;;;;;;;;6802:265;7076:36;7101:2;7105:6;7076:24;:36::i;:::-;7142:15;7154:2;7142:11;:15::i;:::-;:384;;7360:166;;;;;;;;;;;7408:17;7360:166;;;;;;;;;;;;;;;-1:-1:-1;;;;;7360:166:44;;;;;;;;;;;7408:17;;7360:166;:26;:166::i;:::-;7142:384;;;7176:165;;;;;;;;;;;-1:-1:-1;7176:165:44;;;;;;;;;;;;;;;-1:-1:-1;;;;;7176:165:44;;;;;;;;;7224:16;;7176:165;:26;:165::i;4952:491::-;5017:7;5124:32;5153:2;5124:28;:32::i;:::-;5186:15;;5167:16;5243:28;;5343:13;;;;:34;;-1:-1:-1;;;5343:34:44;;;;;839:25:49;;;;5343:32:44;;;;812:18:49;;5343:34:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5327:13;;;:50;5393:18;;839:25:49;;;5393:18:44;;827:2:49;812:18;5393::44;;;;;;;5428:8;4952:491;-1:-1:-1;;4952:491:44:o;2779:2048::-;2982:6;3002:17;;:::i;:::-;3033:25;;:::i;:::-;3083:26;3099:2;3103:5;3083:15;:26::i;:::-;3140:15;;3124:31;;3120:587;;3260:15;3272:2;3260:11;:15::i;:::-;:436;;3508:188;;;;;;;;;;;3559:17;3508:188;;;;;;;;;;;;;;;-1:-1:-1;;;;;3508:188:44;;;;;;;;;;;3559:17;;3508:188;:25;:188::i;:::-;3260:436;;;3298:187;;;;;;;;;;;-1:-1:-1;3298:187:44;;;;;;;;;;;;;;;-1:-1:-1;;;;;3298:187:44;;;;;;;;;3349:16;;3298:187;:25;:187::i;:::-;3237:459;;;;;;;;3120:587;3841:13;;;;:32;;-1:-1:-1;;;3841:32:44;;;;;839:25:49;;;;3841:30:44;;;;812:18:49;;3841:32:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:37;3837:284;;3917:193;3964:15;3917:193;;;;;;;;4002:2;:15;;;3917:193;;;;4019:12;3917:193;;;;;;;;;;;4055:28;4080:2;4055:24;:28::i;:::-;-1:-1:-1;;;;;3917:193:44;;;;;;;;;;;;:25;:193::i;3837:284::-;4319:30;;;4359:36;4319:2;4388:6;4359:24;:36::i;:::-;4424:15;4436:2;4424:11;:15::i;:::-;:396;;4648:172;;;;;;;;;;;4695:17;4648:172;;;;;;;;;;;;;;;-1:-1:-1;;;;;4648:172:44;;;;;;;;;;;4695:17;;4648:172;:25;:172::i;:::-;4424:396;;;4458:171;;;;;;;;;;;-1:-1:-1;4458:171:44;;;;;;;;;;;;;;;-1:-1:-1;;;;;4458:171:44;;;;;;;;;4505:16;;4458:171;:25;:171::i;:::-;4405:415;;;;;;2779:2048;;;;;;;;;:::o;11875:328::-;11986:4;-1:-1:-1;;;;;12014:20:44;;12006:42;;;;-1:-1:-1;;;12006:42:44;;7915:2:49;12006:42:44;;;7897:21:49;7954:1;7934:18;;;7927:29;-1:-1:-1;;;7972:18:49;;;7965:39;8021:18;;12006:42:44;7713:332:49;12006:42:44;12064:9;12059:115;12079:13;;;:20;12075:24;;12059:115;;;12134:2;:13;;12148:1;12134:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;12134:16:44;;;12124:26;;;;12120:43;;12159:4;12152:11;;;;;12120:43;12101:3;;;;:::i;:::-;;;;12059:115;;;-1:-1:-1;12191:5:44;;11875:328;-1:-1:-1;;;11875:328:44:o;12402:349::-;12519:7;-1:-1:-1;;;;;12550:20:44;;12542:42;;;;-1:-1:-1;;;12542:42:44;;7915:2:49;12542:42:44;;;7897:21:49;7954:1;7934:18;;;7927:29;-1:-1:-1;;;7972:18:49;;;7965:39;8021:18;;12542:42:44;7713:332:49;12542:42:44;12599:9;12594:112;12614:13;;;:20;12610:24;;12594:112;;;12669:2;:13;;12683:1;12669:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;12669:16:44;;;12659:26;;;;12655:40;;12694:1;-1:-1:-1;12687:8:44;;12655:40;12636:3;;;;:::i;:::-;;;;12594:112;;;-1:-1:-1;12715:29:44;;-1:-1:-1;;;12715:29:44;;8621:2:49;12715:29:44;;;8603:21:49;8660:2;8640:18;;;8633:30;-1:-1:-1;;;8679:18:49;;;8672:49;8738:18;;12715:29:44;8419:343:49;10690:592:44;11024:13;;;;:32;;-1:-1:-1;;;11024:32:44;;;;;839:25:49;;;;10798:15:44;;;;11024:30;;;;812:18:49;;11024:32:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11000:56;;11071:9;11066:162;11086:13;;;:20;11082:24;;11066:162;;;11148:1;:6;;11131:24;;:29;11127:91;;11187:2;:13;;11201:1;11187:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;11187:16:44;;10690:592;-1:-1:-1;;;;10690:592:44:o;11127:91::-;11108:3;;;;:::i;:::-;;;;11066:162;;;-1:-1:-1;11237:38:44;;-1:-1:-1;;;11237:38:44;;8969:2:49;11237:38:44;;;8951:21:49;9008:2;8988:18;;;8981:30;9047;9027:18;;;9020:58;9095:18;;11237:38:44;8767:352:49;8487:391:44;8679:6;8699:17;;:::i;:::-;8730:25;;:::i;:::-;8785:41;8799:6;8807;8815:10;8785:41;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;8844:6:44;;8852;;-1:-1:-1;8860:10:44;;8487:391;-1:-1:-1;8487:391:44:o;11477:259::-;11603:22;11628:29;11646:2;11650:6;11628:17;:29::i;:::-;11683:13;;;;:46;;-1:-1:-1;;;11683:46:44;;11603:54;;-1:-1:-1;11683:30:44;;;;:46;;11603:54;;11683:46;;6816:25:49;;;6872:2;6857:18;;6850:34;6804:2;6789:18;;6603:287;11683:46:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11667:2;:13;;:62;;;;11593:143;11477:259;;:::o;10258:254::-;10397:13;;;;10472:33;;-1:-1:-1;;;10472:33:44;;;;;839:25:49;;;10353:4:44;;10397:13;10472:31;;;;812:18:49;;10472:33:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10439:29;;-1:-1:-1;;;10439:29:44;;;;;839:25:49;;;10439:27:44;;;;812:18:49;;10439:29:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:66;;10258:254;-1:-1:-1;;;10258:254:44:o;9082:451::-;9190:13;;;;:32;;-1:-1:-1;;;9190:32:44;;9166:21;;9190:30;;;;:32;;;;839:25:49;;;827:2;812:18;;693:177;9190:32:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9166:56;;9237:9;9232:295;9252:13;;;:20;9248:24;;9232:295;;;9375:1;:6;;9358:24;;9357:31;9353:164;;9465:13;;;;:37;;-1:-1:-1;;;9465:37:44;;;;;5574:25:49;;;;5615:18;;;5608:34;;;9500:1:44;5658:18:49;;;5651:34;9465:31:44;;;;5547:18:49;;9465:37:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9449:13;;;:53;9353:164;9274:3;;;;:::i;:::-;;;;9232:295;;;;9156:377;9082:451;:::o;9677:478::-;9784:9;9779:370;9799:13;;;:20;9795:24;;9779:370;;;9857:2;:13;;9871:1;9857:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;9857:16:44;;;9844:29;;;;9840:299;;9977:1;9950:2;:13;;9964:1;9950:16;;;;;;;;:::i;:::-;;;;;;;;;;:29;;-1:-1:-1;;;;;;9950:29:44;-1:-1:-1;;;;;9950:29:44;;;;;;;;;;10069:13;;;;:32;;-1:-1:-1;;;10069:32:44;;;;;6816:25:49;;;;6857:18;;;6850:34;;;10069:29:44;;;;6789:18:49;;10069:32:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10053:13;;;:48;9232:295;9156:377;9082:451;:::o;9840:299::-;9821:3;;;;:::i;:::-;;;;9779:370;;7815:389;8006:6;8026:17;;:::i;:::-;8057:25;;:::i;:::-;8112:40;8125:6;8133;8141:10;8112:40;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:674:49:-;201:2;253:21;;;323:13;;226:18;;;345:22;;;172:4;;201:2;424:15;;;;398:2;383:18;;;172:4;467:195;481:6;478:1;475:13;467:195;;;546:13;;-1:-1:-1;;;;;542:39:49;530:52;;637:15;;;;602:12;;;;578:1;496:9;467:195;;;-1:-1:-1;679:3:49;;14:674;-1:-1:-1;;;;;;14:674:49:o;875:181::-;951:20;;-1:-1:-1;;;;;1000:31:49;;990:42;;980:70;;1046:1;1043;1036:12;980:70;875:181;;;:::o;1061:270::-;1137:6;1145;1198:2;1186:9;1177:7;1173:23;1169:32;1166:52;;;1214:1;1211;1204:12;1166:52;1237:37;1264:9;1237:37;:::i;:::-;1227:47;1321:2;1306:18;;;;1293:32;;-1:-1:-1;;;1061:270:49:o;1336:127::-;1397:10;1392:3;1388:20;1385:1;1378:31;1428:4;1425:1;1418:15;1452:4;1449:1;1442:15;1468:1141;1775:3;1760:19;;1809:1;1798:13;;1788:144;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1788:144;1959:6;1948:9;1941:25;1985:2;2022;2011:9;2007:18;2067:6;2091:1;2101:167;2115:4;2112:1;2109:11;2101:167;;;2174:13;;2162:26;;2208:12;;;;2243:15;;;;2135:1;2128:9;2101:167;;;2105:3;;;2305:2;2294:9;2290:18;2356:6;2382:1;2392:211;2408:4;2403:3;2400:13;2392:211;;;2477:15;;-1:-1:-1;;;;;2473:41:49;2459:56;;2537:14;;;;2576:17;;;;2511:1;2423:11;2392:211;;;2396:3;;;;1468:1141;;;;;;:::o;2614:591::-;2684:6;2692;2745:2;2733:9;2724:7;2720:23;2716:32;2713:52;;;2761:1;2758;2751:12;2713:52;2801:9;2788:23;2830:18;2871:2;2863:6;2860:14;2857:34;;;2887:1;2884;2877:12;2857:34;2925:6;2914:9;2910:22;2900:32;;2970:7;2963:4;2959:2;2955:13;2951:27;2941:55;;2992:1;2989;2982:12;2941:55;3032:2;3019:16;3058:2;3050:6;3047:14;3044:34;;;3074:1;3071;3064:12;3044:34;3119:7;3114:2;3105:6;3101:2;3097:15;3093:24;3090:37;3087:57;;;3140:1;3137;3130:12;3087:57;3171:2;3163:11;;;;;3193:6;;-1:-1:-1;2614:591:49;;-1:-1:-1;;;;2614:591:49:o;3402:266::-;3471:6;3524:2;3512:9;3503:7;3499:23;3495:32;3492:52;;;3540:1;3537;3530:12;3492:52;3579:9;3566:23;3618:1;3611:5;3608:12;3598:40;;3634:1;3631;3624:12;3598:40;3657:5;3402:266;-1:-1:-1;;;3402:266:49:o;3673:180::-;3732:6;3785:2;3773:9;3764:7;3760:23;3756:32;3753:52;;;3801:1;3798;3791:12;3753:52;-1:-1:-1;3824:23:49;;3673:180;-1:-1:-1;3673:180:49:o;4040:248::-;4108:6;4116;4169:2;4157:9;4148:7;4144:23;4140:32;4137:52;;;4185:1;4182;4175:12;4137:52;-1:-1:-1;;4208:23:49;;;4278:2;4263:18;;;4250:32;;-1:-1:-1;4040:248:49:o;4293:360::-;4386:6;4394;4402;4455:2;4443:9;4434:7;4430:23;4426:32;4423:52;;;4471:1;4468;4461:12;4423:52;4494:37;4521:9;4494:37;:::i;:::-;4484:47;;4550:46;4592:2;4581:9;4577:18;4550:46;:::i;:::-;4540:56;;4643:2;4632:9;4628:18;4615:32;4605:42;;4293:360;;;;;:::o;4658:388::-;4815:2;4804:9;4797:21;4854:6;4849:2;4838:9;4834:18;4827:34;4911:6;4903;4898:2;4887:9;4883:18;4870:48;4967:1;4938:22;;;4962:2;4934:31;;;4927:42;;;;5030:2;5009:15;;;-1:-1:-1;;5005:29:49;4990:45;4986:54;;4658:388;-1:-1:-1;4658:388:49:o;5051:277::-;5118:6;5171:2;5159:9;5150:7;5146:23;5142:32;5139:52;;;5187:1;5184;5177:12;5139:52;5219:9;5213:16;5272:5;5265:13;5258:21;5251:5;5248:32;5238:60;;5294:1;5291;5284:12;5696:215;5797:6;5850:2;5838:9;5829:7;5825:23;5821:32;5818:52;;;5866:1;5863;5856:12;5818:52;-1:-1:-1;5889:16:49;;5696:215;-1:-1:-1;5696:215:49:o;8050:127::-;8111:10;8106:3;8102:20;8099:1;8092:31;8142:4;8139:1;8132:15;8166:4;8163:1;8156:15;8182:232;8221:3;8242:17;;;8239:140;;8301:10;8296:3;8292:20;8289:1;8282:31;8336:4;8333:1;8326:15;8364:4;8361:1;8354:15;8239:140;-1:-1:-1;8406:1:49;8395:13;;8182:232::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1086000",
        "executionCost": "1127",
        "totalCost": "1087127"
      },
      "external": {
        "_erc20Withdrawal(bytes)": "infinite",
        "_erc721Withdrawal(bytes)": "infinite",
        "_etherWithdrawal(bytes)": "infinite",
        "_getFeePerClaim()": "2304",
        "_getInputDriveSize()": "2403",
        "_getValidators()": "infinite",
        "_onClaim(address,bytes32)": "infinite",
        "_onDisputeEnd(address,address,bytes32)": "infinite",
        "_onNewEpochOutput(bytes32)": "46548",
        "_onNewEpochVM()": "infinite",
        "_setCurrentPhase(uint8)": "24694",
        "_setNumClaims(uint256,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "_erc20Withdrawal(bytes)": "3ea30fed",
      "_erc721Withdrawal(bytes)": "d446e010",
      "_etherWithdrawal(bytes)": "bcb3571a",
      "_getFeePerClaim()": "15afd588",
      "_getInputDriveSize()": "83089f41",
      "_getValidators()": "1487d4a9",
      "_onClaim(address,bytes32)": "3672682c",
      "_onDisputeEnd(address,address,bytes32)": "f8a7ea5d",
      "_onNewEpochOutput(bytes32)": "98f69b16",
      "_onNewEpochVM()": "9d45ceca",
      "_setCurrentPhase(uint8)": "57414ee8",
      "_setNumClaims(uint256,uint256)": "da048e36"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Result\",\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32[2]\",\"name\":\"claims\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"internalType\":\"address payable[2]\",\"name\":\"validators\",\"type\":\"address[2]\"}],\"name\":\"ClaimReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Result\",\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32[2]\",\"name\":\"claims\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"internalType\":\"address payable[2]\",\"name\":\"validators\",\"type\":\"address[2]\"}],\"name\":\"DisputeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"claim\",\"type\":\"bytes32\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"_erc20Withdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"_erc721Withdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"_etherWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getFeePerClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getInputDriveSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getValidators\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"_onClaim\",\"outputs\":[{\"internalType\":\"enum Result\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[2]\",\"name\":\"\",\"type\":\"bytes32[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_loser\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_winningClaim\",\"type\":\"bytes32\"}],\"name\":\"_onDisputeEnd\",\"outputs\":[{\"internalType\":\"enum Result\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[2]\",\"name\":\"\",\"type\":\"bytes32[2]\"},{\"internalType\":\"address payable[2]\",\"name\":\"\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochHash\",\"type\":\"bytes32\"}],\"name\":\"_onNewEpochOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_onNewEpochVM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Phase\",\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"_setCurrentPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_setNumClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_onDisputeEnd(address,address,bytes32)\":{\"params\":{\"_loser\":\"address of dispute loser\",\"_winner\":\"address of dispute winner\",\"_winningClaim\":\"the winning claim\"},\"returns\":{\"_0\":\"result of dispute being finished\"}},\"_onNewEpochVM()\":{\"returns\":{\"_0\":\"current claim\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimReceived(uint8,bytes32[2],address[2])\":{\"notice\":\"emitted on Claim received\"},\"DisputeEnded(uint8,bytes32[2],address[2])\":{\"notice\":\"emitted on Dispute end\"},\"NewEpoch(bytes32)\":{\"notice\":\"emitted on new Epoch\"}},\"kind\":\"user\",\"methods\":{\"_onDisputeEnd(address,address,bytes32)\":{\"notice\":\"called when a dispute ends in rollups\"},\"_onNewEpochVM()\":{\"notice\":\"called when a new epoch starts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DebugFacet.sol\":\"DebugFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/IBank.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n// @title Bank interface\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBank {\\n    /// @notice returns the token used internally\\n    function getToken() external view returns (IERC20);\\n\\n    /// @notice get balance of `_owner`\\n    /// @param _owner account owner\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice transfer `_value` tokens from bank to `_to`\\n    /// @notice decrease the balance of caller by `_value`\\n    /// @param _to account that will receive `_value` tokens\\n    /// @param _value amount of tokens to be transfered\\n    function transferTokens(address _to, uint256 _value) external;\\n\\n    /// @notice transfer `_value` tokens from caller to bank\\n    /// @notice increase the balance of `_to` by `_value`\\n    /// @dev you may need to call `token.approve(bank, _value)`\\n    /// @param _to account that will have their balance increased by `_value`\\n    /// @param _value amount of tokens to be transfered\\n    function depositTokens(address _to, uint256 _value) external;\\n\\n    /// @notice `value` tokens were transfered from the bank to `to`\\n    /// @notice the balance of `from` was decreased by `value`\\n    /// @dev is triggered on any successful call to `transferTokens`\\n    /// @param from the account/contract that called `transferTokens` and\\n    ///              got their balance decreased by `value`\\n    /// @param to the one that received `value` tokens from the bank\\n    /// @param value amount of tokens that were transfered\\n    event Transfer(address indexed from, address to, uint256 value);\\n\\n    /// @notice `value` tokens were transfered from `from` to bank\\n    /// @notice the balance of `to` was increased by `value`\\n    /// @dev is triggered on any successful call to `depositTokens`\\n    /// @param from the account/contract that called `depositTokens` and\\n    ///              transfered `value` tokens to the bank\\n    /// @param to the one that got their balance increased by `value`\\n    /// @param value amount of tokens that were transfered\\n    event Deposit(address from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x483dc9b0c26e3a5d43148cf847bd4df2af03438a0d76d60d33549de3ca2dd77d\",\"license\":\"Apache-2.0\"},\"contracts/facets/DebugFacet.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Debug facet\\npragma solidity ^0.8.0;\\n\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\nimport {Phase} from \\\"../interfaces/IRollups.sol\\\";\\nimport {IEtherPortal} from \\\"../interfaces/IEtherPortal.sol\\\";\\nimport {IERC20Portal} from \\\"../interfaces/IERC20Portal.sol\\\";\\nimport {IERC721Portal} from \\\"../interfaces/IERC721Portal.sol\\\";\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\nimport {LibOutput} from \\\"../libraries/LibOutput.sol\\\";\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibFeeManager} from \\\"../libraries/LibFeeManager.sol\\\";\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\n\\ncontract DebugFacet {\\n    using LibRollups for LibRollups.DiamondStorage;\\n    using LibInput for LibInput.DiamondStorage;\\n    using LibOutput for LibOutput.DiamondStorage;\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n    using LibFeeManager for LibFeeManager.DiamondStorage;\\n    using LibClaimsMask for ClaimsMask;\\n\\n    function _setCurrentPhase(Phase _phase) public {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        rollupsDS.currentPhase_int = uint32(_phase);\\n    }\\n\\n    function _getValidators() public view returns (address payable[] memory) {\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        return validatorManagerDS.validators;\\n    }\\n\\n    function _onClaim(address payable _sender, bytes32 _claim)\\n        public\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        return validatorManagerDS.onClaim(_sender, _claim);\\n    }\\n\\n    /// @notice called when a dispute ends in rollups\\n    /// @param _winner address of dispute winner\\n    /// @param _loser address of dispute loser\\n    /// @param _winningClaim the winning claim\\n    /// @return result of dispute being finished\\n    function _onDisputeEnd(\\n        address payable _winner,\\n        address payable _loser,\\n        bytes32 _winningClaim\\n    )\\n        public\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        return validatorManagerDS.onDisputeEnd(_winner, _loser, _winningClaim);\\n    }\\n\\n    /// @notice called when a new epoch starts\\n    /// @return current claim\\n    function _onNewEpochVM() public returns (bytes32) {\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        return validatorManagerDS.onNewEpoch();\\n    }\\n\\n    function _getInputDriveSize() public view returns (uint256) {\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n        return inputDS.inputDriveSize;\\n    }\\n\\n    function _etherWithdrawal(bytes calldata _data) public returns (bool) {\\n        IEtherPortal etherPortal = IEtherPortal(address(this));\\n        return etherPortal.etherWithdrawal(_data);\\n    }\\n\\n    function _onNewEpochOutput(bytes32 epochHash) public {\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n        outputDS.onNewEpoch(epochHash);\\n    }\\n\\n    function _erc20Withdrawal(bytes calldata _data) public returns (bool) {\\n        IERC20Portal erc20Portal = IERC20Portal(address(this));\\n        return erc20Portal.erc20Withdrawal(_data);\\n    }\\n\\n    function _erc721Withdrawal(bytes calldata _data) public returns (bool) {\\n        IERC721Portal erc721Portal = IERC721Portal(address(this));\\n        return erc721Portal.erc721Withdrawal(_data);\\n    }\\n\\n    function _getFeePerClaim() public view returns (uint256) {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n        return feeManagerDS.feePerClaim;\\n    }\\n\\n    function _setNumClaims(uint256 _validatorIndex, uint256 _value) public {\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        validatorManagerDS.claimsMask = validatorManagerDS\\n            .claimsMask\\n            .setNumClaims(_validatorIndex, _value);\\n    }\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n}\\n\",\"keccak256\":\"0x47f3a52e2779aaaa5f803c1cd322ff2aa54453d35d0765a356d9b7c8d58a2167\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC20Portal.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Generic ERC20 Portal interface\\npragma solidity >=0.7.0;\\n\\ninterface IERC20Portal {\\n    /// @notice deposit an amount of a generic ERC20 token in the portal and create tokens in L2\\n    /// @param _ERC20 address of the ERC20 token contract\\n    /// @param _amount amount of the ERC20 token to be deposited\\n    /// @param _data information to be interpreted by L2\\n    /// @return hash of input generated by deposit\\n    function erc20Deposit(\\n        address _ERC20,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes32);\\n\\n    /// @notice withdraw an amount of a generic ERC20 token from the portal\\n    /// @param _data data with withdrawal information\\n    /// @dev can only be called by the Rollups contract\\n    function erc20Withdrawal(bytes calldata _data) external returns (bool);\\n\\n    /// @notice emitted on ERC20 deposited\\n    event ERC20Deposited(\\n        address ERC20,\\n        address sender,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    /// @notice emitted on ERC20 withdrawal\\n    event ERC20Withdrawn(\\n        address ERC20,\\n        address payable receiver,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x2c54d1567c127dccef327a050acbefae0d14735fc749ad67175ad2892fe9baa7\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC721Portal.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Generic ERC721 Portal interface\\npragma solidity >=0.7.0;\\n\\ninterface IERC721Portal {\\n    /// @notice deposit an ERC721 token in the portal and create a token in L2\\n    /// @param _ERC721 address of the ERC721 contract\\n    /// @param _tokenId index of token for the provided ERC721 contract\\n    /// @param _data information to be interpreted by L2\\n    /// @return hash of input generated by deposit\\n    function erc721Deposit(\\n        address _ERC721,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes32);\\n\\n    /// @notice withdraw an ERC721 token from the portal\\n    /// @param _data data with withdrawal information\\n    /// @dev can only be called by the Rollups contract\\n    function erc721Withdrawal(bytes calldata _data) external returns (bool);\\n\\n    /// @notice emitted on ERC721 deposited\\n    event ERC721Deposited(\\n        address ERC721,\\n        address sender,\\n        uint256 tokenId,\\n        bytes data\\n    );\\n\\n    /// @notice emitted on ERC721 withdrawal\\n    event ERC721Withdrawn(\\n        address ERC721,\\n        address payable receiver,\\n        uint256 tokenId\\n    );\\n}\\n\",\"keccak256\":\"0xaa832745dc85d62e9817127575a699f25c71ea770c0ba77f0d874c44d3fd19e6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IEtherPortal.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Ether Portal interface\\npragma solidity >=0.7.0;\\n\\ninterface IEtherPortal {\\n    /// @notice deposit an amount of Ether in the portal and create Ether in L2\\n    /// @param _data information to be interpreted by L2\\n    /// @return hash of input generated by deposit\\n    function etherDeposit(bytes calldata _data)\\n        external\\n        payable\\n        returns (bytes32);\\n\\n    /// @notice withdraw an amount of Ether from the portal\\n    /// @param _data data with withdrawal information\\n    /// @dev can only be called by the Rollups contract\\n    function etherWithdrawal(bytes calldata _data) external returns (bool);\\n\\n    /// @notice emitted on Ether deposited\\n    event EtherDeposited(address sender, uint256 amount, bytes data);\\n\\n    /// @notice emitted on Ether withdrawal\\n    event EtherWithdrawn(address payable receiver, uint256 amount);\\n}\\n\",\"keccak256\":\"0xe4cf1f9c0036627a992efdbc1cb73a871e0c3208e07a5d1580b64af29e16f0f9\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups interface\\npragma solidity >=0.7.0;\\n\\n// InputAccumulation - Inputs being accumulated for currrent epoch\\n// AwaitingConsensus - No disagreeing claims (or no claims)\\n// AwaitingDispute - Waiting for dispute to be over\\n// inputs received during InputAccumulation will be included in the\\n// current epoch. Inputs received while WaitingClaims or ChallengesInProgress\\n// are accumulated for the next epoch\\nenum Phase {\\n    InputAccumulation,\\n    AwaitingConsensus,\\n    AwaitingDispute\\n}\\n\\ninterface IRollups {\\n    /// @notice claim the result of current epoch\\n    /// @param _epochHash hash of epoch\\n    /// @dev ValidatorManager makes sure that msg.sender is allowed\\n    ///      and that claim != bytes32(0)\\n    /// TODO: add signatures for aggregated claims\\n    function claim(bytes32 _epochHash) external;\\n\\n    /// @notice finalize epoch after timeout\\n    /// @dev can only be called if challenge period is over\\n    function finalizeEpoch() external;\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two epochs two non\\n    ///      finalized epochs, one awaiting consensus/dispute and another\\n    ///      accumulating input\\n    function getCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice claim submitted\\n    /// @param epochHash claim being submitted by this epoch\\n    /// @param claimer address of current claimer\\n    /// @param epochNumber number of the epoch being submitted\\n    event Claim(\\n        uint256 indexed epochNumber,\\n        address claimer,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n}\\n\",\"keccak256\":\"0x241c3ee8bb900067903ac836d5f3ee81eca587c7f225ad6df686478a6b27329b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager interface\\npragma solidity >=0.7.0;\\n\\n// NoConflict - No conflicting claims or consensus\\n// Consensus - All validators had equal claims\\n// Conflict - Claim is conflicting with previous one\\nenum Result {\\n    NoConflict,\\n    Consensus,\\n    Conflict\\n}\\n\\n// TODO: What is the incentive for validators to not just copy the first claim that arrived?\\ninterface IValidatorManager {\\n    /// @notice get current claim\\n    function getCurrentClaim() external view returns (bytes32);\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n}\\n\",\"keccak256\":\"0x7eccbaf15dc80cd402459e8c940b0012fd3d3b8d2882fa13798afe92a9ea3b86\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibClaimsMask.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title ClaimsMask library\\npragma solidity >=0.8.8;\\n\\n// ClaimsMask is used to keep track of the number of claims for up to 8 validators\\n// | agreement mask | consensus goal mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n// |     8 bits     |        8 bits       |      30 bits       |      30 bits       | ... |      30 bits       |\\n// In Validator Manager, #claims_validator indicates the #claims the validator has made.\\n// In Fee Manager, #claims_validator indicates the #claims the validator has redeemed. In this case,\\n//      agreement mask and consensus goal mask are not used.\\n\\ntype ClaimsMask is uint256;\\n\\nlibrary LibClaimsMask {\\n    uint256 constant claimsBitLen = 30; // #bits used for each #claims\\n\\n    /// @notice this function creates a new ClaimsMask variable with value _value\\n    /// @param  _value the value following the format of ClaimsMask\\n    function newClaimsMask(uint256 _value) public pure returns (ClaimsMask) {\\n        return ClaimsMask.wrap(_value);\\n    }\\n\\n    /// @notice this function creates a new ClaimsMask variable with the consensus goal mask set,\\n    ///         according to the number of validators\\n    /// @param  _numValidators the number of validators\\n    function newClaimsMaskWithConsensusGoalSet(uint256 _numValidators)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_numValidators <= 8, \\\"up to 8 validators\\\");\\n        uint256 consensusMask = (1 << _numValidators) - 1;\\n        return ClaimsMask.wrap(consensusMask << 240); // 256 - 8 - 8 = 240\\n    }\\n\\n    /// @notice this function returns the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    ///     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager\\n    function getNumClaims(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 bitmask = (1 << claimsBitLen) - 1;\\n        return\\n            (ClaimsMask.unwrap(_claimsMask) >>\\n                (claimsBitLen * _validatorIndex)) & bitmask;\\n    }\\n\\n    /// @notice this function increases the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the increase amount\\n    function increaseNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 currentNum = getNumClaims(_claimsMask, _validatorIndex);\\n        uint256 newNum = currentNum + _value; // overflows checked by default with sol0.8\\n        return setNumClaims(_claimsMask, _validatorIndex, newNum);\\n    }\\n\\n    /// @notice this function sets the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the set value\\n    function setNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        require(_value <= ((1 << claimsBitLen) - 1), \\\"ClaimsMask Overflow\\\");\\n        uint256 bitmask = ~(((1 << claimsBitLen) - 1) <<\\n            (claimsBitLen * _validatorIndex));\\n        uint256 clearedClaimsMask = ClaimsMask.unwrap(_claimsMask) & bitmask;\\n        _claimsMask = ClaimsMask.wrap(\\n            clearedClaimsMask | (_value << (claimsBitLen * _validatorIndex))\\n        );\\n        return _claimsMask;\\n    }\\n\\n    /// @notice get consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function clearAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        uint256 clearedMask = ClaimsMask.unwrap(_claimsMask) & ((1 << 248) - 1); // 256 - 8 = 248\\n        return ClaimsMask.wrap(clearedMask);\\n    }\\n\\n    /// @notice get the entire agreement mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return (ClaimsMask.unwrap(_claimsMask) >> 248); // get the first 8 bits\\n    }\\n\\n    /// @notice check if a validator has already claimed\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function alreadyClaimed(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        // get the first 8 bits. Then & operation on the validator's bit to see if it's set\\n        return\\n            (((ClaimsMask.unwrap(_claimsMask) >> 248) >> _validatorIndex) &\\n                1) != 0;\\n    }\\n\\n    /// @notice set agreement mask for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function setAgreementMask(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 setMask = (ClaimsMask.unwrap(_claimsMask) |\\n            (1 << (248 + _validatorIndex))); // 256 - 8 = 248\\n        return ClaimsMask.wrap(setMask);\\n    }\\n\\n    /// @notice get the entire consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getConsensusGoalMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return ((ClaimsMask.unwrap(_claimsMask) << 8) >> 248); // get the second 8 bits\\n    }\\n\\n    /// @notice remove validator from the ClaimsMask\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function removeValidator(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 claimsMaskValue = ClaimsMask.unwrap(_claimsMask);\\n        // remove validator from agreement bitmask\\n        uint256 zeroMask = ~(1 << (_validatorIndex + 248)); // 256 - 8 = 248\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from consensus goal mask\\n        zeroMask = ~(1 << (_validatorIndex + 240)); // 256 - 8 - 8 = 240\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from #claims\\n        return\\n            setNumClaims(ClaimsMask.wrap(claimsMaskValue), _validatorIndex, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x581915d6dcd3aa9e447f89b8bf902bc4f4a72c40b9e8575e196741a8974ea74a\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibDisputeManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Dispute Manager library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibDisputeManager {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    /// @notice initiates a dispute betweent two players\\n    /// @param claims conflicting claims\\n    /// @param claimers addresses of senders of conflicting claim\\n    /// @dev this is a mock implementation that just gives the win\\n    ///      to the address in the first posititon of claimers array\\n    function initiateDispute(\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        rollupsDS.resolveDispute(claimers[0], claimers[1], claims[0]);\\n    }\\n}\\n\",\"keccak256\":\"0x7d3fdb94a17c7f61ef8f6431f42eaa307b30398e3c24093c0526f449752563c9\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibFeeManager.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Fee Manager library\\npragma solidity ^0.8.0;\\n\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\nimport {IBank} from \\\"../IBank.sol\\\";\\n\\nlibrary LibFeeManager {\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n    using LibFeeManager for LibFeeManager.DiamondStorage;\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"FeeManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        address owner; // owner of Fee Manager\\n        uint256 feePerClaim;\\n        IBank bank; // bank that holds the tokens to pay validators\\n        bool lock; // reentrancy lock\\n        // A bit set used for up to 8 validators.\\n        // The first 16 bits are not used to keep compatibility with the validator manager contract.\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // |     not used    | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     16 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask numClaimsRedeemed;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function onlyOwner(DiamondStorage storage ds) internal view {\\n        require(ds.owner == msg.sender, \\\"caller is not the owner\\\");\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that's redeemable for the validator\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator\\n    function numClaimsRedeemable(DiamondStorage storage ds, address _validator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(_validator != address(0), \\\"address should not be 0\\\");\\n\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        uint256 totalClaims = validatorManagerDS.claimsMask.getNumClaims(\\n            valIndex\\n        );\\n        uint256 redeemedClaims = ds.numClaimsRedeemed.getNumClaims(valIndex);\\n\\n        // underflow checked by default with sol0.8\\n        // which means if the validator is removed, calling this function will\\n        // either return 0 or revert\\n        return totalClaims - redeemedClaims;\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that has been redeemed for the validator\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator\\n    function getNumClaimsRedeemed(DiamondStorage storage ds, address _validator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(_validator != address(0), \\\"address should not be 0\\\");\\n\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        uint256 redeemedClaims = ds.numClaimsRedeemed.getNumClaims(valIndex);\\n\\n        return redeemedClaims;\\n    }\\n\\n    /// @notice contract owner can reset the value of fee per claim\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _value the new value of fee per claim\\n    function resetFeePerClaim(DiamondStorage storage ds, uint256 _value)\\n        internal\\n    {\\n        // before resetting the feePerClaim, pay fees for all validators as per current rates\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        for (uint256 i; i < validatorManagerDS.maxNumValidators; i++) {\\n            address validator = validatorManagerDS.validators[i];\\n            if (\\n                validator != address(0) && ds.numClaimsRedeemable(validator) > 0\\n            ) {\\n                ds.redeemFee(validator);\\n            }\\n        }\\n        ds.feePerClaim = _value;\\n        emit FeePerClaimReset(_value);\\n    }\\n\\n    /// @notice this function can be called to redeem fees for validators\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator that is redeeming\\n    function redeemFee(DiamondStorage storage ds, address _validator) internal {\\n        // follow the Checks-Effects-Interactions pattern for security\\n\\n        // ** checks **\\n        uint256 nowRedeemingClaims = ds.numClaimsRedeemable(_validator);\\n        require(nowRedeemingClaims > 0, \\\"nothing to redeem yet\\\");\\n\\n        // ** effects **\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        ds.numClaimsRedeemed = ds.numClaimsRedeemed.increaseNumClaims(\\n            valIndex,\\n            nowRedeemingClaims\\n        );\\n\\n        // ** interactions **\\n        uint256 feesToSend = nowRedeemingClaims * ds.feePerClaim; // number of erc20 tokens to send\\n        ds.bank.transferTokens(_validator, feesToSend); // will revert if transfer fails\\n        // emit the number of claimed being redeemed, instead of the amount of tokens\\n        emit FeeRedeemed(_validator, nowRedeemingClaims);\\n    }\\n\\n    /// @notice emitted on resetting feePerClaim\\n    event FeePerClaimReset(uint256 value);\\n\\n    /// @notice emitted on ERC20 funds redeemed by validator\\n    event FeeRedeemed(address validator, uint256 claims);\\n}\\n\",\"keccak256\":\"0x60b7934317b9fdbadbfd616950217e8f8e83b823002f311ef247d04b93ab60de\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibInput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibInput {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Input.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // always needs to keep track of two input boxes:\\n        // 1 for the input accumulation of next epoch\\n        // and 1 for the messages during current epoch. To save gas we alternate\\n        // between inputBox0 and inputBox1\\n        bytes32[] inputBox0;\\n        bytes32[] inputBox1;\\n        uint256 inputDriveSize; // size of input flashdrive\\n        uint256 currentInputBox;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice get input inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @param index index of input inside that inbox\\n    /// @return hash of input at index index\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getInput(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1[index] : ds.inputBox0[index];\\n    }\\n\\n    /// @notice get number of inputs inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @return number of inputs on that input box\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getNumberOfInputs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1.length : ds.inputBox0.length;\\n    }\\n\\n    /// @notice add input to processed by next epoch\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, msg.sender);\\n    }\\n\\n    /// @notice add internal input to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInternalInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, address(this));\\n    }\\n\\n    /// @notice add input from a specific sender to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @param sender input sender address\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInputFromSender(\\n        DiamondStorage storage ds,\\n        bytes memory input,\\n        address sender\\n    ) internal returns (bytes32) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n\\n        require(input.length <= ds.inputDriveSize, \\\"input len: [0,driveSize]\\\");\\n\\n        // notifyInput returns true if that input\\n        // belongs to a new epoch\\n        if (rollupsDS.notifyInput()) {\\n            swapInputBox(ds);\\n        }\\n\\n        // points to correct inputBox\\n        bytes32[] storage inputBox = ds.currentInputBox == 0\\n            ? ds.inputBox0\\n            : ds.inputBox1;\\n\\n        // get current epoch index\\n        uint256 currentEpoch = rollupsDS.getCurrentEpoch();\\n\\n        // keccak 64 bytes into 32 bytes\\n        bytes32 keccakMetadata = keccak256(\\n            abi.encode(\\n                sender,\\n                block.number,\\n                block.timestamp,\\n                currentEpoch, // epoch index\\n                inputBox.length // input index\\n            )\\n        );\\n\\n        bytes32 keccakInput = keccak256(input);\\n\\n        bytes32 inputHash = keccak256(abi.encode(keccakMetadata, keccakInput));\\n\\n        // add input to correct inbox\\n        inputBox.push(inputHash);\\n\\n        emit InputAdded(\\n            currentEpoch,\\n            inputBox.length - 1,\\n            sender,\\n            block.timestamp,\\n            input\\n        );\\n\\n        return inputHash;\\n    }\\n\\n    /// @notice called when a new input accumulation phase begins\\n    ///         swap inbox to receive inputs for upcoming epoch\\n    /// @param ds diamond storage pointer\\n    function onNewInputAccumulation(DiamondStorage storage ds) internal {\\n        swapInputBox(ds);\\n    }\\n\\n    /// @notice called when a new epoch begins, clears deprecated inputs\\n    /// @param ds diamond storage pointer\\n    function onNewEpoch(DiamondStorage storage ds) internal {\\n        // clear input box for new inputs\\n        // the current input box should be accumulating inputs\\n        // for the new epoch already. So we clear the other one.\\n        ds.currentInputBox == 0 ? delete ds.inputBox1 : delete ds.inputBox0;\\n    }\\n\\n    /// @notice changes current input box\\n    /// @param ds diamond storage pointer\\n    function swapInputBox(DiamondStorage storage ds) internal {\\n        ds.currentInputBox = (ds.currentInputBox == 0) ? 1 : 0;\\n    }\\n\\n    /// @notice input added\\n    /// @param epochNumber which epoch this input belongs to\\n    /// @param inputIndex index of the input just added\\n    /// @param sender msg.sender\\n    /// @param timestamp block.timestamp\\n    /// @param input input data\\n    event InputAdded(\\n        uint256 indexed epochNumber,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        uint256 timestamp,\\n        bytes input\\n    );\\n}\\n\",\"keccak256\":\"0x9fec6d72c872e8f7f3adc79fa2bc5de8396d6ae97e2e23817e780e7d7a6cfaea\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibOutput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Output library\\npragma solidity ^0.8.0;\\n\\nlibrary LibOutput {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Output.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        mapping(uint256 => uint256) voucherBitmask;\\n        bytes32[] epochHashes;\\n        bool lock; //reentrancy lock\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice to be called when an epoch is finalized\\n    /// @param ds diamond storage pointer\\n    /// @param epochHash hash of finalized epoch\\n    /// @dev an epoch being finalized means that its vouchers can be called\\n    function onNewEpoch(DiamondStorage storage ds, bytes32 epochHash) internal {\\n        ds.epochHashes.push(epochHash);\\n    }\\n\\n    /// @notice get number of finalized epochs\\n    /// @param ds diamond storage pointer\\n    function getNumberOfFinalizedEpochs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.epochHashes.length;\\n    }\\n}\\n\",\"keccak256\":\"0xd0f88e13210013e9d5bde03399bb76304d6ab4e1f06d01c7e3525adc87a2d65e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups library\\npragma solidity ^0.8.0;\\n\\nimport {Phase} from \\\"../interfaces/IRollups.sol\\\";\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\nimport {LibOutput} from \\\"../libraries/LibOutput.sol\\\";\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibDisputeManager} from \\\"../libraries/LibDisputeManager.sol\\\";\\n\\nlibrary LibRollups {\\n    using LibInput for LibInput.DiamondStorage;\\n    using LibOutput for LibOutput.DiamondStorage;\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Rollups.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 templateHash; // state hash of the cartesi machine at t0\\n        uint32 inputDuration; // duration of input accumulation phase in seconds\\n        uint32 challengePeriod; // duration of challenge period in seconds\\n        uint32 inputAccumulationStart; // timestamp when current input accumulation phase started\\n        uint32 sealingEpochTimestamp; // timestamp on when a proposed epoch (claim) becomes challengeable\\n        uint32 currentPhase_int; // current phase in integer form\\n    }\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when new input arrives, manages the phase changes\\n    /// @param ds diamond storage pointer\\n    /// @dev can only be called by input contract\\n    function notifyInput(DiamondStorage storage ds) internal returns (bool) {\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n        uint256 inputAccumulationStart = ds.inputAccumulationStart;\\n        uint256 inputDuration = ds.inputDuration;\\n\\n        if (\\n            currentPhase == Phase.InputAccumulation &&\\n            block.timestamp > inputAccumulationStart + inputDuration\\n        ) {\\n            ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n            emit PhaseChange(Phase.AwaitingConsensus);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice called when a dispute is resolved by the dispute manager\\n    /// @param ds diamond storage pointer\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    function resolveDispute(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    ) internal {\\n        Result result;\\n        bytes32[2] memory claims;\\n        address payable[2] memory claimers;\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        (result, claims, claimers) = validatorManagerDS.onDisputeEnd(\\n            winner,\\n            loser,\\n            winningClaim\\n        );\\n\\n        // restart challenge period\\n        ds.sealingEpochTimestamp = uint32(block.timestamp);\\n\\n        emit ResolveDispute(winner, loser, winningClaim);\\n        resolveValidatorResult(ds, result, claims, claimers);\\n    }\\n\\n    /// @notice resolve results returned by validator manager\\n    /// @param ds diamond storage pointer\\n    /// @param result result from claim or dispute operation\\n    /// @param claims array of claims in case of new conflict\\n    /// @param claimers array of claimers in case of new conflict\\n    function resolveValidatorResult(\\n        DiamondStorage storage ds,\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        if (result == Result.NoConflict) {\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingConsensus) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n                emit PhaseChange(Phase.AwaitingConsensus);\\n            }\\n        } else if (result == Result.Consensus) {\\n            startNewEpoch(ds);\\n        } else {\\n            // for the case when result == Result.Conflict\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingDispute) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingDispute);\\n                emit PhaseChange(Phase.AwaitingDispute);\\n            }\\n            LibDisputeManager.initiateDispute(claims, claimers);\\n        }\\n    }\\n\\n    /// @notice starts new epoch\\n    /// @param ds diamond storage pointer\\n    function startNewEpoch(DiamondStorage storage ds) internal {\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        // reset input accumulation start and deactivate challenge period start\\n        ds.currentPhase_int = uint32(Phase.InputAccumulation);\\n        emit PhaseChange(Phase.InputAccumulation);\\n        ds.inputAccumulationStart = uint32(block.timestamp);\\n        ds.sealingEpochTimestamp = type(uint32).max;\\n\\n        bytes32 finalClaim = validatorManagerDS.onNewEpoch();\\n\\n        // emit event before finalized epoch is added to the Output storage\\n        emit FinalizeEpoch(outputDS.getNumberOfFinalizedEpochs(), finalClaim);\\n\\n        outputDS.onNewEpoch(finalClaim);\\n        inputDS.onNewEpoch();\\n    }\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @param ds diamond storage pointer\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two non finalized epochs,\\n    ///      one awaiting consensus/dispute and another accumulating input\\n    function getCurrentEpoch(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n\\n        uint256 finalizedEpochs = outputDS.getNumberOfFinalizedEpochs();\\n\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n\\n        return\\n            currentPhase == Phase.InputAccumulation\\n                ? finalizedEpochs\\n                : finalizedEpochs + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x04f72881c6032af40537ac14ff3720df2899a5746a42abd841b2292d66db11ca\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager library\\npragma solidity ^0.8.0;\\n\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\n\\nlibrary LibValidatorManager {\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"ValidatorManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 currentClaim; // current claim - first claim of this epoch\\n        address payable[] validators; // up to 8 validators\\n        uint256 maxNumValidators; // the maximum number of validators, set in the constructor\\n        // A bit set used for up to 8 validators.\\n        // The first 8 bits are used to indicate whom supports the current claim\\n        // The second 8 bits are used to indicate those should have claimed in order to reach consensus\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // | agreement mask | consensus mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     8 bits     |     8 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask claimsMask;\\n    }\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when a dispute ends in rollups\\n    /// @param ds diamond storage pointer\\n    /// @param winner address of dispute winner\\n    /// @param loser address of dispute loser\\n    /// @param winningClaim the winnning claim\\n    /// @return result of dispute being finished\\n    function onDisputeEnd(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        removeValidator(ds, loser);\\n\\n        if (winningClaim == ds.currentClaim) {\\n            // first claim stood, dont need to update the bitmask\\n            return\\n                isConsensus(ds)\\n                    ? emitDisputeEndedAndReturn(\\n                        Result.Consensus,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    )\\n                    : emitDisputeEndedAndReturn(\\n                        Result.NoConflict,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    );\\n        }\\n\\n        // if first claim lost, and other validators have agreed with it\\n        // there is a new dispute to be played\\n        if (ds.claimsMask.getAgreementMask() != 0) {\\n            return\\n                emitDisputeEndedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, winningClaim],\\n                    [getClaimerOfCurrentClaim(ds), winner]\\n                );\\n        }\\n        // else there are no valdiators that agree with losing claim\\n        // we can update current claim and check for consensus in case\\n        // the winner is the only validator left\\n        ds.currentClaim = winningClaim;\\n        updateClaimAgreementMask(ds, winner);\\n        return\\n            isConsensus(ds)\\n                ? emitDisputeEndedAndReturn(\\n                    Result.Consensus,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                )\\n                : emitDisputeEndedAndReturn(\\n                    Result.NoConflict,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                );\\n    }\\n\\n    /// @notice called when a new epoch starts\\n    /// @param ds diamond storage pointer\\n    /// @return current claim\\n    function onNewEpoch(DiamondStorage storage ds) internal returns (bytes32) {\\n        // reward validators who has made the correct claim by increasing their #claims\\n        claimFinalizedIncreaseCounts(ds);\\n\\n        bytes32 tmpClaim = ds.currentClaim;\\n\\n        // clear current claim\\n        ds.currentClaim = bytes32(0);\\n        // clear validator agreement bit mask\\n        ds.claimsMask = ds.claimsMask.clearAgreementMask();\\n\\n        emit NewEpoch(tmpClaim);\\n        return tmpClaim;\\n    }\\n\\n    /// @notice called when a claim is received by rollups\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of sender of that claim\\n    /// @param claim claim received by rollups\\n    /// @return result of claim, Consensus | NoConflict | Conflict\\n    /// @return [currentClaim, conflicting claim] if there is Conflict\\n    ///         [currentClaim, bytes32(0)] if there is Consensus or NoConflcit\\n    /// @return [claimer1, claimer2] if there is  Conflcit\\n    ///         [claimer1, address(0)] if there is Consensus or NoConflcit\\n    function onClaim(\\n        DiamondStorage storage ds,\\n        address payable sender,\\n        bytes32 claim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        require(claim != bytes32(0), \\\"empty claim\\\");\\n        require(isValidator(ds, sender), \\\"sender not allowed\\\");\\n\\n        // require the validator hasn't claimed in the same epoch before\\n        uint256 index = getValidatorIndex(ds, sender);\\n        require(\\n            !ds.claimsMask.alreadyClaimed(index),\\n            \\\"sender had claimed in this epoch before\\\"\\n        );\\n\\n        // cant return because a single claim might mean consensus\\n        if (ds.currentClaim == bytes32(0)) {\\n            ds.currentClaim = claim;\\n        }\\n\\n        if (claim != ds.currentClaim) {\\n            return\\n                emitClaimReceivedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, claim],\\n                    [getClaimerOfCurrentClaim(ds), sender]\\n                );\\n        }\\n        updateClaimAgreementMask(ds, sender);\\n\\n        return\\n            isConsensus(ds)\\n                ? emitClaimReceivedAndReturn(\\n                    Result.Consensus,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                )\\n                : emitClaimReceivedAndReturn(\\n                    Result.NoConflict,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                );\\n    }\\n\\n    /// @notice emits dispute ended event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitDisputeEndedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit DisputeEnded(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice emits claim received event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitClaimReceivedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit ClaimReceived(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice only call this function when a claim has been finalized\\n    ///         Either a consensus has been reached or challenge period has past\\n    /// @param ds pointer to diamond storage\\n    function claimFinalizedIncreaseCounts(DiamondStorage storage ds) internal {\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            // if a validator agrees with the current claim\\n            if ((agreementMask & (1 << i)) != 0) {\\n                // increase #claims by 1\\n                ds.claimsMask = ds.claimsMask.increaseNumClaims(i, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice removes a validator\\n    /// @param ds diamond storage pointer\\n    /// @param validator address of validator to be removed\\n    function removeValidator(DiamondStorage storage ds, address validator)\\n        internal\\n    {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (validator == ds.validators[i]) {\\n                // put address(0) in validators position\\n                ds.validators[i] = payable(0);\\n                // remove the validator from claimsMask\\n                ds.claimsMask = ds.claimsMask.removeValidator(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice check if consensus has been reached\\n    /// @param ds pointer to diamond storage\\n    function isConsensus(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        ClaimsMask claimsMask = ds.claimsMask;\\n        return\\n            claimsMask.getAgreementMask() == claimsMask.getConsensusGoalMask();\\n    }\\n\\n    /// @notice get one of the validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @return validator that agreed with current claim\\n    function getClaimerOfCurrentClaim(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (address payable)\\n    {\\n        // TODO: we are always getting the first validator\\n        // on the array that agrees with the current claim to enter a dispute\\n        // should this be random?\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (agreementMask & (1 << i) != 0) {\\n                return ds.validators[i];\\n            }\\n        }\\n        revert(\\\"Agreeing validator not found\\\");\\n    }\\n\\n    /// @notice updates mask of validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of validator that will be included in mask\\n    function updateClaimAgreementMask(\\n        DiamondStorage storage ds,\\n        address payable sender\\n    ) internal {\\n        uint256 validatorIndex = getValidatorIndex(ds, sender);\\n        ds.claimsMask = ds.claimsMask.setAgreementMask(validatorIndex);\\n    }\\n\\n    /// @notice check if the sender is a validator\\n    /// @param ds pointer to diamond storage\\n    /// @param sender sender address\\n    function isValidator(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice find the validator and return the index or revert\\n    /// @param ds pointer to diamond storage\\n    /// @param sender validator address\\n    /// @return validator index or revert\\n    function getValidatorIndex(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return i;\\n        }\\n        revert(\\\"validator not found\\\");\\n    }\\n\\n    /// @notice get number of claims the sender has made\\n    /// @param ds pointer to diamond storage\\n    /// @param _sender validator address\\n    /// @return #claims\\n    function getNumberOfClaimsByAddress(\\n        DiamondStorage storage ds,\\n        address payable _sender\\n    ) internal view returns (uint256) {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (_sender == ds.validators[i]) {\\n                return getNumberOfClaimsByIndex(ds, i);\\n            }\\n        }\\n        // if validator not found\\n        return 0;\\n    }\\n\\n    /// @notice get number of claims by the index in the validator set\\n    /// @param ds pointer to diamond storage\\n    /// @param index the index in validator set\\n    /// @return #claims\\n    function getNumberOfClaimsByIndex(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.claimsMask.getNumClaims(index);\\n    }\\n\\n    /// @notice get the maximum number of validators defined in validator manager\\n    /// @param ds pointer to diamond storage\\n    /// @return the maximum number of validators\\n    function getMaxNumValidators(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.maxNumValidators;\\n    }\\n}\\n\",\"keccak256\":\"0xa25792dbbddcb4f5ec3ef71e463e2df9153a90fecfa4b2cd81e03a6a06a45e83\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "events": {
      "ClaimReceived(uint8,bytes32[2],address[2])": {
        "notice": "emitted on Claim received"
      },
      "DisputeEnded(uint8,bytes32[2],address[2])": {
        "notice": "emitted on Dispute end"
      },
      "NewEpoch(bytes32)": {
        "notice": "emitted on new Epoch"
      }
    },
    "kind": "user",
    "methods": {
      "_onDisputeEnd(address,address,bytes32)": {
        "notice": "called when a dispute ends in rollups"
      },
      "_onNewEpochVM()": {
        "notice": "called when a new epoch starts"
      }
    },
    "version": 1
  }
}