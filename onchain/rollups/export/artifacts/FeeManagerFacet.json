{
  "contractName": "FeeManagerFacet",
  "sourceName": "contracts/facets/FeeManagerFacet.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FeePerClaimReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claims",
          "type": "uint256"
        }
      ],
      "name": "FeeRedeemed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getFeeManagerBank",
      "outputs": [
        {
          "internalType": "contract IBank",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "getNumClaimsRedeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "numClaimsRedeemable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "redeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "resetFeePerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506109d2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80636e964cea1461005c5780637a5bf67c1461009b578063a859b983146100b0578063de7a8d11146100d1578063e8f56171146100e4575b600080fd5b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc75546040516001600160a01b0390911681526020015b60405180910390f35b6100ae6100a9366004610886565b6100f7565b005b6100c36100be36600461089f565b61011d565b604051908152602001610092565b6100ae6100df36600461089f565b61013f565b6100c36100f236600461089f565b610210565b60008051602061097d83398151915261010f8161022b565b6101198183610287565b5050565b600060008051602061097d833981519152610138818461034d565b9392505050565b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc755460008051602061097d83398151915290600160a01b900460ff16156101c65760405162461bcd60e51b81526020600482015260166024820152751c99595b9d1c985b98de481b9bdd08185b1b1bddd95960521b60448201526064015b60405180910390fd5b60028101805460ff60a01b1916600160a01b17905560006101f260008051602061097d83398151915290565b90506101fe818461044d565b50600201805460ff60a01b1916905550565b600060008051602061097d8339815191526101388184610615565b80546001600160a01b031633146102845760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016101bd565b50565b60008051602061095d83398151915260005b816002015481101561030d5760008260010182815481106102bc576102bc6108c8565b6000918252602090912001546001600160a01b0316905080158015906102eb575060006102e98683610615565b115b156102fa576102fa858261044d565b5080610305816108f4565b915050610299565b50600183018290556040518281527fd454bae44ce74e91cf62780bdb9278052c00cfd79c13003d5761b400475b12f69060200160405180910390a1505050565b60006001600160a01b03821661039f5760405162461bcd60e51b81526020600482015260176024820152760616464726573732073686f756c64206e6f74206265203604c1b60448201526064016101bd565b60008051602061095d83398151915260006103ba82856107a7565b6003860154604051632a31763d60e21b815260048101919091526024810182905290915060009073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063a8c5d8f490604401602060405180830381865af415801561041d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610441919061090d565b93505050505b92915050565b60006104598383610615565b9050600081116104a35760405162461bcd60e51b81526020600482015260156024820152741b9bdd1a1a5b99c81d1bc81c995919595b481e595d605a1b60448201526064016101bd565b60008051602061095d83398151915260006104be82856107a7565b60038601546040516314bc74ad60e21b81526004810191909152602481018290526044810185905290915073__$cf2fb72623b6ba225c3cfc459aec70b905$__906352f1d2b490606401602060405180830381865af4158015610525573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610549919061090d565b600386015560018501546000906105609085610926565b600287015460405163bec3fa1760e01b81526001600160a01b0388811660048301526024820184905292935091169063bec3fa1790604401600060405180830381600087803b1580156105b257600080fd5b505af11580156105c6573d6000803e3d6000fd5b5050604080516001600160a01b0389168152602081018890527f0544e8b0e3ef3679366e27df87030668812cb3284d1acccfb1eb8a0e7b26ead3935001905060405180910390a1505050505050565b60006001600160a01b0382166106675760405162461bcd60e51b81526020600482015260176024820152760616464726573732073686f756c64206e6f74206265203604c1b60448201526064016101bd565b60008051602061095d833981519152600061068282856107a7565b6003830154604051632a31763d60e21b815260048101919091526024810182905290915060009073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063a8c5d8f490604401602060405180830381865af41580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610709919061090d565b6003870154604051632a31763d60e21b815260048101919091526024810184905290915060009073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063a8c5d8f490604401602060405180830381865af415801561076c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610790919061090d565b905061079c8183610945565b979650505050505050565b60006001600160a01b0382166107eb5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b60448201526064016101bd565b60005b60018401548110156108475783600101818154811061080f5761080f6108c8565b6000918252602090912001546001600160a01b0390811690841603610835579050610447565b8061083f816108f4565b9150506107ee565b5060405162461bcd60e51b81526020600482015260136024820152721d985b1a59185d1bdc881b9bdd08199bdd5b99606a1b60448201526064016101bd565b60006020828403121561089857600080fd5b5035919050565b6000602082840312156108b157600080fd5b81356001600160a01b038116811461013857600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610906576109066108de565b5060010190565b60006020828403121561091f57600080fd5b5051919050565b6000816000190483118215151615610940576109406108de565b500290565b600082821015610957576109576108de565b50039056fe8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fc844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc73a2646970667358221220ef2ff7da7bc41e43a1b034c380de984aa4f6c9927180135e5fe67cb3bab534b464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80636e964cea1461005c5780637a5bf67c1461009b578063a859b983146100b0578063de7a8d11146100d1578063e8f56171146100e4575b600080fd5b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc75546040516001600160a01b0390911681526020015b60405180910390f35b6100ae6100a9366004610886565b6100f7565b005b6100c36100be36600461089f565b61011d565b604051908152602001610092565b6100ae6100df36600461089f565b61013f565b6100c36100f236600461089f565b610210565b60008051602061097d83398151915261010f8161022b565b6101198183610287565b5050565b600060008051602061097d833981519152610138818461034d565b9392505050565b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc755460008051602061097d83398151915290600160a01b900460ff16156101c65760405162461bcd60e51b81526020600482015260166024820152751c99595b9d1c985b98de481b9bdd08185b1b1bddd95960521b60448201526064015b60405180910390fd5b60028101805460ff60a01b1916600160a01b17905560006101f260008051602061097d83398151915290565b90506101fe818461044d565b50600201805460ff60a01b1916905550565b600060008051602061097d8339815191526101388184610615565b80546001600160a01b031633146102845760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016101bd565b50565b60008051602061095d83398151915260005b816002015481101561030d5760008260010182815481106102bc576102bc6108c8565b6000918252602090912001546001600160a01b0316905080158015906102eb575060006102e98683610615565b115b156102fa576102fa858261044d565b5080610305816108f4565b915050610299565b50600183018290556040518281527fd454bae44ce74e91cf62780bdb9278052c00cfd79c13003d5761b400475b12f69060200160405180910390a1505050565b60006001600160a01b03821661039f5760405162461bcd60e51b81526020600482015260176024820152760616464726573732073686f756c64206e6f74206265203604c1b60448201526064016101bd565b60008051602061095d83398151915260006103ba82856107a7565b6003860154604051632a31763d60e21b815260048101919091526024810182905290915060009073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063a8c5d8f490604401602060405180830381865af415801561041d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610441919061090d565b93505050505b92915050565b60006104598383610615565b9050600081116104a35760405162461bcd60e51b81526020600482015260156024820152741b9bdd1a1a5b99c81d1bc81c995919595b481e595d605a1b60448201526064016101bd565b60008051602061095d83398151915260006104be82856107a7565b60038601546040516314bc74ad60e21b81526004810191909152602481018290526044810185905290915073__$cf2fb72623b6ba225c3cfc459aec70b905$__906352f1d2b490606401602060405180830381865af4158015610525573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610549919061090d565b600386015560018501546000906105609085610926565b600287015460405163bec3fa1760e01b81526001600160a01b0388811660048301526024820184905292935091169063bec3fa1790604401600060405180830381600087803b1580156105b257600080fd5b505af11580156105c6573d6000803e3d6000fd5b5050604080516001600160a01b0389168152602081018890527f0544e8b0e3ef3679366e27df87030668812cb3284d1acccfb1eb8a0e7b26ead3935001905060405180910390a1505050505050565b60006001600160a01b0382166106675760405162461bcd60e51b81526020600482015260176024820152760616464726573732073686f756c64206e6f74206265203604c1b60448201526064016101bd565b60008051602061095d833981519152600061068282856107a7565b6003830154604051632a31763d60e21b815260048101919091526024810182905290915060009073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063a8c5d8f490604401602060405180830381865af41580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610709919061090d565b6003870154604051632a31763d60e21b815260048101919091526024810184905290915060009073__$cf2fb72623b6ba225c3cfc459aec70b905$__9063a8c5d8f490604401602060405180830381865af415801561076c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610790919061090d565b905061079c8183610945565b979650505050505050565b60006001600160a01b0382166107eb5760405162461bcd60e51b815260206004820152600960248201526806164647265737320360bc1b60448201526064016101bd565b60005b60018401548110156108475783600101818154811061080f5761080f6108c8565b6000918252602090912001546001600160a01b0390811690841603610835579050610447565b8061083f816108f4565b9150506107ee565b5060405162461bcd60e51b81526020600482015260136024820152721d985b1a59185d1bdc881b9bdd08199bdd5b99606a1b60448201526064016101bd565b60006020828403121561089857600080fd5b5035919050565b6000602082840312156108b157600080fd5b81356001600160a01b038116811461013857600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610906576109066108de565b5060010190565b60006020828403121561091f57600080fd5b5051919050565b6000816000190483118215151615610940576109406108de565b500290565b600082821015610957576109576108de565b50039056fe8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fc844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc73a2646970667358221220ef2ff7da7bc41e43a1b034c380de984aa4f6c9927180135e5fe67cb3bab534b464736f6c634300080d0033",
  "linkReferences": {
    "contracts/libraries/LibClaimsMask.sol": {
      "LibClaimsMask": [
        {
          "length": 20,
          "start": 1027
        },
        {
          "length": 20,
          "start": 1291
        },
        {
          "length": 20,
          "start": 1739
        },
        {
          "length": 20,
          "start": 1874
        }
      ]
    }
  },
  "deployedLinkReferences": {
    "contracts/libraries/LibClaimsMask.sol": {
      "LibClaimsMask": [
        {
          "length": 20,
          "start": 995
        },
        {
          "length": 20,
          "start": 1259
        },
        {
          "length": 20,
          "start": 1707
        },
        {
          "length": 20,
          "start": 1842
        }
      ]
    }
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getNumClaimsRedeemed(address)": {
        "params": {
          "_validator": "address of the validator"
        }
      },
      "numClaimsRedeemable(address)": {
        "params": {
          "_validator": "address of the validator"
        }
      },
      "redeemFee(address)": {
        "params": {
          "_validator": "address of the validator that is redeeming"
        }
      },
      "resetFeePerClaim(uint256)": {
        "params": {
          "_value": "the new value of fee per claim"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {
        "contracts/libraries/LibClaimsMask.sol": {
          "LibClaimsMask": [
            {
              "length": 20,
              "start": 1027
            },
            {
              "length": 20,
              "start": 1291
            },
            {
              "length": 20,
              "start": 1739
            },
            {
              "length": 20,
              "start": 1874
            }
          ]
        }
      },
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D2 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E964CEA EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x7A5BF67C EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0xA859B983 EQ PUSH2 0xB0 JUMPI DUP1 PUSH4 0xDE7A8D11 EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0xE8F56171 EQ PUSH2 0xE4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC75 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAE PUSH2 0xA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x886 JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC3 PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x11D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92 JUMP JUMPDEST PUSH2 0xAE PUSH2 0xDF CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x13F JUMP JUMPDEST PUSH2 0xC3 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x210 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x10F DUP2 PUSH2 0x22B JUMP JUMPDEST PUSH2 0x119 DUP2 DUP4 PUSH2 0x287 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x138 DUP2 DUP5 PUSH2 0x34D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC75 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x1C99595B9D1C985B98DE481B9BDD08185B1B1BDDD959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x1F2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FE DUP2 DUP5 PUSH2 0x44D JUMP JUMPDEST POP PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x138 DUP2 DUP5 PUSH2 0x615 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x284 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x2 ADD SLOAD DUP2 LT ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP3 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2BC JUMPI PUSH2 0x2BC PUSH2 0x8C8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2EB JUMPI POP PUSH1 0x0 PUSH2 0x2E9 DUP7 DUP4 PUSH2 0x615 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x2FA JUMPI PUSH2 0x2FA DUP6 DUP3 PUSH2 0x44D JUMP JUMPDEST POP DUP1 PUSH2 0x305 DUP2 PUSH2 0x8F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xD454BAE44CE74E91CF62780BDB9278052C00CFD79C13003D5761B400475B12F6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x39F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x616464726573732073686F756C64206E6F74206265203 PUSH1 0x4C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x3BA DUP3 DUP6 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2A31763D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA8C5D8F4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x41D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x441 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x459 DUP4 DUP4 PUSH2 0x615 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x4A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1B9BDD1A1A5B99C81D1BC81C995919595B481E595D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x4BE DUP3 DUP6 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x14BC74AD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0x52F1D2B4 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x525 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x560 SWAP1 DUP6 PUSH2 0x926 JUMP JUMPDEST PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xBEC3FA17 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0xBEC3FA17 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH32 0x544E8B0E3EF3679366E27DF87030668812CB3284D1ACCCFB1EB8A0E7B26EAD3 SWAP4 POP ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x616464726573732073686F756C64206E6F74206265203 PUSH1 0x4C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x682 DUP3 DUP6 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2A31763D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA8C5D8F4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x6E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x709 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2A31763D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA8C5D8F4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x76C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x790 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST SWAP1 POP PUSH2 0x79C DUP2 DUP4 PUSH2 0x945 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0x847 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x80F JUMPI PUSH2 0x80F PUSH2 0x8C8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0x835 JUMPI SWAP1 POP PUSH2 0x447 JUMP JUMPDEST DUP1 PUSH2 0x83F DUP2 PUSH2 0x8F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D985B1A59185D1BDC881B9BDD08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x906 JUMPI PUSH2 0x906 PUSH2 0x8DE JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x940 JUMPI PUSH2 0x940 PUSH2 0x8DE JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x957 JUMPI PUSH2 0x957 PUSH2 0x8DE JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID DUP11 0xB3 PUSH32 0xEF2B2E34C4B62FF9948EE661CDCF34E209D7C20F4D1F6E83085E93B1FC844E22 MSTORE SWAP6 NUMBER 0xD6 0xE7 0x22 0xC6 SELFBALANCE PUSH18 0x71DD50FFE5B412198B92CD9AEEA62BBFABE4 0xCC PUSH20 0xA2646970667358221220EF2FF7DA7BC41E43A1B0 CALLVALUE 0xC3 DUP1 0xDE SWAP9 0x4A LOG4 0xF6 0xC9 SWAP3 PUSH18 0x80135E5FE67CB3BAB534B464736F6C634300 ADDMOD 0xD STOP CALLER ",
      "sourceMap": "830:2427:19:-:0;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@diamondStorage_7145": {
          "entryPoint": null,
          "id": 7145,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_8312": {
          "entryPoint": null,
          "id": 8312,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getFeeManagerBank_4024": {
          "entryPoint": null,
          "id": 4024,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getNumClaimsRedeemed_3950": {
          "entryPoint": 285,
          "id": 3950,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getNumClaimsRedeemed_7267": {
          "entryPoint": 845,
          "id": 7267,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getValidatorIndex_9006": {
          "entryPoint": 1959,
          "id": 9006,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@numClaimsRedeemable_3926": {
          "entryPoint": 528,
          "id": 3926,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@numClaimsRedeemable_7219": {
          "entryPoint": 1557,
          "id": 7219,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@onlyOwner_7161": {
          "entryPoint": 555,
          "id": 7161,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@redeemFee_4003": {
          "entryPoint": 319,
          "id": 4003,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@redeemFee_7408": {
          "entryPoint": 1101,
          "id": 7408,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@resetFeePerClaim_3978": {
          "entryPoint": 247,
          "id": 3978,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@resetFeePerClaim_7336": {
          "entryPoint": 647,
          "id": 7336,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 2207,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 2182,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256_fromMemory": {
          "entryPoint": 2317,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_fromMemory": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_IBank_$2336__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3c131d0f023860570bf6ce3362d6e3a5112659914d10af68ebc10dcae76e4018__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_4777d7a1c17c9bec22c6ead85ee3f61ac3304c78af7a41068f59aeb30c0b3c49__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_6eebed8cbdd0e88f84da4ab56741511f62e6fb6adf1ec99a4f3cee8b44af3abd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 2342,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 2373,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "increment_t_uint256": {
          "entryPoint": 2292,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 2270,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 2248,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:5031:49",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:49",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "129:102:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "139:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "151:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "162:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "147:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "147:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "139:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "181:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "196:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "212:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "217:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "208:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "208:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "221:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "204:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "204:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "192:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "192:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "174:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "174:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "174:51:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_IBank_$2336__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "98:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "109:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "120:4:49",
                    "type": ""
                  }
                ],
                "src": "14:217:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "306:110:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "352:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "361:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "364:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "354:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "354:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "354:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "327:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "336:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "323:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "323:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "348:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "319:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "319:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "316:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "377:33:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "400:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "387:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "387:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "377:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "272:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "283:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "295:6:49",
                    "type": ""
                  }
                ],
                "src": "236:180:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "491:216:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "537:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "546:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "549:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "539:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "539:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "539:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "512:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "521:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "508:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "508:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "533:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "504:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "504:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "501:52:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "562:36:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "588:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "575:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "575:23:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "566:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "661:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "670:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "673:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "663:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "663:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "663:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "620:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "631:5:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "646:3:49",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "651:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "642:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "642:11:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "655:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "638:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "638:19:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "627:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "627:31:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "617:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "617:42:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "610:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "610:50:49"
                      },
                      "nodeType": "YulIf",
                      "src": "607:70:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "686:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "696:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "686:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "457:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "468:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "480:6:49",
                    "type": ""
                  }
                ],
                "src": "421:286:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "813:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "823:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "835:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "846:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "831:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "831:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "823:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "865:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "876:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "858:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "858:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "858:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "782:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "793:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "804:4:49",
                    "type": ""
                  }
                ],
                "src": "712:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1068:172:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1085:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1096:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1078:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1078:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1078:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1119:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1130:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1115:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1115:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1135:2:49",
                            "type": "",
                            "value": "22"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1108:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1108:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1108:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1158:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1169:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1154:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1154:18:49"
                          },
                          {
                            "hexValue": "7265656e7472616e6379206e6f7420616c6c6f776564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "1174:24:49",
                            "type": "",
                            "value": "reentrancy not allowed"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1147:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1147:52:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1147:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1208:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1220:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1231:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1216:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1216:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1208:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3c131d0f023860570bf6ce3362d6e3a5112659914d10af68ebc10dcae76e4018__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1045:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1059:4:49",
                    "type": ""
                  }
                ],
                "src": "894:346:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1419:173:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1436:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1447:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1429:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1429:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1429:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1470:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1481:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1466:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1466:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1486:2:49",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1459:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1459:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1459:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1509:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1520:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1505:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1505:18:49"
                          },
                          {
                            "hexValue": "63616c6c6572206973206e6f7420746865206f776e6572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "1525:25:49",
                            "type": "",
                            "value": "caller is not the owner"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1498:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1498:53:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1498:53:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1560:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1572:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1583:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1568:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1568:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1560:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1396:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1410:4:49",
                    "type": ""
                  }
                ],
                "src": "1245:347:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1629:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1646:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1653:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1658:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1649:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1649:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1639:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1639:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1639:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1686:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1689:4:49",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1679:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1679:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1679:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1710:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1713:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "1703:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1703:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1703:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "1597:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1761:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1778:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1785:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1790:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1781:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1781:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1771:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1771:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1771:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1818:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1821:4:49",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1811:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1811:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1811:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1842:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1845:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "1835:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1835:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1835:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "1729:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1908:88:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1939:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1941:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1941:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1941:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1924:5:49"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1935:1:49",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1931:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1931:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1921:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1921:17:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1918:43:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1970:20:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1981:5:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1988:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1977:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1977:13:49"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "1970:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "1890:5:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "1900:3:49",
                    "type": ""
                  }
                ],
                "src": "1861:135:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2175:173:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2192:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2203:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2185:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2185:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2185:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2226:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2237:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2222:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2222:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2242:2:49",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2215:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2215:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2215:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2265:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2276:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2261:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2261:18:49"
                          },
                          {
                            "hexValue": "616464726573732073686f756c64206e6f742062652030",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "2281:25:49",
                            "type": "",
                            "value": "address should not be 0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2254:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2254:53:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2254:53:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2316:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2328:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2339:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2324:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2324:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2316:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_4777d7a1c17c9bec22c6ead85ee3f61ac3304c78af7a41068f59aeb30c0b3c49__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2152:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2166:4:49",
                    "type": ""
                  }
                ],
                "src": "2001:347:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2521:119:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2531:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2543:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2554:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2539:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2539:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2531:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2573:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2584:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2566:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2566:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2566:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2611:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2622:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2607:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2607:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "2627:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2600:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2600:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2600:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2482:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2493:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2501:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2512:4:49",
                    "type": ""
                  }
                ],
                "src": "2353:287:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2726:103:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2772:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2781:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2784:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2774:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2774:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2774:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2747:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2756:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2743:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2743:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2768:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2739:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2739:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "2736:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2797:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2813:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2807:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2807:16:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2797:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2692:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2703:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2715:6:49",
                    "type": ""
                  }
                ],
                "src": "2645:184:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3008:171:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3025:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3036:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3018:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3018:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3018:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3059:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3070:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3055:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3055:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3075:2:49",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3048:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3048:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3048:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3098:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3109:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3094:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3094:18:49"
                          },
                          {
                            "hexValue": "6e6f7468696e6720746f2072656465656d20796574",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "3114:23:49",
                            "type": "",
                            "value": "nothing to redeem yet"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3087:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3087:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3087:51:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3147:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3159:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3170:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3155:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3155:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3147:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_6eebed8cbdd0e88f84da4ab56741511f62e6fb6adf1ec99a4f3cee8b44af3abd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2985:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2999:4:49",
                    "type": ""
                  }
                ],
                "src": "2834:345:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3380:162:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3390:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3402:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3413:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3398:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3398:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3390:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3432:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "3443:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3425:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3425:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3425:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3470:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3481:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3466:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3466:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "3486:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3459:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3459:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3459:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3513:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3524:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3509:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3509:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "3529:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3502:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3502:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3502:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3333:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3344:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3352:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3360:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3371:4:49",
                    "type": ""
                  }
                ],
                "src": "3184:358:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3659:103:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3705:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3714:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3717:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3707:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3707:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3707:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3680:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3689:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3676:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3676:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3701:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3672:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3672:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3669:52:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3730:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3746:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3740:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3740:16:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3730:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3625:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3636:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3648:6:49",
                    "type": ""
                  }
                ],
                "src": "3547:215:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3819:116:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3878:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3880:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3880:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3880:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3850:1:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3843:6:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3843:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3836:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3836:17:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3858:1:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3869:1:49",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3865:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3865:6:49"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "3873:1:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "3861:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3861:14:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3855:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3855:21:49"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "3832:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3832:45:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3829:71:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3909:20:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "3924:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3927:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "3920:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3920:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "3909:7:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "3798:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "3801:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "3807:7:49",
                    "type": ""
                  }
                ],
                "src": "3767:168:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4069:145:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4079:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4091:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4102:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4087:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4087:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4079:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4121:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4136:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4152:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4157:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "4148:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4148:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4161:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4144:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4144:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4132:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4132:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4114:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4114:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4114:51:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4185:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4196:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4181:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4181:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "4201:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4174:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4174:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4174:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4030:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4041:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4049:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4060:4:49",
                    "type": ""
                  }
                ],
                "src": "3940:274:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4268:76:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4290:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "4292:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4292:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4292:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "4284:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4287:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "4281:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4281:8:49"
                      },
                      "nodeType": "YulIf",
                      "src": "4278:34:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4321:17:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "4333:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "4336:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "4329:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4329:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "4321:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "4250:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "4253:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "4259:4:49",
                    "type": ""
                  }
                ],
                "src": "4219:125:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4523:158:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4540:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4551:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4533:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4533:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4533:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4574:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4585:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4570:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4570:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4590:1:49",
                            "type": "",
                            "value": "9"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4563:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4563:29:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4563:29:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4612:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4623:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4608:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4608:18:49"
                          },
                          {
                            "hexValue": "616464726573732030",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4628:11:49",
                            "type": "",
                            "value": "address 0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4601:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4601:39:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4601:39:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4649:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4661:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4672:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4657:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4657:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4649:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4500:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4514:4:49",
                    "type": ""
                  }
                ],
                "src": "4349:332:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4860:169:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4877:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4888:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4870:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4870:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4870:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4911:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4922:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4907:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4907:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4927:2:49",
                            "type": "",
                            "value": "19"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4900:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4900:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4900:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4950:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4961:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4946:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4946:18:49"
                          },
                          {
                            "hexValue": "76616c696461746f72206e6f7420666f756e64",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4966:21:49",
                            "type": "",
                            "value": "validator not found"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4939:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4939:49:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4939:49:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4997:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5009:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5020:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5005:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5005:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4997:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4837:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4851:4:49",
                    "type": ""
                  }
                ],
                "src": "4686:343:49"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_encode_tuple_t_contract$_IBank_$2336__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_3c131d0f023860570bf6ce3362d6e3a5112659914d10af68ebc10dcae76e4018__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"reentrancy not allowed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_4777d7a1c17c9bec22c6ead85ee3f61ac3304c78af7a41068f59aeb30c0b3c49__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"address should not be 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_t_uint256__to_t_uint256_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_6eebed8cbdd0e88f84da4ab56741511f62e6fb6adf1ec99a4f3cee8b44af3abd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"nothing to redeem yet\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_userDefinedValueType$_ClaimsMask_$5760_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_b684bfcf74a89552a53e80a65accc0859b3c118596051724f5dba1ff9e910033__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"address 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_36dcd3300a5c6c546e3d353aaf08e0249b269714af4a29df0e9cf64bb6042176__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"validator not found\")\n        tail := add(headStart, 96)\n    }\n}",
          "id": 49,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {
        "contracts/libraries/LibClaimsMask.sol": {
          "LibClaimsMask": [
            {
              "length": 20,
              "start": 995
            },
            {
              "length": 20,
              "start": 1259
            },
            {
              "length": 20,
              "start": 1707
            },
            {
              "length": 20,
              "start": 1842
            }
          ]
        }
      },
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E964CEA EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x7A5BF67C EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0xA859B983 EQ PUSH2 0xB0 JUMPI DUP1 PUSH4 0xDE7A8D11 EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0xE8F56171 EQ PUSH2 0xE4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC75 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAE PUSH2 0xA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x886 JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC3 PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x11D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92 JUMP JUMPDEST PUSH2 0xAE PUSH2 0xDF CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x13F JUMP JUMPDEST PUSH2 0xC3 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0x89F JUMP JUMPDEST PUSH2 0x210 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x10F DUP2 PUSH2 0x22B JUMP JUMPDEST PUSH2 0x119 DUP2 DUP4 PUSH2 0x287 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x138 DUP2 DUP5 PUSH2 0x34D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC75 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x1C99595B9D1C985B98DE481B9BDD08185B1B1BDDD959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH1 0x0 PUSH2 0x1F2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FE DUP2 DUP5 PUSH2 0x44D JUMP JUMPDEST POP PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x97D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x138 DUP2 DUP5 PUSH2 0x615 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x284 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x2 ADD SLOAD DUP2 LT ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP3 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2BC JUMPI PUSH2 0x2BC PUSH2 0x8C8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2EB JUMPI POP PUSH1 0x0 PUSH2 0x2E9 DUP7 DUP4 PUSH2 0x615 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x2FA JUMPI PUSH2 0x2FA DUP6 DUP3 PUSH2 0x44D JUMP JUMPDEST POP DUP1 PUSH2 0x305 DUP2 PUSH2 0x8F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x1 DUP4 ADD DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xD454BAE44CE74E91CF62780BDB9278052C00CFD79C13003D5761B400475B12F6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x39F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x616464726573732073686F756C64206E6F74206265203 PUSH1 0x4C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x3BA DUP3 DUP6 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2A31763D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA8C5D8F4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x41D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x441 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x459 DUP4 DUP4 PUSH2 0x615 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x4A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1B9BDD1A1A5B99C81D1BC81C995919595B481E595D PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x4BE DUP3 DUP6 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x14BC74AD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0x52F1D2B4 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x525 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x549 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SSTORE PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x560 SWAP1 DUP6 PUSH2 0x926 JUMP JUMPDEST PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xBEC3FA17 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0xBEC3FA17 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH32 0x544E8B0E3EF3679366E27DF87030668812CB3284D1ACCCFB1EB8A0E7B26EAD3 SWAP4 POP ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x616464726573732073686F756C64206E6F74206265203 PUSH1 0x4C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x95D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 PUSH2 0x682 DUP3 DUP6 PUSH2 0x7A7 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2A31763D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA8C5D8F4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x6E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x709 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2A31763D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA8C5D8F4 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x76C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x790 SWAP2 SWAP1 PUSH2 0x90D JUMP JUMPDEST SWAP1 POP PUSH2 0x79C DUP2 DUP4 PUSH2 0x945 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x61646472657373203 PUSH1 0xBC SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0x847 JUMPI DUP4 PUSH1 0x1 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x80F JUMPI PUSH2 0x80F PUSH2 0x8C8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0x835 JUMPI SWAP1 POP PUSH2 0x447 JUMP JUMPDEST DUP1 PUSH2 0x83F DUP2 PUSH2 0x8F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D985B1A59185D1BDC881B9BDD08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x906 JUMPI PUSH2 0x906 PUSH2 0x8DE JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x940 JUMPI PUSH2 0x940 PUSH2 0x8DE JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x957 JUMPI PUSH2 0x957 PUSH2 0x8DE JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID DUP11 0xB3 PUSH32 0xEF2B2E34C4B62FF9948EE661CDCF34E209D7C20F4D1F6E83085E93B1FC844E22 MSTORE SWAP6 NUMBER 0xD6 0xE7 0x22 0xC6 SELFBALANCE PUSH18 0x71DD50FFE5B412198B92CD9AEEA62BBFABE4 0xCC PUSH20 0xA2646970667358221220EF2FF7DA7BC41E43A1B0 CALLVALUE 0xC3 DUP1 0xDE SWAP9 0x4A LOG4 0xF6 0xC9 SWAP3 PUSH18 0x80135E5FE67CB3BAB534B464736F6C634300 ADDMOD 0xD STOP CALLER ",
      "sourceMap": "830:2427:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3043:212;3231:17;;3043:212;;-1:-1:-1;;;;;3231:17:19;;;174:51:49;;162:2;147:18;3043:212:19;;;;;;;;2359:251;;;;;;:::i;:::-;;:::i;:::-;;1932:299;;;;;;:::i;:::-;;:::i;:::-;;;858:25:49;;;846:2;831:18;1932:299:19;712:177:49;2760:224:19;;;;;;:::i;:::-;;:::i;1462:297::-;;;;;;:::i;:::-;;:::i;2359:251::-;-1:-1:-1;;;;;;;;;;;2532:24:19;1107:39:40;2532:22:19;:24::i;:::-;2566:37;:12;2596:6;2566:29;:37::i;:::-;2417:193;2359:251;:::o;1932:299::-;2044:7;-1:-1:-1;;;;;;;;;;;2179:45:19;1107:39:40;2213:10:19;2179:33;:45::i;:::-;2172:52;1932:299;-1:-1:-1;;;1932:299:19:o;2760:224::-;1163:17;;-1:-1:-1;;;;;;;;;;;1107:39:40;-1:-1:-1;;;1163:17:19;;;;1162:18;1154:53;;;;-1:-1:-1;;;1154:53:19;;1096:2:49;1154:53:19;;;1078:21:49;1135:2;1115:18;;;1108:30;-1:-1:-1;;;1154:18:49;;;1147:52;1216:18;;1154:53:19;;;;;;;;;1217:17;;;:24;;-1:-1:-1;;;;1217:24:19;-1:-1:-1;;;1217:24:19;;;;2890:43:::1;-1:-1:-1::0;;;;;;;;;;;1107:39:40;1870:225;2890:43:19::1;2838:95:::0;-1:-1:-1;2943:34:19::1;2838:95:::0;2966:10;2943:22:::1;:34::i;:::-;-1:-1:-1::0;1262:17:19;;:25;;-1:-1:-1;;;;1262:25:19;;;-1:-1:-1;2760:224:19:o;1462:297::-;1573:7;-1:-1:-1;;;;;;;;;;;1708:44:19;1107:39:40;1741:10:19;1708:32;:44::i;2101:135:40:-;2179:8;;-1:-1:-1;;;;;2179:8:40;2191:10;2179:22;2171:58;;;;-1:-1:-1;;;2171:58:40;;1447:2:49;2171:58:40;;;1429:21:49;1486:2;1466:18;;;1459:30;1525:25;1505:18;;;1498:53;1568:18;;2171:58:40;1245:347:49;2171:58:40;2101:135;:::o;4273:702::-;-1:-1:-1;;;;;;;;;;;4467:73:40;4589:308;4609:18;:35;;;4605:1;:39;4589:308;;;4665:17;4685:18;:29;;4715:1;4685:32;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;4685:32:40;;-1:-1:-1;4752:23:40;;;;;:64;;-1:-1:-1;4815:1:40;4779:33;:2;4802:9;4779:22;:33::i;:::-;:37;4752:64;4731:156;;;4849:23;:2;4862:9;4849:12;:23::i;:::-;-1:-1:-1;4646:3:40;;;;:::i;:::-;;;;4589:308;;;-1:-1:-1;4906:14:40;;;:23;;;4944:24;;858:25:49;;;4944:24:40;;846:2:49;831:18;4944:24:40;;;;;;;4363:612;4273:702;;:::o;3534:552::-;3658:7;-1:-1:-1;;;;;3689:24:40;;3681:60;;;;-1:-1:-1;;;3681:60:40;;2203:2:49;3681:60:40;;;2185:21:49;2242:2;2222:18;;;2215:30;-1:-1:-1;;;2261:18:49;;;2254:53;2324:18;;3681:60:40;2001:347:49;3681:60:40;-1:-1:-1;;;;;;;;;;;3752:73:40;3893:48;942:45:44;3930:10:40;3893:36;:48::i;:::-;4004:20;;;;:43;;-1:-1:-1;;;4004:43:40;;;;;2566:25:49;;;;2607:18;;;2600:34;;;3874:67:40;;-1:-1:-1;3979:22:40;;4004:33;;;;2539:18:49;;4004:43:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3979:68;-1:-1:-1;;;;3534:552:40;;;;;:::o;5184:1069::-;5365:26;5394:34;:2;5417:10;5394:22;:34::i;:::-;5365:63;;5467:1;5446:18;:22;5438:56;;;;-1:-1:-1;;;5438:56:40;;3036:2:49;5438:56:40;;;3018:21:49;3075:2;3055:18;;;3048:30;-1:-1:-1;;;3094:18:49;;;3087:51;3155:18;;5438:56:40;2834:345:49;5438:56:40;-1:-1:-1;;;;;;;;;;;5530:73:40;5671:48;942:45:44;5708:10:40;5671:36;:48::i;:::-;5780:20;;;;:102;;-1:-1:-1;;;5780:102:40;;;;;3425:25:49;;;;3466:18;;;3459:34;;;3509:18;;;3502:34;;;5652:67:40;;-1:-1:-1;5780:38:40;;;;3398:18:49;;5780:102:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5757:20;;;:125;5965:14;;;;5923:18;;5944:35;;:18;:35;:::i;:::-;6023:7;;;;:46;;-1:-1:-1;;;6023:46:40;;-1:-1:-1;;;;;4132:32:49;;;6023:46:40;;;4114:51:49;4181:18;;;4174:34;;;5923:56:40;;-1:-1:-1;6023:7:40;;;:22;;4087:18:49;;6023:46:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6203:43:40;;;-1:-1:-1;;;;;4132:32:49;;4114:51;;4196:2;4181:18;;4174:34;;;6203:43:40;;-1:-1:-1;4087:18:49;;-1:-1:-1;6203:43:40;;;;;;;5259:994;;;;5184:1069;;:::o;2463:839::-;2586:7;-1:-1:-1;;;;;2617:24:40;;2609:60;;;;-1:-1:-1;;;2609:60:40;;2203:2:49;2609:60:40;;;2185:21:49;2242:2;2222:18;;;2215:30;-1:-1:-1;;;2261:18:49;;;2254:53;2324:18;;2609:60:40;2001:347:49;2609:60:40;-1:-1:-1;;;;;;;;;;;2680:73:40;2821:48;942:45:44;2858:10:40;2821:36;:48::i;:::-;2929:29;;;;:74;;-1:-1:-1;;;2929:74:40;;;;;2566:25:49;;;;2607:18;;;2600:34;;;2802:67:40;;-1:-1:-1;2907:19:40;;2929:42;;;;2539:18:49;;2929:74:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3038:20;;;;:43;;-1:-1:-1;;;3038:43:40;;;;;2566:25:49;;;;2607:18;;;2600:34;;;2907:96:40;;-1:-1:-1;3013:22:40;;3038:33;;;;2539:18:49;;3038:43:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3013:68;-1:-1:-1;3267:28:40;3013:68;3267:11;:28;:::i;:::-;3260:35;2463:839;-1:-1:-1;;;;;;;2463:839:40:o;12402:349:44:-;12519:7;-1:-1:-1;;;;;12550:20:44;;12542:42;;;;-1:-1:-1;;;12542:42:44;;4551:2:49;12542:42:44;;;4533:21:49;4590:1;4570:18;;;4563:29;-1:-1:-1;;;4608:18:49;;;4601:39;4657:18;;12542:42:44;4349:332:49;12542:42:44;12599:9;12594:112;12614:13;;;:20;12610:24;;12594:112;;;12669:2;:13;;12683:1;12669:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;12669:16:44;;;12659:26;;;;12655:40;;12694:1;-1:-1:-1;12687:8:44;;12655:40;12636:3;;;;:::i;:::-;;;;12594:112;;;-1:-1:-1;12715:29:44;;-1:-1:-1;;;12715:29:44;;4888:2:49;12715:29:44;;;4870:21:49;4927:2;4907:18;;;4900:30;-1:-1:-1;;;4946:18:49;;;4939:49;5005:18;;12715:29:44;4686:343:49;236:180;295:6;348:2;336:9;327:7;323:23;319:32;316:52;;;364:1;361;354:12;316:52;-1:-1:-1;387:23:49;;236:180;-1:-1:-1;236:180:49:o;421:286::-;480:6;533:2;521:9;512:7;508:23;504:32;501:52;;;549:1;546;539:12;501:52;575:23;;-1:-1:-1;;;;;627:31:49;;617:42;;607:70;;673:1;670;663:12;1597:127;1658:10;1653:3;1649:20;1646:1;1639:31;1689:4;1686:1;1679:15;1713:4;1710:1;1703:15;1729:127;1790:10;1785:3;1781:20;1778:1;1771:31;1821:4;1818:1;1811:15;1845:4;1842:1;1835:15;1861:135;1900:3;1921:17;;;1918:43;;1941:18;;:::i;:::-;-1:-1:-1;1988:1:49;1977:13;;1861:135::o;2645:184::-;2715:6;2768:2;2756:9;2747:7;2743:23;2739:32;2736:52;;;2784:1;2781;2774:12;2736:52;-1:-1:-1;2807:16:49;;2645:184;-1:-1:-1;2645:184:49:o;3767:168::-;3807:7;3873:1;3869;3865:6;3861:14;3858:1;3855:21;3850:1;3843:9;3836:17;3832:45;3829:71;;;3880:18;;:::i;:::-;-1:-1:-1;3920:9:49;;3767:168::o;4219:125::-;4259:4;4287:1;4284;4281:8;4278:34;;;4292:18;;:::i;:::-;-1:-1:-1;4329:9:49;;4219:125::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "502800",
        "executionCost": "537",
        "totalCost": "503337"
      },
      "external": {
        "getFeeManagerBank()": "2268",
        "getNumClaimsRedeemed(address)": "infinite",
        "numClaimsRedeemable(address)": "infinite",
        "redeemFee(address)": "infinite",
        "resetFeePerClaim(uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "getFeeManagerBank()": "6e964cea",
      "getNumClaimsRedeemed(address)": "a859b983",
      "numClaimsRedeemable(address)": "e8f56171",
      "redeemFee(address)": "de7a8d11",
      "resetFeePerClaim(uint256)": "7a5bf67c"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeePerClaimReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"}],\"name\":\"FeeRedeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getFeeManagerBank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getNumClaimsRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"numClaimsRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"redeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"resetFeePerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getNumClaimsRedeemed(address)\":{\"params\":{\"_validator\":\"address of the validator\"}},\"numClaimsRedeemable(address)\":{\"params\":{\"_validator\":\"address of the validator\"}},\"redeemFee(address)\":{\"params\":{\"_validator\":\"address of the validator that is redeeming\"}},\"resetFeePerClaim(uint256)\":{\"params\":{\"_value\":\"the new value of fee per claim\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FeePerClaimReset(uint256)\":{\"notice\":\"emitted on resetting feePerClaim\"},\"FeeRedeemed(address,uint256)\":{\"notice\":\"emitted on ERC20 funds redeemed by validator\"}},\"kind\":\"user\",\"methods\":{\"getFeeManagerBank()\":{\"notice\":\"returns the bank used to manage fees\"},\"getNumClaimsRedeemed(address)\":{\"notice\":\"this function can be called to check the number of claims that has been redeemed for the validator\"},\"numClaimsRedeemable(address)\":{\"notice\":\"this function can be called to check the number of claims that's redeemable for the validator\"},\"redeemFee(address)\":{\"notice\":\"this function can be called to redeem fees for validators\"},\"resetFeePerClaim(uint256)\":{\"notice\":\"contract owner can reset the value of fee per claim\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/FeeManagerFacet.sol\":\"FeeManagerFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/IBank.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n// @title Bank interface\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBank {\\n    /// @notice returns the token used internally\\n    function getToken() external view returns (IERC20);\\n\\n    /// @notice get balance of `_owner`\\n    /// @param _owner account owner\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice transfer `_value` tokens from bank to `_to`\\n    /// @notice decrease the balance of caller by `_value`\\n    /// @param _to account that will receive `_value` tokens\\n    /// @param _value amount of tokens to be transfered\\n    function transferTokens(address _to, uint256 _value) external;\\n\\n    /// @notice transfer `_value` tokens from caller to bank\\n    /// @notice increase the balance of `_to` by `_value`\\n    /// @dev you may need to call `token.approve(bank, _value)`\\n    /// @param _to account that will have their balance increased by `_value`\\n    /// @param _value amount of tokens to be transfered\\n    function depositTokens(address _to, uint256 _value) external;\\n\\n    /// @notice `value` tokens were transfered from the bank to `to`\\n    /// @notice the balance of `from` was decreased by `value`\\n    /// @dev is triggered on any successful call to `transferTokens`\\n    /// @param from the account/contract that called `transferTokens` and\\n    ///              got their balance decreased by `value`\\n    /// @param to the one that received `value` tokens from the bank\\n    /// @param value amount of tokens that were transfered\\n    event Transfer(address indexed from, address to, uint256 value);\\n\\n    /// @notice `value` tokens were transfered from `from` to bank\\n    /// @notice the balance of `to` was increased by `value`\\n    /// @dev is triggered on any successful call to `depositTokens`\\n    /// @param from the account/contract that called `depositTokens` and\\n    ///              transfered `value` tokens to the bank\\n    /// @param to the one that got their balance increased by `value`\\n    /// @param value amount of tokens that were transfered\\n    event Deposit(address from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x483dc9b0c26e3a5d43148cf847bd4df2af03438a0d76d60d33549de3ca2dd77d\",\"license\":\"Apache-2.0\"},\"contracts/facets/FeeManagerFacet.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Fee Manager facet\\npragma solidity >=0.8.8;\\n\\nimport {IBank} from \\\"../IBank.sol\\\";\\nimport {IFeeManager} from \\\"../interfaces/IFeeManager.sol\\\";\\nimport {LibFeeManager} from \\\"../libraries/LibFeeManager.sol\\\";\\n\\ncontract FeeManagerFacet is IFeeManager {\\n    using LibFeeManager for LibFeeManager.DiamondStorage;\\n\\n    /// @notice functions modified by noReentrancy are not subject to recursion\\n    modifier noReentrancy() {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n        require(!feeManagerDS.lock, \\\"reentrancy not allowed\\\");\\n        feeManagerDS.lock = true;\\n        _;\\n        feeManagerDS.lock = false;\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that's redeemable for the validator\\n    /// @param  _validator address of the validator\\n    function numClaimsRedeemable(address _validator)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n        return feeManagerDS.numClaimsRedeemable(_validator);\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that has been redeemed for the validator\\n    /// @param  _validator address of the validator\\n    function getNumClaimsRedeemed(address _validator)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n        return feeManagerDS.getNumClaimsRedeemed(_validator);\\n    }\\n\\n    /// @notice contract owner can reset the value of fee per claim\\n    /// @param  _value the new value of fee per claim\\n    function resetFeePerClaim(uint256 _value) public override {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n        feeManagerDS.onlyOwner();\\n        feeManagerDS.resetFeePerClaim(_value);\\n    }\\n\\n    /// @notice this function can be called to redeem fees for validators\\n    /// @param  _validator address of the validator that is redeeming\\n    function redeemFee(address _validator) public override noReentrancy {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n        feeManagerDS.redeemFee(_validator);\\n    }\\n\\n    /// @notice returns the bank used to manage fees\\n    function getFeeManagerBank() public view override returns (IBank) {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n        return feeManagerDS.bank;\\n    }\\n}\\n\",\"keccak256\":\"0xbc7705a8ec363654d6ade4275214a58eb02ac5374421be18f5a5826a11c3e50f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IFeeManager.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Fee Manager interface\\npragma solidity >=0.7.0;\\n\\nimport {IBank} from \\\"../IBank.sol\\\";\\n\\ninterface IFeeManager {\\n    /// @notice this function can be called to check the number of claims that's redeemable for the validator\\n    /// @param  _validator address of the validator\\n    function numClaimsRedeemable(address _validator)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice this function can be called to check the number of claims that has been redeemed for the validator\\n    /// @param  _validator address of the validator\\n    function getNumClaimsRedeemed(address _validator)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice contract owner can set/reset the value of fee per claim\\n    /// @param  _value the new value of fee per claim\\n    function resetFeePerClaim(uint256 _value) external;\\n\\n    /// @notice this function can be called to redeem fees for validators\\n    /// @param  _validator address of the validator that is redeeming\\n    function redeemFee(address _validator) external;\\n\\n    /// @notice returns the bank used to manage fees\\n    function getFeeManagerBank() external view returns (IBank);\\n\\n    /// @notice emitted on resetting feePerClaim\\n    event FeePerClaimReset(uint256 value);\\n\\n    /// @notice emitted on ERC20 funds redeemed by validator\\n    event FeeRedeemed(address validator, uint256 claims);\\n}\\n\",\"keccak256\":\"0x7f55753293a46fb0d6a1fa822b27ea38157d1b6ebd3f20fa4273894a251aea4d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager interface\\npragma solidity >=0.7.0;\\n\\n// NoConflict - No conflicting claims or consensus\\n// Consensus - All validators had equal claims\\n// Conflict - Claim is conflicting with previous one\\nenum Result {\\n    NoConflict,\\n    Consensus,\\n    Conflict\\n}\\n\\n// TODO: What is the incentive for validators to not just copy the first claim that arrived?\\ninterface IValidatorManager {\\n    /// @notice get current claim\\n    function getCurrentClaim() external view returns (bytes32);\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n}\\n\",\"keccak256\":\"0x7eccbaf15dc80cd402459e8c940b0012fd3d3b8d2882fa13798afe92a9ea3b86\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibClaimsMask.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title ClaimsMask library\\npragma solidity >=0.8.8;\\n\\n// ClaimsMask is used to keep track of the number of claims for up to 8 validators\\n// | agreement mask | consensus goal mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n// |     8 bits     |        8 bits       |      30 bits       |      30 bits       | ... |      30 bits       |\\n// In Validator Manager, #claims_validator indicates the #claims the validator has made.\\n// In Fee Manager, #claims_validator indicates the #claims the validator has redeemed. In this case,\\n//      agreement mask and consensus goal mask are not used.\\n\\ntype ClaimsMask is uint256;\\n\\nlibrary LibClaimsMask {\\n    uint256 constant claimsBitLen = 30; // #bits used for each #claims\\n\\n    /// @notice this function creates a new ClaimsMask variable with value _value\\n    /// @param  _value the value following the format of ClaimsMask\\n    function newClaimsMask(uint256 _value) public pure returns (ClaimsMask) {\\n        return ClaimsMask.wrap(_value);\\n    }\\n\\n    /// @notice this function creates a new ClaimsMask variable with the consensus goal mask set,\\n    ///         according to the number of validators\\n    /// @param  _numValidators the number of validators\\n    function newClaimsMaskWithConsensusGoalSet(uint256 _numValidators)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_numValidators <= 8, \\\"up to 8 validators\\\");\\n        uint256 consensusMask = (1 << _numValidators) - 1;\\n        return ClaimsMask.wrap(consensusMask << 240); // 256 - 8 - 8 = 240\\n    }\\n\\n    /// @notice this function returns the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    ///     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager\\n    function getNumClaims(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 bitmask = (1 << claimsBitLen) - 1;\\n        return\\n            (ClaimsMask.unwrap(_claimsMask) >>\\n                (claimsBitLen * _validatorIndex)) & bitmask;\\n    }\\n\\n    /// @notice this function increases the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the increase amount\\n    function increaseNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 currentNum = getNumClaims(_claimsMask, _validatorIndex);\\n        uint256 newNum = currentNum + _value; // overflows checked by default with sol0.8\\n        return setNumClaims(_claimsMask, _validatorIndex, newNum);\\n    }\\n\\n    /// @notice this function sets the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the set value\\n    function setNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        require(_value <= ((1 << claimsBitLen) - 1), \\\"ClaimsMask Overflow\\\");\\n        uint256 bitmask = ~(((1 << claimsBitLen) - 1) <<\\n            (claimsBitLen * _validatorIndex));\\n        uint256 clearedClaimsMask = ClaimsMask.unwrap(_claimsMask) & bitmask;\\n        _claimsMask = ClaimsMask.wrap(\\n            clearedClaimsMask | (_value << (claimsBitLen * _validatorIndex))\\n        );\\n        return _claimsMask;\\n    }\\n\\n    /// @notice get consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function clearAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        uint256 clearedMask = ClaimsMask.unwrap(_claimsMask) & ((1 << 248) - 1); // 256 - 8 = 248\\n        return ClaimsMask.wrap(clearedMask);\\n    }\\n\\n    /// @notice get the entire agreement mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return (ClaimsMask.unwrap(_claimsMask) >> 248); // get the first 8 bits\\n    }\\n\\n    /// @notice check if a validator has already claimed\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function alreadyClaimed(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        // get the first 8 bits. Then & operation on the validator's bit to see if it's set\\n        return\\n            (((ClaimsMask.unwrap(_claimsMask) >> 248) >> _validatorIndex) &\\n                1) != 0;\\n    }\\n\\n    /// @notice set agreement mask for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function setAgreementMask(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 setMask = (ClaimsMask.unwrap(_claimsMask) |\\n            (1 << (248 + _validatorIndex))); // 256 - 8 = 248\\n        return ClaimsMask.wrap(setMask);\\n    }\\n\\n    /// @notice get the entire consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getConsensusGoalMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return ((ClaimsMask.unwrap(_claimsMask) << 8) >> 248); // get the second 8 bits\\n    }\\n\\n    /// @notice remove validator from the ClaimsMask\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function removeValidator(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 claimsMaskValue = ClaimsMask.unwrap(_claimsMask);\\n        // remove validator from agreement bitmask\\n        uint256 zeroMask = ~(1 << (_validatorIndex + 248)); // 256 - 8 = 248\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from consensus goal mask\\n        zeroMask = ~(1 << (_validatorIndex + 240)); // 256 - 8 - 8 = 240\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from #claims\\n        return\\n            setNumClaims(ClaimsMask.wrap(claimsMaskValue), _validatorIndex, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x581915d6dcd3aa9e447f89b8bf902bc4f4a72c40b9e8575e196741a8974ea74a\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibFeeManager.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Fee Manager library\\npragma solidity ^0.8.0;\\n\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\nimport {IBank} from \\\"../IBank.sol\\\";\\n\\nlibrary LibFeeManager {\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n    using LibFeeManager for LibFeeManager.DiamondStorage;\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"FeeManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        address owner; // owner of Fee Manager\\n        uint256 feePerClaim;\\n        IBank bank; // bank that holds the tokens to pay validators\\n        bool lock; // reentrancy lock\\n        // A bit set used for up to 8 validators.\\n        // The first 16 bits are not used to keep compatibility with the validator manager contract.\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // |     not used    | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     16 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask numClaimsRedeemed;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function onlyOwner(DiamondStorage storage ds) internal view {\\n        require(ds.owner == msg.sender, \\\"caller is not the owner\\\");\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that's redeemable for the validator\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator\\n    function numClaimsRedeemable(DiamondStorage storage ds, address _validator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(_validator != address(0), \\\"address should not be 0\\\");\\n\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        uint256 totalClaims = validatorManagerDS.claimsMask.getNumClaims(\\n            valIndex\\n        );\\n        uint256 redeemedClaims = ds.numClaimsRedeemed.getNumClaims(valIndex);\\n\\n        // underflow checked by default with sol0.8\\n        // which means if the validator is removed, calling this function will\\n        // either return 0 or revert\\n        return totalClaims - redeemedClaims;\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that has been redeemed for the validator\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator\\n    function getNumClaimsRedeemed(DiamondStorage storage ds, address _validator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(_validator != address(0), \\\"address should not be 0\\\");\\n\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        uint256 redeemedClaims = ds.numClaimsRedeemed.getNumClaims(valIndex);\\n\\n        return redeemedClaims;\\n    }\\n\\n    /// @notice contract owner can reset the value of fee per claim\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _value the new value of fee per claim\\n    function resetFeePerClaim(DiamondStorage storage ds, uint256 _value)\\n        internal\\n    {\\n        // before resetting the feePerClaim, pay fees for all validators as per current rates\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        for (uint256 i; i < validatorManagerDS.maxNumValidators; i++) {\\n            address validator = validatorManagerDS.validators[i];\\n            if (\\n                validator != address(0) && ds.numClaimsRedeemable(validator) > 0\\n            ) {\\n                ds.redeemFee(validator);\\n            }\\n        }\\n        ds.feePerClaim = _value;\\n        emit FeePerClaimReset(_value);\\n    }\\n\\n    /// @notice this function can be called to redeem fees for validators\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator that is redeeming\\n    function redeemFee(DiamondStorage storage ds, address _validator) internal {\\n        // follow the Checks-Effects-Interactions pattern for security\\n\\n        // ** checks **\\n        uint256 nowRedeemingClaims = ds.numClaimsRedeemable(_validator);\\n        require(nowRedeemingClaims > 0, \\\"nothing to redeem yet\\\");\\n\\n        // ** effects **\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        ds.numClaimsRedeemed = ds.numClaimsRedeemed.increaseNumClaims(\\n            valIndex,\\n            nowRedeemingClaims\\n        );\\n\\n        // ** interactions **\\n        uint256 feesToSend = nowRedeemingClaims * ds.feePerClaim; // number of erc20 tokens to send\\n        ds.bank.transferTokens(_validator, feesToSend); // will revert if transfer fails\\n        // emit the number of claimed being redeemed, instead of the amount of tokens\\n        emit FeeRedeemed(_validator, nowRedeemingClaims);\\n    }\\n\\n    /// @notice emitted on resetting feePerClaim\\n    event FeePerClaimReset(uint256 value);\\n\\n    /// @notice emitted on ERC20 funds redeemed by validator\\n    event FeeRedeemed(address validator, uint256 claims);\\n}\\n\",\"keccak256\":\"0x60b7934317b9fdbadbfd616950217e8f8e83b823002f311ef247d04b93ab60de\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager library\\npragma solidity ^0.8.0;\\n\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\n\\nlibrary LibValidatorManager {\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"ValidatorManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 currentClaim; // current claim - first claim of this epoch\\n        address payable[] validators; // up to 8 validators\\n        uint256 maxNumValidators; // the maximum number of validators, set in the constructor\\n        // A bit set used for up to 8 validators.\\n        // The first 8 bits are used to indicate whom supports the current claim\\n        // The second 8 bits are used to indicate those should have claimed in order to reach consensus\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // | agreement mask | consensus mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     8 bits     |     8 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask claimsMask;\\n    }\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when a dispute ends in rollups\\n    /// @param ds diamond storage pointer\\n    /// @param winner address of dispute winner\\n    /// @param loser address of dispute loser\\n    /// @param winningClaim the winnning claim\\n    /// @return result of dispute being finished\\n    function onDisputeEnd(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        removeValidator(ds, loser);\\n\\n        if (winningClaim == ds.currentClaim) {\\n            // first claim stood, dont need to update the bitmask\\n            return\\n                isConsensus(ds)\\n                    ? emitDisputeEndedAndReturn(\\n                        Result.Consensus,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    )\\n                    : emitDisputeEndedAndReturn(\\n                        Result.NoConflict,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    );\\n        }\\n\\n        // if first claim lost, and other validators have agreed with it\\n        // there is a new dispute to be played\\n        if (ds.claimsMask.getAgreementMask() != 0) {\\n            return\\n                emitDisputeEndedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, winningClaim],\\n                    [getClaimerOfCurrentClaim(ds), winner]\\n                );\\n        }\\n        // else there are no valdiators that agree with losing claim\\n        // we can update current claim and check for consensus in case\\n        // the winner is the only validator left\\n        ds.currentClaim = winningClaim;\\n        updateClaimAgreementMask(ds, winner);\\n        return\\n            isConsensus(ds)\\n                ? emitDisputeEndedAndReturn(\\n                    Result.Consensus,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                )\\n                : emitDisputeEndedAndReturn(\\n                    Result.NoConflict,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                );\\n    }\\n\\n    /// @notice called when a new epoch starts\\n    /// @param ds diamond storage pointer\\n    /// @return current claim\\n    function onNewEpoch(DiamondStorage storage ds) internal returns (bytes32) {\\n        // reward validators who has made the correct claim by increasing their #claims\\n        claimFinalizedIncreaseCounts(ds);\\n\\n        bytes32 tmpClaim = ds.currentClaim;\\n\\n        // clear current claim\\n        ds.currentClaim = bytes32(0);\\n        // clear validator agreement bit mask\\n        ds.claimsMask = ds.claimsMask.clearAgreementMask();\\n\\n        emit NewEpoch(tmpClaim);\\n        return tmpClaim;\\n    }\\n\\n    /// @notice called when a claim is received by rollups\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of sender of that claim\\n    /// @param claim claim received by rollups\\n    /// @return result of claim, Consensus | NoConflict | Conflict\\n    /// @return [currentClaim, conflicting claim] if there is Conflict\\n    ///         [currentClaim, bytes32(0)] if there is Consensus or NoConflcit\\n    /// @return [claimer1, claimer2] if there is  Conflcit\\n    ///         [claimer1, address(0)] if there is Consensus or NoConflcit\\n    function onClaim(\\n        DiamondStorage storage ds,\\n        address payable sender,\\n        bytes32 claim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        require(claim != bytes32(0), \\\"empty claim\\\");\\n        require(isValidator(ds, sender), \\\"sender not allowed\\\");\\n\\n        // require the validator hasn't claimed in the same epoch before\\n        uint256 index = getValidatorIndex(ds, sender);\\n        require(\\n            !ds.claimsMask.alreadyClaimed(index),\\n            \\\"sender had claimed in this epoch before\\\"\\n        );\\n\\n        // cant return because a single claim might mean consensus\\n        if (ds.currentClaim == bytes32(0)) {\\n            ds.currentClaim = claim;\\n        }\\n\\n        if (claim != ds.currentClaim) {\\n            return\\n                emitClaimReceivedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, claim],\\n                    [getClaimerOfCurrentClaim(ds), sender]\\n                );\\n        }\\n        updateClaimAgreementMask(ds, sender);\\n\\n        return\\n            isConsensus(ds)\\n                ? emitClaimReceivedAndReturn(\\n                    Result.Consensus,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                )\\n                : emitClaimReceivedAndReturn(\\n                    Result.NoConflict,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                );\\n    }\\n\\n    /// @notice emits dispute ended event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitDisputeEndedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit DisputeEnded(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice emits claim received event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitClaimReceivedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit ClaimReceived(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice only call this function when a claim has been finalized\\n    ///         Either a consensus has been reached or challenge period has past\\n    /// @param ds pointer to diamond storage\\n    function claimFinalizedIncreaseCounts(DiamondStorage storage ds) internal {\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            // if a validator agrees with the current claim\\n            if ((agreementMask & (1 << i)) != 0) {\\n                // increase #claims by 1\\n                ds.claimsMask = ds.claimsMask.increaseNumClaims(i, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice removes a validator\\n    /// @param ds diamond storage pointer\\n    /// @param validator address of validator to be removed\\n    function removeValidator(DiamondStorage storage ds, address validator)\\n        internal\\n    {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (validator == ds.validators[i]) {\\n                // put address(0) in validators position\\n                ds.validators[i] = payable(0);\\n                // remove the validator from claimsMask\\n                ds.claimsMask = ds.claimsMask.removeValidator(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice check if consensus has been reached\\n    /// @param ds pointer to diamond storage\\n    function isConsensus(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        ClaimsMask claimsMask = ds.claimsMask;\\n        return\\n            claimsMask.getAgreementMask() == claimsMask.getConsensusGoalMask();\\n    }\\n\\n    /// @notice get one of the validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @return validator that agreed with current claim\\n    function getClaimerOfCurrentClaim(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (address payable)\\n    {\\n        // TODO: we are always getting the first validator\\n        // on the array that agrees with the current claim to enter a dispute\\n        // should this be random?\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (agreementMask & (1 << i) != 0) {\\n                return ds.validators[i];\\n            }\\n        }\\n        revert(\\\"Agreeing validator not found\\\");\\n    }\\n\\n    /// @notice updates mask of validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of validator that will be included in mask\\n    function updateClaimAgreementMask(\\n        DiamondStorage storage ds,\\n        address payable sender\\n    ) internal {\\n        uint256 validatorIndex = getValidatorIndex(ds, sender);\\n        ds.claimsMask = ds.claimsMask.setAgreementMask(validatorIndex);\\n    }\\n\\n    /// @notice check if the sender is a validator\\n    /// @param ds pointer to diamond storage\\n    /// @param sender sender address\\n    function isValidator(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice find the validator and return the index or revert\\n    /// @param ds pointer to diamond storage\\n    /// @param sender validator address\\n    /// @return validator index or revert\\n    function getValidatorIndex(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return i;\\n        }\\n        revert(\\\"validator not found\\\");\\n    }\\n\\n    /// @notice get number of claims the sender has made\\n    /// @param ds pointer to diamond storage\\n    /// @param _sender validator address\\n    /// @return #claims\\n    function getNumberOfClaimsByAddress(\\n        DiamondStorage storage ds,\\n        address payable _sender\\n    ) internal view returns (uint256) {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (_sender == ds.validators[i]) {\\n                return getNumberOfClaimsByIndex(ds, i);\\n            }\\n        }\\n        // if validator not found\\n        return 0;\\n    }\\n\\n    /// @notice get number of claims by the index in the validator set\\n    /// @param ds pointer to diamond storage\\n    /// @param index the index in validator set\\n    /// @return #claims\\n    function getNumberOfClaimsByIndex(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.claimsMask.getNumClaims(index);\\n    }\\n\\n    /// @notice get the maximum number of validators defined in validator manager\\n    /// @param ds pointer to diamond storage\\n    /// @return the maximum number of validators\\n    function getMaxNumValidators(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.maxNumValidators;\\n    }\\n}\\n\",\"keccak256\":\"0xa25792dbbddcb4f5ec3ef71e463e2df9153a90fecfa4b2cd81e03a6a06a45e83\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "events": {
      "FeePerClaimReset(uint256)": {
        "notice": "emitted on resetting feePerClaim"
      },
      "FeeRedeemed(address,uint256)": {
        "notice": "emitted on ERC20 funds redeemed by validator"
      }
    },
    "kind": "user",
    "methods": {
      "getFeeManagerBank()": {
        "notice": "returns the bank used to manage fees"
      },
      "getNumClaimsRedeemed(address)": {
        "notice": "this function can be called to check the number of claims that has been redeemed for the validator"
      },
      "numClaimsRedeemable(address)": {
        "notice": "this function can be called to check the number of claims that's redeemable for the validator"
      },
      "redeemFee(address)": {
        "notice": "this function can be called to redeem fees for validators"
      },
      "resetFeePerClaim(uint256)": {
        "notice": "contract owner can reset the value of fee per claim"
      }
    },
    "version": 1
  }
}