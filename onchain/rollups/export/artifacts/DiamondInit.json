{
  "contractName": "DiamondInit",
  "sourceName": "contracts/upgrade_initializers/DiamondInit.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePerClaim",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeManagerBank",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeManagerOwner",
          "type": "address"
        }
      ],
      "name": "FeeManagerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "RollupsInitialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_inputDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inputLog2Size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feePerClaim",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeManagerBank",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManagerOwner",
          "type": "address"
        },
        {
          "internalType": "address payable[]",
          "name": "_validators",
          "type": "address[]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610af0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bccb0daf14610030575b600080fd5b61004361003e3660046108ae565b610045565b005b6101267fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f8054600160ff1991821681179092557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369580548216831790556307f5828d60e41b6000527f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c380549091169091179055565b61012f81610158565b61013a8888886101fa565b6101458484846102d3565b61014e856103a1565b5050505050505050565b80517f8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fc9060088111156101c75760405162461bcd60e51b8152602060048201526012602482015271757020746f20382076616c696461746f727360701b60448201526064015b60405180910390fd5b82516101dc90600184019060208601906107f6565b50600282018190556101ed81610448565b8260030181905550505050565b7fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c8381557fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189d805463ffffffff8481166401000000000267ffffffffffffffff19909216868216179190911773ffffffff00000000ffffffff0000000000000000191642909116600160401b0263ffffffff60801b191617905560408051848152602081018490527fd6f5a5cd17f05cf9045751ee10f662f62e569c9371ffec8380510aabe63012d391015b60405180910390a150505050565b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc748390557f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc7580546001600160a01b038481166001600160a01b031992831681179093557f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc7380549185169190921681178255604080518781526020810194909452830152907f5b54873359173c3d639e39928ad34e113039ce7c799d500e57f8a2c703adb477906060016102c5565b7f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff600382108015906103d4575060408211155b6104205760405162461bcd60e51b815260206004820152601960248201527f4c6f67206f6620696e7075742073697a653a205b332c36345d0000000000000060448201526064016101be565b6001821b60028201556040805160208101909152600081526104439082906104a9565b505050565b600060088211156104905760405162461bcd60e51b8152602060048201526012602482015271757020746f20382076616c696461746f727360701b60448201526064016101be565b600061049f600180851b6109f7565b60f01b9392505050565b60006104b68383306104bd565b9392505050565b600283015482516000917fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c9111156105375760405162461bcd60e51b815260206004820152601860248201527f696e707574206c656e3a205b302c647269766553697a655d000000000000000060448201526064016101be565b61054081610662565b1561054e5761054e85610735565b600085600301546000146105655785600101610567565b855b9050600061057483610754565b8254604080516001600160a01b03891660208083019190915243828401524260608301526080820185905260a08083018590528351808403909101815260c0830184528051908201208b518c83012060e0840182905261010080850182905285518086039091018152610120909401909452825192820192909220600180860189556000898152929092209094018490558654949550909391929161061991906109f7565b847fa15a0da5519c084484141aaa73e525cee96062f5decc97e070f0c4da27738bc78a428d60405161064d93929190610a0e565b60405180910390a39998505050505050505050565b60018101546000908190600160801b900463ffffffff16600281111561068a5761068a6109cb565b600184015490915063ffffffff600160401b82048116911660008360028111156106b6576106b66109cb565b1480156106cb57506106c88183610a7a565b42115b1561072a576001858101805463ffffffff60801b1916600160801b1790556040517fed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f9161071791610a92565b60405180910390a1506001949350505050565b506000949350505050565b600381015415610746576000610749565b60015b60ff16600390910155565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea5675460018201546000917f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566918390600160801b900463ffffffff1660028111156107c0576107c06109cb565b905060008160028111156107d6576107d66109cb565b146107eb576107e6826001610a7a565b6107ed565b815b95945050505050565b82805482825590600052602060002090810192821561084b579160200282015b8281111561084b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610816565b5061085792915061085b565b5090565b5b80821115610857576000815560010161085c565b6001600160a01b038116811461088557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80356108a981610870565b919050565b600080600080600080600080610100898b0312156108cb57600080fd5b883597506020808a0135975060408a0135965060608a0135955060808a0135945060a08a01356108fa81610870565b935060c08a013561090a81610870565b925060e08a013567ffffffffffffffff8082111561092757600080fd5b818c0191508c601f83011261093b57600080fd5b81358181111561094d5761094d610888565b8060051b604051601f19603f8301168101818110858211171561097257610972610888565b60405291825284820192508381018501918f83111561099057600080fd5b938501935b828510156109b5576109a68561089e565b84529385019392850192610995565b8096505050505050509295985092959890939650565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610a0957610a096109e1565b500390565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b81811015610a5057858101830151858201608001528201610a34565b81811115610a62576000608083870101525b50601f01601f19169290920160800195945050505050565b60008219821115610a8d57610a8d6109e1565b500190565b6020810160038310610ab457634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220d295fe598a51a9a7d4558e9ef2647362090dd13a780b6201a93f6a29d35f52b564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bccb0daf14610030575b600080fd5b61004361003e3660046108ae565b610045565b005b6101267fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f8054600160ff1991821681179092557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369580548216831790556307f5828d60e41b6000527f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c380549091169091179055565b61012f81610158565b61013a8888886101fa565b6101458484846102d3565b61014e856103a1565b5050505050505050565b80517f8ab37fef2b2e34c4b62ff9948ee661cdcf34e209d7c20f4d1f6e83085e93b1fc9060088111156101c75760405162461bcd60e51b8152602060048201526012602482015271757020746f20382076616c696461746f727360701b60448201526064015b60405180910390fd5b82516101dc90600184019060208601906107f6565b50600282018190556101ed81610448565b8260030181905550505050565b7fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c8381557fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189d805463ffffffff8481166401000000000267ffffffffffffffff19909216868216179190911773ffffffff00000000ffffffff0000000000000000191642909116600160401b0263ffffffff60801b191617905560408051848152602081018490527fd6f5a5cd17f05cf9045751ee10f662f62e569c9371ffec8380510aabe63012d391015b60405180910390a150505050565b7f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc748390557f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc7580546001600160a01b038481166001600160a01b031992831681179093557f844e22529543d6e722c6477171dd50ffe5b412198b92cd9aeea62bbfabe4cc7380549185169190921681178255604080518781526020810194909452830152907f5b54873359173c3d639e39928ad34e113039ce7c799d500e57f8a2c703adb477906060016102c5565b7f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff600382108015906103d4575060408211155b6104205760405162461bcd60e51b815260206004820152601960248201527f4c6f67206f6620696e7075742073697a653a205b332c36345d0000000000000060448201526064016101be565b6001821b60028201556040805160208101909152600081526104439082906104a9565b505050565b600060088211156104905760405162461bcd60e51b8152602060048201526012602482015271757020746f20382076616c696461746f727360701b60448201526064016101be565b600061049f600180851b6109f7565b60f01b9392505050565b60006104b68383306104bd565b9392505050565b600283015482516000917fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c9111156105375760405162461bcd60e51b815260206004820152601860248201527f696e707574206c656e3a205b302c647269766553697a655d000000000000000060448201526064016101be565b61054081610662565b1561054e5761054e85610735565b600085600301546000146105655785600101610567565b855b9050600061057483610754565b8254604080516001600160a01b03891660208083019190915243828401524260608301526080820185905260a08083018590528351808403909101815260c0830184528051908201208b518c83012060e0840182905261010080850182905285518086039091018152610120909401909452825192820192909220600180860189556000898152929092209094018490558654949550909391929161061991906109f7565b847fa15a0da5519c084484141aaa73e525cee96062f5decc97e070f0c4da27738bc78a428d60405161064d93929190610a0e565b60405180910390a39998505050505050505050565b60018101546000908190600160801b900463ffffffff16600281111561068a5761068a6109cb565b600184015490915063ffffffff600160401b82048116911660008360028111156106b6576106b66109cb565b1480156106cb57506106c88183610a7a565b42115b1561072a576001858101805463ffffffff60801b1916600160801b1790556040517fed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f9161071791610a92565b60405180910390a1506001949350505050565b506000949350505050565b600381015415610746576000610749565b60015b60ff16600390910155565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea5675460018201546000917f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566918390600160801b900463ffffffff1660028111156107c0576107c06109cb565b905060008160028111156107d6576107d66109cb565b146107eb576107e6826001610a7a565b6107ed565b815b95945050505050565b82805482825590600052602060002090810192821561084b579160200282015b8281111561084b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610816565b5061085792915061085b565b5090565b5b80821115610857576000815560010161085c565b6001600160a01b038116811461088557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80356108a981610870565b919050565b600080600080600080600080610100898b0312156108cb57600080fd5b883597506020808a0135975060408a0135965060608a0135955060808a0135945060a08a01356108fa81610870565b935060c08a013561090a81610870565b925060e08a013567ffffffffffffffff8082111561092757600080fd5b818c0191508c601f83011261093b57600080fd5b81358181111561094d5761094d610888565b8060051b604051601f19603f8301168101818110858211171561097257610972610888565b60405291825284820192508381018501918f83111561099057600080fd5b938501935b828510156109b5576109a68561089e565b84529385019392850192610995565b8096505050505050509295985092959890939650565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610a0957610a096109e1565b500390565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b81811015610a5057858101830151858201608001528201610a34565b81811115610a62576000608083870101525b50601f01601f19169290920160800195945050505050565b60008219821115610a8d57610a8d6109e1565b500190565b6020810160038310610ab457634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220d295fe598a51a9a7d4558e9ef2647362090dd13a780b6201a93f6a29d35f52b564736f6c634300080d0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "events": {
      "FeeManagerInitialized(uint256,address,address)": {
        "params": {
          "feeManagerBank": "fee manager bank address",
          "feeManagerOwner": "fee manager owner address",
          "feePerClaim": "fee per claim to reward the validators"
        }
      },
      "RollupsInitialized(uint256,uint256)": {
        "params": {
          "challengePeriod": "duration of challenge period in seconds",
          "inputDuration": "duration of input accumulation phase in seconds"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "init(bytes32,uint256,uint256,uint256,uint256,address,address,address[])": {
        "details": "validators have to be unique, if the same validator is added twice      consensus will never be reached",
        "params": {
          "_challengePeriod": "duration of challenge period in seconds",
          "_feeManagerBank": "fee manager bank address",
          "_feeManagerOwner": "fee manager owner address",
          "_feePerClaim": "fee per claim to reward the validators",
          "_inputDuration": "duration of input accumulation phase in seconds",
          "_inputLog2Size": "size of the input memory range in this machine",
          "_templateHash": "state hash of the cartesi machine at t0",
          "_validators": "initial validator set"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAF0 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBCCB0DAF EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x8AE JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x126 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH32 0x699D9DAA71B280D05A152715774AFA0A81A312594B2D731D6B0B2552B7D6F69F DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH32 0xF97E938D8AF42F52387BB74B8B526FDA8F184CC2AA534340A8D75A88FBECC775 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH32 0x65D510A5D8F7EF134EC444F7F34EE808C8EEB5177CDFD16BE0C40FE1AB433695 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x0 MSTORE PUSH32 0x5622121B47B8CD0120C4EFE45DD5483242F54A3D49BD7679BE565D47694918C3 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x12F DUP2 PUSH2 0x158 JUMP JUMPDEST PUSH2 0x13A DUP9 DUP9 DUP9 PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x145 DUP5 DUP5 DUP5 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0x14E DUP6 PUSH2 0x3A1 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH32 0x8AB37FEF2B2E34C4B62FF9948EE661CDCF34E209D7C20F4D1F6E83085E93B1FC SWAP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x757020746F20382076616C696461746F7273 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x1DC SWAP1 PUSH1 0x1 DUP5 ADD SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x7F6 JUMP JUMPDEST POP PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH2 0x1ED DUP2 PUSH2 0x448 JUMP JUMPDEST DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C DUP4 DUP2 SSTORE PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189D DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 DUP2 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND DUP7 DUP3 AND OR SWAP2 SWAP1 SWAP2 OR PUSH20 0xFFFFFFFF00000000FFFFFFFF0000000000000000 NOT AND TIMESTAMP SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xD6F5A5CD17F05CF9045751EE10F662F62E569C9371FFEC8380510AABE63012D3 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC74 DUP4 SWAP1 SSTORE PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC75 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC73 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 SWAP1 SWAP3 AND DUP2 OR DUP3 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD MSTORE SWAP1 PUSH32 0x5B54873359173C3D639E39928AD34E113039CE7C799D500E57F8A2C703ADB477 SWAP1 PUSH1 0x60 ADD PUSH2 0x2C5 JUMP JUMPDEST PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF PUSH1 0x3 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x3D4 JUMPI POP PUSH1 0x40 DUP3 GT ISZERO JUMPDEST PUSH2 0x420 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C6F67206F6620696E7075742073697A653A205B332C36345D00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x1 DUP3 SHL PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH2 0x443 SWAP1 DUP3 SWAP1 PUSH2 0x4A9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 GT ISZERO PUSH2 0x490 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x757020746F20382076616C696461746F7273 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49F PUSH1 0x1 DUP1 DUP6 SHL PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0xF0 SHL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B6 DUP4 DUP4 ADDRESS PUSH2 0x4BD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD DUP3 MLOAD PUSH1 0x0 SWAP2 PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C SWAP2 GT ISZERO PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E707574206C656E3A205B302C647269766553697A655D0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST PUSH2 0x540 DUP2 PUSH2 0x662 JUMP JUMPDEST ISZERO PUSH2 0x54E JUMPI PUSH2 0x54E DUP6 PUSH2 0x735 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x3 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x565 JUMPI DUP6 PUSH1 0x1 ADD PUSH2 0x567 JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x574 DUP4 PUSH2 0x754 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE NUMBER DUP3 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 DUP4 ADD DUP5 MSTORE DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 DUP12 MLOAD DUP13 DUP4 ADD KECCAK256 PUSH1 0xE0 DUP5 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP6 MLOAD DUP1 DUP7 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x120 SWAP1 SWAP5 ADD SWAP1 SWAP5 MSTORE DUP3 MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 KECCAK256 PUSH1 0x1 DUP1 DUP7 ADD DUP10 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP5 ADD DUP5 SWAP1 SSTORE DUP7 SLOAD SWAP5 SWAP6 POP SWAP1 SWAP4 SWAP2 SWAP3 SWAP2 PUSH2 0x619 SWAP2 SWAP1 PUSH2 0x9F7 JUMP JUMPDEST DUP5 PUSH32 0xA15A0DA5519C084484141AAA73E525CEE96062F5DECC97E070F0C4DA27738BC7 DUP11 TIMESTAMP DUP14 PUSH1 0x40 MLOAD PUSH2 0x64D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x68A JUMPI PUSH2 0x68A PUSH2 0x9CB JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x6B6 JUMPI PUSH2 0x6B6 PUSH2 0x9CB JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x6CB JUMPI POP PUSH2 0x6C8 DUP2 DUP4 PUSH2 0xA7A JUMP JUMPDEST TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x72A JUMPI PUSH1 0x1 DUP6 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xED606D544C2202D032D2626C390923E6F260CA5D89625BBA0CFE70D2BDDA4E8F SWAP2 PUSH2 0x717 SWAP2 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0x746 JUMPI PUSH1 0x0 PUSH2 0x749 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP2 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7C0 JUMPI PUSH2 0x7C0 PUSH2 0x9CB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7D6 JUMPI PUSH2 0x7D6 PUSH2 0x9CB JUMP JUMPDEST EQ PUSH2 0x7EB JUMPI PUSH2 0x7E6 DUP3 PUSH1 0x1 PUSH2 0xA7A JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST DUP2 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x84B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x84B JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x816 JUMP JUMPDEST POP PUSH2 0x857 SWAP3 SWAP2 POP PUSH2 0x85B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x85C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x885 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x8A9 DUP2 PUSH2 0x870 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH1 0x20 DUP1 DUP11 ADD CALLDATALOAD SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH1 0xA0 DUP11 ADD CALLDATALOAD PUSH2 0x8FA DUP2 PUSH2 0x870 JUMP JUMPDEST SWAP4 POP PUSH1 0xC0 DUP11 ADD CALLDATALOAD PUSH2 0x90A DUP2 PUSH2 0x870 JUMP JUMPDEST SWAP3 POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x927 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP13 ADD SWAP2 POP DUP13 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x93B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x94D JUMPI PUSH2 0x94D PUSH2 0x888 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x972 JUMPI PUSH2 0x972 PUSH2 0x888 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP16 DUP4 GT ISZERO PUSH2 0x990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9A6 DUP6 PUSH2 0x89E JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x995 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xA09 JUMPI PUSH2 0xA09 PUSH2 0x9E1 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP2 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA50 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x80 ADD MSTORE DUP3 ADD PUSH2 0xA34 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA62 JUMPI PUSH1 0x0 PUSH1 0x80 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x80 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA8D JUMPI PUSH2 0xA8D PUSH2 0x9E1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0xAB4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 SWAP6 INVALID MSIZE DUP11 MLOAD 0xA9 0xA7 0xD4 SSTORE DUP15 SWAP15 CALLCODE PUSH5 0x7362090DD1 GASPRICE PUSH25 0xB6201A93F6A29D35F52B564736F6C634300080D0033000000 ",
      "sourceMap": "1489:5692:48:-:0;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@addInputFromSender_7690": {
          "entryPoint": 1213,
          "id": 7690,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@addInternalInput_7576": {
          "entryPoint": 1193,
          "id": 7576,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@diamondStorage_6221": {
          "entryPoint": null,
          "id": 6221,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7145": {
          "entryPoint": null,
          "id": 7145,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7488": {
          "entryPoint": null,
          "id": 7488,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7787": {
          "entryPoint": null,
          "id": 7787,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7898": {
          "entryPoint": null,
          "id": 7898,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_8343": {
          "entryPoint": null,
          "id": 8343,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getCurrentEpoch_8270": {
          "entryPoint": 1876,
          "id": 8270,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getNumberOfFinalizedEpochs_7819": {
          "entryPoint": null,
          "id": 7819,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@initERC165_10155": {
          "entryPoint": null,
          "id": 10155,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@initFeeManager_10378": {
          "entryPoint": 723,
          "id": 10378,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@initInput_10197": {
          "entryPoint": 929,
          "id": 10197,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@initRollups_10323": {
          "entryPoint": 506,
          "id": 10323,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@initValidatorManager_10247": {
          "entryPoint": 344,
          "id": 10247,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@init_10097": {
          "entryPoint": 69,
          "id": 10097,
          "parameterSlots": 8,
          "returnSlots": 0
        },
        "@newClaimsMaskWithConsensusGoalSet_5811": {
          "entryPoint": 1096,
          "id": 5811,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@notifyInput_7958": {
          "entryPoint": 1634,
          "id": 7958,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@swapInputBox_7744": {
          "entryPoint": 1845,
          "id": 7744,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "abi_decode_address_payable": {
          "entryPoint": 2206,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_uint256t_addresst_addresst_array$_t_address_payable_$dyn_memory_ptr": {
          "entryPoint": 2222,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 8
        },
        "abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 2574,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_enum$_Phase_$5662__to_t_uint8__fromStack_reversed": {
          "entryPoint": 2706,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_3d46b3663a57f81220591a9df8e802dff393da0b07bdc23351a28d7f9ab8ca47__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c96db3f4eb12b3889db743abc39efd0cfaf6a50bb9f2b590a7743b956a78cbe3__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_d1a2afdc0f74321c3b7d82f19b47510e11d228fd856d186619a9fd649a0593ab__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 2682,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 2551,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 2529,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 2507,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 2184,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_address": {
          "entryPoint": 2160,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:6264:49",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:49",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "59:86:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "123:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "132:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "135:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "125:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "125:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "125:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "82:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "93:5:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:3:49",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "113:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "104:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "104:11:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "117:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "100:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "100:19:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "89:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "89:31:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "79:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "79:42:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "72:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "72:50:49"
                      },
                      "nodeType": "YulIf",
                      "src": "69:70:49"
                    }
                  ]
                },
                "name": "validator_revert_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "48:5:49",
                    "type": ""
                  }
                ],
                "src": "14:131:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "182:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "199:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "206:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "211:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "202:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "202:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "192:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "192:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "192:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "239:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "242:4:49",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "232:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "232:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "232:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "263:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "266:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "256:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "256:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "256:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "150:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "339:85:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "349:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "371:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "358:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "358:20:49"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "349:5:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "412:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "387:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "387:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "387:31:49"
                    }
                  ]
                },
                "name": "abi_decode_address_payable",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "318:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "329:5:49",
                    "type": ""
                  }
                ],
                "src": "282:142:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "651:1536:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "698:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "707:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "710:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "700:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "700:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "700:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "672:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "681:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "668:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "668:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "693:3:49",
                            "type": "",
                            "value": "256"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "664:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "664:33:49"
                      },
                      "nodeType": "YulIf",
                      "src": "661:53:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "723:33:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "746:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "733:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "733:23:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "723:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "765:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "775:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "769:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "786:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "813:9:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "824:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "809:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "809:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "796:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "796:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "786:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "837:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "864:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "875:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "860:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "860:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "847:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "847:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "837:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "888:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "915:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "926:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "911:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "911:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "898:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "898:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "888:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "939:43:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "966:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "977:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "962:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "962:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "949:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "949:33:49"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "939:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "991:46:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1021:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1032:3:49",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1017:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1017:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1004:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1004:33:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "995:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1071:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "1046:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1046:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1046:31:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1086:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "1096:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "1086:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1110:48:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1142:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1153:3:49",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1138:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1138:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1125:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1125:33:49"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "1114:7:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1192:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "1167:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1167:33:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1167:33:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1209:17:49",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "1219:7:49"
                      },
                      "variableNames": [
                        {
                          "name": "value6",
                          "nodeType": "YulIdentifier",
                          "src": "1209:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1235:47:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1266:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1277:3:49",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1262:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1262:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1249:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1249:33:49"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "1239:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1291:28:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1301:18:49",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "1295:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1346:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1355:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1358:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1348:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1348:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1348:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1334:6:49"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "1342:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1331:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1331:14:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1328:34:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1371:32:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1385:9:49"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1396:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1381:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1381:22:49"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "1375:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1451:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1460:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1463:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1453:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1453:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1453:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "1430:2:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1434:4:49",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1426:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1426:13:49"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1441:7:49"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1422:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1422:27:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1415:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1415:35:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1412:55:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1476:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "1499:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1486:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1486:16:49"
                      },
                      "variables": [
                        {
                          "name": "_4",
                          "nodeType": "YulTypedName",
                          "src": "1480:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1525:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "1527:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1527:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1527:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "_4",
                            "nodeType": "YulIdentifier",
                            "src": "1517:2:49"
                          },
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "1521:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1514:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1514:10:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1511:36:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1556:20:49",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1570:1:49",
                            "type": "",
                            "value": "5"
                          },
                          {
                            "name": "_4",
                            "nodeType": "YulIdentifier",
                            "src": "1573:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "shl",
                          "nodeType": "YulIdentifier",
                          "src": "1566:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1566:10:49"
                      },
                      "variables": [
                        {
                          "name": "_5",
                          "nodeType": "YulTypedName",
                          "src": "1560:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1585:23:49",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1605:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "1599:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1599:9:49"
                      },
                      "variables": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulTypedName",
                          "src": "1589:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1617:56:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1639:6:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "1655:2:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1659:2:49",
                                    "type": "",
                                    "value": "63"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1651:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1651:11:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1668:2:49",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "1664:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1664:7:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1647:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1647:25:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1635:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1635:38:49"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "1621:10:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1732:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "1734:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1734:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1734:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1691:10:49"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1703:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1688:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1688:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1711:10:49"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1723:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1708:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1708:22:49"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "1685:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1685:46:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1682:72:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1770:2:49",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "1774:10:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1763:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1763:22:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1763:22:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1794:17:49",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "1805:6:49"
                      },
                      "variables": [
                        {
                          "name": "dst",
                          "nodeType": "YulTypedName",
                          "src": "1798:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1827:6:49"
                          },
                          {
                            "name": "_4",
                            "nodeType": "YulIdentifier",
                            "src": "1835:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1820:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1820:18:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1820:18:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1847:22:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1858:6:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1866:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1854:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1854:15:49"
                      },
                      "variableNames": [
                        {
                          "name": "dst",
                          "nodeType": "YulIdentifier",
                          "src": "1847:3:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1878:34:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1900:2:49"
                              },
                              {
                                "name": "_5",
                                "nodeType": "YulIdentifier",
                                "src": "1904:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1896:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1896:11:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1909:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1892:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1892:20:49"
                      },
                      "variables": [
                        {
                          "name": "srcEnd",
                          "nodeType": "YulTypedName",
                          "src": "1882:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1944:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1953:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1956:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1946:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1946:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1946:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1927:6:49"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1935:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1924:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1924:19:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1921:39:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1969:22:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "1984:2:49"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "1988:2:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1980:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1980:11:49"
                      },
                      "variables": [
                        {
                          "name": "src",
                          "nodeType": "YulTypedName",
                          "src": "1973:3:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2056:100:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "2077:3:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "2109:3:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_decode_address_payable",
                                    "nodeType": "YulIdentifier",
                                    "src": "2082:26:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2082:31:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2070:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2070:44:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2070:44:49"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "2127:19:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "dst",
                                  "nodeType": "YulIdentifier",
                                  "src": "2138:3:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2143:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2134:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2134:12:49"
                            },
                            "variableNames": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2127:3:49"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "2011:3:49"
                          },
                          {
                            "name": "srcEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2016:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "2008:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2008:15:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "2024:23:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "2026:19:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "2037:3:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2042:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "2033:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2033:12:49"
                            },
                            "variableNames": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "2026:3:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "2004:3:49",
                        "statements": []
                      },
                      "src": "2000:156:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2165:16:49",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "2175:6:49"
                      },
                      "variableNames": [
                        {
                          "name": "value7",
                          "nodeType": "YulIdentifier",
                          "src": "2165:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_uint256t_addresst_addresst_array$_t_address_payable_$dyn_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "561:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "572:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "584:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "592:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "600:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "608:6:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "616:6:49",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "624:6:49",
                    "type": ""
                  },
                  {
                    "name": "value6",
                    "nodeType": "YulTypedName",
                    "src": "632:6:49",
                    "type": ""
                  },
                  {
                    "name": "value7",
                    "nodeType": "YulTypedName",
                    "src": "640:6:49",
                    "type": ""
                  }
                ],
                "src": "429:1758:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2366:168:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2383:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2394:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2376:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2376:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2376:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2417:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2428:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2413:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2413:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2433:2:49",
                            "type": "",
                            "value": "18"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2406:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2406:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2406:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2456:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2467:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2452:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2452:18:49"
                          },
                          {
                            "hexValue": "757020746f20382076616c696461746f7273",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "2472:20:49",
                            "type": "",
                            "value": "up to 8 validators"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2445:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2445:48:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2445:48:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2502:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2514:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2525:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2510:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2510:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2502:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_d1a2afdc0f74321c3b7d82f19b47510e11d228fd856d186619a9fd649a0593ab__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2343:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2357:4:49",
                    "type": ""
                  }
                ],
                "src": "2192:342:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2571:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2588:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2595:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2600:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "2591:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2591:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2581:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2581:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2581:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2628:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2631:4:49",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2621:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2621:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2621:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2652:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2655:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "2645:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2645:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2645:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "2539:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2800:119:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2810:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2822:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2833:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2818:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2818:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2810:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2852:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2863:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2845:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2845:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2845:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2890:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2901:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2886:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2886:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "2906:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2879:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2879:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2879:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2761:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2772:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2780:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2791:4:49",
                    "type": ""
                  }
                ],
                "src": "2671:248:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3081:218:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3091:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3103:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3114:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3099:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3099:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3091:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3133:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "3144:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3126:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3126:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3126:25:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3160:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3178:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3183:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "3174:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3174:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3187:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "3170:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3170:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "3164:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3209:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3220:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3205:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3205:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3229:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3237:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3225:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3225:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3198:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3198:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3198:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3261:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3272:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3257:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3257:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "3281:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3289:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3277:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3277:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3250:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3250:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3250:43:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3034:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3045:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3053:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3061:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3072:4:49",
                    "type": ""
                  }
                ],
                "src": "2924:375:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3478:175:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3495:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3506:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3488:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3488:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3488:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3529:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3540:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3525:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3525:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3545:2:49",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3518:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3518:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3518:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3568:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3579:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3564:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3564:18:49"
                          },
                          {
                            "hexValue": "4c6f67206f6620696e7075742073697a653a205b332c36345d",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "3584:27:49",
                            "type": "",
                            "value": "Log of input size: [3,64]"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3557:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3557:55:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3557:55:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3621:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3633:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3644:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3629:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3629:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3621:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_3d46b3663a57f81220591a9df8e802dff393da0b07bdc23351a28d7f9ab8ca47__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3455:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3469:4:49",
                    "type": ""
                  }
                ],
                "src": "3304:349:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3690:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3707:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3714:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3719:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "3710:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3710:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3700:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3700:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3700:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3747:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3750:4:49",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3740:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3740:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3740:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3771:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3774:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "3764:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3764:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3764:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "3658:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3839:76:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3861:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "3863:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3863:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3863:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "3855:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3858:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "3852:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3852:8:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3849:34:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3892:17:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "3904:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3907:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "3900:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3900:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "3892:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "3821:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "3824:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "3830:4:49",
                    "type": ""
                  }
                ],
                "src": "3790:125:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4094:174:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4111:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4122:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4104:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4104:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4104:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4145:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4156:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4141:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4141:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4161:2:49",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4134:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4134:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4134:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4184:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4195:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4180:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4180:18:49"
                          },
                          {
                            "hexValue": "696e707574206c656e3a205b302c647269766553697a655d",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4200:26:49",
                            "type": "",
                            "value": "input len: [0,driveSize]"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4173:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4173:54:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4173:54:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4236:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4248:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4259:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4244:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4244:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4236:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c96db3f4eb12b3889db743abc39efd0cfaf6a50bb9f2b590a7743b956a78cbe3__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4071:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4085:4:49",
                    "type": ""
                  }
                ],
                "src": "3920:348:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4486:276:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4496:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4508:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4519:3:49",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4504:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4504:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4496:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4539:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4554:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4570:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4575:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "4566:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4566:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4579:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4562:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4562:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4550:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4550:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4532:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4532:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4532:51:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4603:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4614:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4599:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4599:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "4619:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4592:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4592:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4592:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4646:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4657:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4642:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4642:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "4662:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4635:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4635:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4635:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4689:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4700:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4685:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4685:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "4705:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4678:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4678:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4678:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4732:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4743:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4728:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4728:19:49"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "4749:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4721:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4721:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4721:35:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4423:9:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "4434:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "4442:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4450:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4458:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4466:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4477:4:49",
                    "type": ""
                  }
                ],
                "src": "4273:489:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4896:119:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4906:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4918:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4929:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4914:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4914:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4906:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4948:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "4959:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4941:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4941:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4941:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4986:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4997:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4982:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4982:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "5002:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4975:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4975:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4975:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4857:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4868:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4876:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4887:4:49",
                    "type": ""
                  }
                ],
                "src": "4767:248:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5195:591:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5212:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5227:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5243:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5248:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "5239:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5239:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5252:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5235:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5235:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5223:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5223:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5205:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5205:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5205:51:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5265:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5275:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5269:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5297:9:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5308:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5293:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5293:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "5313:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5286:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5286:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5286:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5340:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5351:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5336:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5336:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5356:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5329:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5329:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5329:30:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5368:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "5388:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "5382:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5382:13:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "5372:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5415:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5426:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5411:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5411:18:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "5431:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5404:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5404:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5404:34:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5447:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5456:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "5451:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5516:91:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "headStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "5545:9:49"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "5556:1:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5541:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5541:17:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5560:3:49",
                                      "type": "",
                                      "value": "128"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5537:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5537:27:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "value2",
                                              "nodeType": "YulIdentifier",
                                              "src": "5580:6:49"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "5588:1:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5576:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5576:14:49"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5592:2:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5572:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5572:23:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "5566:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5566:30:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "5530:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5530:67:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5530:67:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "5477:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "5480:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "5474:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5474:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "5488:19:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "5490:15:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "5499:1:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5502:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5495:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5495:10:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5490:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "5470:3:49",
                        "statements": []
                      },
                      "src": "5466:141:49"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5641:67:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "headStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "5670:9:49"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5681:6:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5666:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5666:22:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5690:3:49",
                                      "type": "",
                                      "value": "128"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5662:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5662:32:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5696:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "5655:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5655:43:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5655:43:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "5622:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "5625:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5619:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5619:13:49"
                      },
                      "nodeType": "YulIf",
                      "src": "5616:92:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5717:63:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5733:9:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "5752:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5760:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5748:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5748:15:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5769:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "5765:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5765:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5744:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5744:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5729:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5729:45:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5776:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5725:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5725:55:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5717:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5148:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5159:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5167:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5175:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5186:4:49",
                    "type": ""
                  }
                ],
                "src": "5020:766:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5839:80:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5866:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "5868:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5868:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5868:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "5855:1:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "5862:1:49"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "5858:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5858:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5852:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5852:13:49"
                      },
                      "nodeType": "YulIf",
                      "src": "5849:39:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5897:16:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "5908:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "5911:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5904:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5904:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "5897:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "5822:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "5825:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "5831:3:49",
                    "type": ""
                  }
                ],
                "src": "5791:128:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6033:229:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6043:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6055:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6066:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6051:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6051:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6043:4:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6111:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6132:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6139:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6144:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "6135:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6135:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "6125:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6125:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6125:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6176:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6179:4:49",
                                  "type": "",
                                  "value": "0x21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "6169:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6169:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6169:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6204:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6207:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6197:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6197:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6197:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6091:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6099:1:49",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6088:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6088:13:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6081:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6081:21:49"
                      },
                      "nodeType": "YulIf",
                      "src": "6078:144:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6238:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "6249:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6231:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6231:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6231:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_enum$_Phase_$5662__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6002:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6013:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6024:4:49",
                    "type": ""
                  }
                ],
                "src": "5924:338:49"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_address_payable(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_uint256t_uint256t_addresst_addresst_array$_t_address_payable_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        value1 := calldataload(add(headStart, _1))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        let value := calldataload(add(headStart, 160))\n        validator_revert_address(value)\n        value5 := value\n        let value_1 := calldataload(add(headStart, 192))\n        validator_revert_address(value_1)\n        value6 := value_1\n        let offset := calldataload(add(headStart, 224))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address_payable(src))\n            dst := add(dst, _1)\n        }\n        value7 := memPtr\n    }\n    function abi_encode_tuple_t_stringliteral_d1a2afdc0f74321c3b7d82f19b47510e11d228fd856d186619a9fd649a0593ab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"up to 8 validators\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_address__to_t_uint256_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_3d46b3663a57f81220591a9df8e802dff393da0b07bdc23351a28d7f9ab8ca47__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Log of input size: [3,64]\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_c96db3f4eb12b3889db743abc39efd0cfaf6a50bb9f2b590a7743b956a78cbe3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"input len: [0,driveSize]\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        let _1 := 32\n        mstore(add(headStart, _1), value1)\n        mstore(add(headStart, 64), 96)\n        let length := mload(value2)\n        mstore(add(headStart, 96), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 128), mload(add(add(value2, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 128), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_enum$_Phase_$5662__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 3))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n}",
          "id": 49,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBCCB0DAF EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x8AE JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x126 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH32 0x699D9DAA71B280D05A152715774AFA0A81A312594B2D731D6B0B2552B7D6F69F DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH32 0xF97E938D8AF42F52387BB74B8B526FDA8F184CC2AA534340A8D75A88FBECC775 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH32 0x65D510A5D8F7EF134EC444F7F34EE808C8EEB5177CDFD16BE0C40FE1AB433695 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x0 MSTORE PUSH32 0x5622121B47B8CD0120C4EFE45DD5483242F54A3D49BD7679BE565D47694918C3 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x12F DUP2 PUSH2 0x158 JUMP JUMPDEST PUSH2 0x13A DUP9 DUP9 DUP9 PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x145 DUP5 DUP5 DUP5 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0x14E DUP6 PUSH2 0x3A1 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH32 0x8AB37FEF2B2E34C4B62FF9948EE661CDCF34E209D7C20F4D1F6E83085E93B1FC SWAP1 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x757020746F20382076616C696461746F7273 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x1DC SWAP1 PUSH1 0x1 DUP5 ADD SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x7F6 JUMP JUMPDEST POP PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH2 0x1ED DUP2 PUSH2 0x448 JUMP JUMPDEST DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C DUP4 DUP2 SSTORE PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189D DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 DUP2 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND DUP7 DUP3 AND OR SWAP2 SWAP1 SWAP2 OR PUSH20 0xFFFFFFFF00000000FFFFFFFF0000000000000000 NOT AND TIMESTAMP SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xD6F5A5CD17F05CF9045751EE10F662F62E569C9371FFEC8380510AABE63012D3 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC74 DUP4 SWAP1 SSTORE PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC75 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH32 0x844E22529543D6E722C6477171DD50FFE5B412198B92CD9AEEA62BBFABE4CC73 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 SWAP1 SWAP3 AND DUP2 OR DUP3 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD MSTORE SWAP1 PUSH32 0x5B54873359173C3D639E39928AD34E113039CE7C799D500E57F8A2C703ADB477 SWAP1 PUSH1 0x60 ADD PUSH2 0x2C5 JUMP JUMPDEST PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF PUSH1 0x3 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x3D4 JUMPI POP PUSH1 0x40 DUP3 GT ISZERO JUMPDEST PUSH2 0x420 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C6F67206F6620696E7075742073697A653A205B332C36345D00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x1 DUP3 SHL PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH2 0x443 SWAP1 DUP3 SWAP1 PUSH2 0x4A9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 GT ISZERO PUSH2 0x490 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x757020746F20382076616C696461746F7273 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49F PUSH1 0x1 DUP1 DUP6 SHL PUSH2 0x9F7 JUMP JUMPDEST PUSH1 0xF0 SHL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B6 DUP4 DUP4 ADDRESS PUSH2 0x4BD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD DUP3 MLOAD PUSH1 0x0 SWAP2 PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C SWAP2 GT ISZERO PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E707574206C656E3A205B302C647269766553697A655D0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST PUSH2 0x540 DUP2 PUSH2 0x662 JUMP JUMPDEST ISZERO PUSH2 0x54E JUMPI PUSH2 0x54E DUP6 PUSH2 0x735 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x3 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x565 JUMPI DUP6 PUSH1 0x1 ADD PUSH2 0x567 JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x574 DUP4 PUSH2 0x754 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE NUMBER DUP3 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 DUP4 ADD DUP5 MSTORE DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 DUP12 MLOAD DUP13 DUP4 ADD KECCAK256 PUSH1 0xE0 DUP5 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP6 MLOAD DUP1 DUP7 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x120 SWAP1 SWAP5 ADD SWAP1 SWAP5 MSTORE DUP3 MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 KECCAK256 PUSH1 0x1 DUP1 DUP7 ADD DUP10 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP5 ADD DUP5 SWAP1 SSTORE DUP7 SLOAD SWAP5 SWAP6 POP SWAP1 SWAP4 SWAP2 SWAP3 SWAP2 PUSH2 0x619 SWAP2 SWAP1 PUSH2 0x9F7 JUMP JUMPDEST DUP5 PUSH32 0xA15A0DA5519C084484141AAA73E525CEE96062F5DECC97E070F0C4DA27738BC7 DUP11 TIMESTAMP DUP14 PUSH1 0x40 MLOAD PUSH2 0x64D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x68A JUMPI PUSH2 0x68A PUSH2 0x9CB JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x6B6 JUMPI PUSH2 0x6B6 PUSH2 0x9CB JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x6CB JUMPI POP PUSH2 0x6C8 DUP2 DUP4 PUSH2 0xA7A JUMP JUMPDEST TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x72A JUMPI PUSH1 0x1 DUP6 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xED606D544C2202D032D2626C390923E6F260CA5D89625BBA0CFE70D2BDDA4E8F SWAP2 PUSH2 0x717 SWAP2 PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0x746 JUMPI PUSH1 0x0 PUSH2 0x749 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP2 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7C0 JUMPI PUSH2 0x7C0 PUSH2 0x9CB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7D6 JUMPI PUSH2 0x7D6 PUSH2 0x9CB JUMP JUMPDEST EQ PUSH2 0x7EB JUMPI PUSH2 0x7E6 DUP3 PUSH1 0x1 PUSH2 0xA7A JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST DUP2 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x84B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x84B JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x816 JUMP JUMPDEST POP PUSH2 0x857 SWAP3 SWAP2 POP PUSH2 0x85B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x857 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x85C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x885 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x8A9 DUP2 PUSH2 0x870 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH1 0x20 DUP1 DUP11 ADD CALLDATALOAD SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH1 0xA0 DUP11 ADD CALLDATALOAD PUSH2 0x8FA DUP2 PUSH2 0x870 JUMP JUMPDEST SWAP4 POP PUSH1 0xC0 DUP11 ADD CALLDATALOAD PUSH2 0x90A DUP2 PUSH2 0x870 JUMP JUMPDEST SWAP3 POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x927 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP13 ADD SWAP2 POP DUP13 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x93B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x94D JUMPI PUSH2 0x94D PUSH2 0x888 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x972 JUMPI PUSH2 0x972 PUSH2 0x888 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP16 DUP4 GT ISZERO PUSH2 0x990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9A6 DUP6 PUSH2 0x89E JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x995 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xA09 JUMPI PUSH2 0xA09 PUSH2 0x9E1 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP2 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA50 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x80 ADD MSTORE DUP3 ADD PUSH2 0xA34 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA62 JUMPI PUSH1 0x0 PUSH1 0x80 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x80 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA8D JUMPI PUSH2 0xA8D PUSH2 0x9E1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0xAB4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 SWAP6 INVALID MSIZE DUP11 MLOAD 0xA9 0xA7 0xD4 SSTORE DUP15 SWAP15 CALLCODE PUSH5 0x7362090DD1 GASPRICE PUSH25 0xB6201A93F6A29D35F52B564736F6C634300080D0033000000 ",
      "sourceMap": "1489:5692:48:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2334:730;;;;;;:::i;:::-;;:::i;:::-;;;2824:12;3225:22;:49;;;:56;;3277:4;-1:-1:-1;;3225:56:48;;;;;;;;3291:53;:60;;;;;;;;3361:55;:62;;;;;;;;-1:-1:-1;;;3149:36:48;3433:49;;:56;;;;;;;;;;3109:387;2824:12;2846:33;2867:11;2846:20;:33::i;:::-;2889:60;2901:13;2916:14;2932:16;2889:11;:60::i;:::-;2959:63;2974:12;2988:15;3005:16;2959:14;:63::i;:::-;3032:25;3042:14;3032:9;:25::i;:::-;2334:730;;;;;;;;:::o;4201:699::-;4449:18;;942:45:44;;4506:1:48;4486:21;;;4478:52;;;;-1:-1:-1;;;4478:52:48;;2394:2:49;4478:52:48;;;2376:21:49;2433:2;2413:18;;;2406:30;-1:-1:-1;;;2452:18:49;;;2445:48;2510:18;;4478:52:48;;;;;;;;;4541:43;;;;:29;;;;:43;;;;;:::i;:::-;-1:-1:-1;4594:35:48;;;:54;;;4815:78;4632:16;4815:60;:78::i;:::-;4783:18;:29;;:110;;;;4289:611;;4201:699;:::o;5442:610::-;1277:36:43;5681:38:48;;;5729:23;:48;;;5787:52;;;;;-1:-1:-1;;5787:52:48;;;5729:48;;;5787:52;;;;;-1:-1:-1;;5917:60:48;5891:15;5849:58;;;-1:-1:-1;;;5849:58:48;-1:-1:-1;;;;5917:60:48;;;;5993:52;;;2845:25:49;;;2901:2;2886:18;;2879:34;;;5993:52:48;;2818:18:49;5993:52:48;;;;;;;;5574:478;5442:610;;;:::o;6651:528::-;6902:24;:39;;;6951:17;:42;;-1:-1:-1;;;;;6951:42:48;;;-1:-1:-1;;;;;;6951:42:48;;;;;;;;1107:39:40;7003:37:48;;;;;;;;;;;;;7056:116;;;3126:25:49;;;3220:2;3205:18;;3198:43;;;;3257:18;;3250:43;1107:39:40;7056:116:48;;3114:2:49;3099:18;7056:116:48;2924:375:49;3621:470:48;852:34:41;3799:1:48;3781:19;;;;;:43;;;3822:2;3804:14;:20;;3781:43;3760:115;;;;-1:-1:-1;;;3760:115:48;;3506:2:49;3760:115:48;;;3488:21:49;3545:2;3525:18;;;3518:30;3584:27;3564:18;;;3557:55;3629:18;;3760:115:48;3304:349:49;3760:115:48;3912:1;:19;;3886:22;;;:46;4056:28;;;;;;;;;-1:-1:-1;4056:28:48;;;;3886:7;;4056:24;:28::i;:::-;;3672:419;3621:470;:::o;1848:331:37:-;1962:10;2014:1;1996:14;:19;;1988:50;;;;-1:-1:-1;;;1988:50:37;;2394:2:49;1988:50:37;;;2376:21:49;2433:2;2413:18;;;2406:30;-1:-1:-1;;;2452:18:49;;;2445:48;2510:18;;1988:50:37;2192:342:49;1988:50:37;2048:21;2072:25;2096:1;2073:19;;;2072:25;:::i;:::-;2147:3;2130:20;;1848:331;-1:-1:-1;;;1848:331:37:o;3608:188:41:-;3715:7;3745:44;3764:2;3768:5;3783:4;3745:18;:44::i;:::-;3738:51;3608:188;-1:-1:-1;;;3608:188:41:o;4335:1454::-;4614:17;;;;4598:12;;4474:7;;1277:36:43;;4598:33:41;;4590:70;;;;-1:-1:-1;;;4590:70:41;;4122:2:49;4590:70:41;;;4104:21:49;4161:2;4141:18;;;4134:30;4200:26;4180:18;;;4173:54;4244:18;;4590:70:41;3920:348:49;4590:70:41;4759:23;:9;:21;:23::i;:::-;4755:70;;;4798:16;4811:2;4798:12;:16::i;:::-;4873:26;4902:2;:18;;;4924:1;4902:23;:77;;4967:2;:12;;4902:77;;;4940:2;4902:77;4873:106;;5025:20;5048:27;:9;:25;:27::i;:::-;5335:15;;5175:204;;;-1:-1:-1;;;;;4550:32:49;;5175:204:41;;;;4532:51:49;;;;5227:12:41;4599:18:49;;;4592:34;5257:15:41;4642:18:49;;;4635:34;4685:18;;;4678:34;;;4728:19;;;;4721:35;;;5175:204:41;;;;;;;;;;4504:19:49;;;5175:204:41;;5152:237;;;;;;5422:16;;;;;;5479:39;;;2845:25:49;;;2886:18;;;;2879:34;;;5479:39:41;;;;;;;;;;2818:18:49;;;;5479:39:41;;;5469:50;;;;;;;;;5568:24;;;;;;-1:-1:-1;5568:24:41;;;;;;;;;;;;;5658:15;;4678:34:49;;-1:-1:-1;5152:237:41;;5422:16;;5469:50;5658:19;;5568:24;5658:19;:::i;:::-;5632:12;5608:147;5691:6;5711:15;5740:5;5608:147;;;;;;;;:::i;:::-;;;;;;;;5773:9;4335:1454;-1:-1:-1;;;;;;;;;4335:1454:41:o;2837:583:43:-;2946:19;;;;2903:4;;;;-1:-1:-1;;;2946:19:43;;;;2940:26;;;;;;;;:::i;:::-;3009:25;;;;2919:47;;-1:-1:-1;3009:25:43;-1:-1:-1;;;3009:25:43;;;;;3068:16;2976:30;3112:12;:39;;;;;;;;:::i;:::-;;:111;;;;-1:-1:-1;3185:38:43;3210:13;3185:22;:38;:::i;:::-;3167:15;:56;3112:111;3095:297;;;3277:23;3248:19;;;:53;;-1:-1:-1;;;;3248:53:43;-1:-1:-1;;;3248:53:43;;;3320:36;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;3377:4:43;;2837:583;-1:-1:-1;;;;2837:583:43:o;3095:297::-;-1:-1:-1;3408:5:43;;2837:583;-1:-1:-1;;;;2837:583:43:o;6589:129:41:-;6679:18;;;;:23;6678:33;;6710:1;6678:33;;;6706:1;6678:33;6657:54;;:18;;;;:54;6589:129::o;7136:472:43:-;1752:14:42;:21;7440:19:43;;;;7235:7;;744:35:42;;7235:7:43;;-1:-1:-1;;;7440:19:43;;;;7434:26;;;;;;;;:::i;:::-;7413:47;-1:-1:-1;7506:23:43;7490:12;:39;;;;;;;;:::i;:::-;;:111;;7582:19;:15;7600:1;7582:19;:::i;:::-;7490:111;;;7548:15;7490:111;7471:130;7136:472;-1:-1:-1;;;;;7136:472:43:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:49;-1:-1:-1;;;;;89:31:49;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:127::-;211:10;206:3;202:20;199:1;192:31;242:4;239:1;232:15;266:4;263:1;256:15;282:142;358:20;;387:31;358:20;387:31;:::i;:::-;282:142;;;:::o;429:1758::-;584:6;592;600;608;616;624;632;640;693:3;681:9;672:7;668:23;664:33;661:53;;;710:1;707;700:12;661:53;746:9;733:23;723:33;;775:2;824;813:9;809:18;796:32;786:42;;875:2;864:9;860:18;847:32;837:42;;926:2;915:9;911:18;898:32;888:42;;977:3;966:9;962:19;949:33;939:43;;1032:3;1021:9;1017:19;1004:33;1046:31;1071:5;1046:31;:::i;:::-;1096:5;-1:-1:-1;1153:3:49;1138:19;;1125:33;1167;1125;1167;:::i;:::-;1219:7;-1:-1:-1;1277:3:49;1262:19;;1249:33;1301:18;1331:14;;;1328:34;;;1358:1;1355;1348:12;1328:34;1396:6;1385:9;1381:22;1371:32;;1441:7;1434:4;1430:2;1426:13;1422:27;1412:55;;1463:1;1460;1453:12;1412:55;1499:2;1486:16;1521:2;1517;1514:10;1511:36;;;1527:18;;:::i;:::-;1573:2;1570:1;1566:10;1605:2;1599:9;1668:2;1664:7;1659:2;1655;1651:11;1647:25;1639:6;1635:38;1723:6;1711:10;1708:22;1703:2;1691:10;1688:18;1685:46;1682:72;;;1734:18;;:::i;:::-;1770:2;1763:22;1820:18;;;1854:15;;;;-1:-1:-1;1896:11:49;;;1892:20;;;1924:19;;;1921:39;;;1956:1;1953;1946:12;1921:39;1980:11;;;;2000:156;2016:6;2011:3;2008:15;2000:156;;;2082:31;2109:3;2082:31;:::i;:::-;2070:44;;2033:12;;;;2134;;;;2000:156;;;2175:6;2165:16;;;;;;;;429:1758;;;;;;;;;;;:::o;2539:127::-;2600:10;2595:3;2591:20;2588:1;2581:31;2631:4;2628:1;2621:15;2655:4;2652:1;2645:15;3658:127;3719:10;3714:3;3710:20;3707:1;3700:31;3750:4;3747:1;3740:15;3774:4;3771:1;3764:15;3790:125;3830:4;3858:1;3855;3852:8;3849:34;;;3863:18;;:::i;:::-;-1:-1:-1;3900:9:49;;3790:125::o;5020:766::-;5252:1;5248;5243:3;5239:11;5235:19;5227:6;5223:32;5212:9;5205:51;5186:4;5275:2;5313:6;5308:2;5297:9;5293:18;5286:34;5356:2;5351;5340:9;5336:18;5329:30;5388:6;5382:13;5431:6;5426:2;5415:9;5411:18;5404:34;5456:1;5466:141;5480:6;5477:1;5474:13;5466:141;;;5576:14;;;5572:23;;5566:30;5541:17;;;5560:3;5537:27;5530:67;5495:10;;5466:141;;;5625:6;5622:1;5619:13;5616:92;;;5696:1;5690:3;5681:6;5670:9;5666:22;5662:32;5655:43;5616:92;-1:-1:-1;5769:2:49;5748:15;-1:-1:-1;;5744:29:49;5729:45;;;;5776:3;5725:55;;5020:766;-1:-1:-1;;;;;5020:766:49:o;5791:128::-;5831:3;5862:1;5858:6;5855:1;5852:13;5849:39;;;5868:18;;:::i;:::-;-1:-1:-1;5904:9:49;;5791:128::o;5924:338::-;6066:2;6051:18;;6099:1;6088:13;;6078:144;;6144:10;6139:3;6135:20;6132:1;6125:31;6179:4;6176:1;6169:15;6207:4;6204:1;6197:15;6078:144;6231:25;;;5924:338;:::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "560000",
        "executionCost": "594",
        "totalCost": "560594"
      },
      "external": {
        "init(bytes32,uint256,uint256,uint256,uint256,address,address,address[])": "infinite"
      },
      "internal": {
        "initERC165()": "infinite",
        "initFeeManager(uint256,address,address)": "infinite",
        "initInput(uint256)": "infinite",
        "initRollups(bytes32,uint256,uint256)": "infinite",
        "initValidatorManager(address payable[] memory)": "infinite"
      }
    },
    "methodIdentifiers": {
      "init(bytes32,uint256,uint256,uint256,uint256,address,address,address[])": "bccb0daf"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePerClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeManagerBank\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeManagerOwner\",\"type\":\"address\"}],\"name\":\"FeeManagerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengePeriod\",\"type\":\"uint256\"}],\"name\":\"RollupsInitialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_inputDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputLog2Size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePerClaim\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeManagerBank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManagerOwner\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_validators\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeManagerInitialized(uint256,address,address)\":{\"params\":{\"feeManagerBank\":\"fee manager bank address\",\"feeManagerOwner\":\"fee manager owner address\",\"feePerClaim\":\"fee per claim to reward the validators\"}},\"RollupsInitialized(uint256,uint256)\":{\"params\":{\"challengePeriod\":\"duration of challenge period in seconds\",\"inputDuration\":\"duration of input accumulation phase in seconds\"}}},\"kind\":\"dev\",\"methods\":{\"init(bytes32,uint256,uint256,uint256,uint256,address,address,address[])\":{\"details\":\"validators have to be unique, if the same validator is added twice      consensus will never be reached\",\"params\":{\"_challengePeriod\":\"duration of challenge period in seconds\",\"_feeManagerBank\":\"fee manager bank address\",\"_feeManagerOwner\":\"fee manager owner address\",\"_feePerClaim\":\"fee per claim to reward the validators\",\"_inputDuration\":\"duration of input accumulation phase in seconds\",\"_inputLog2Size\":\"size of the input memory range in this machine\",\"_templateHash\":\"state hash of the cartesi machine at t0\",\"_validators\":\"initial validator set\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FeeManagerInitialized(uint256,address,address)\":{\"notice\":\"FeeManagerImpl contract initialized\"},\"RollupsInitialized(uint256,uint256)\":{\"notice\":\"rollups contract initialized\"}},\"kind\":\"user\",\"methods\":{\"init(bytes32,uint256,uint256,uint256,uint256,address,address,address[])\":{\"notice\":\"initialize the Rollups contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgrade_initializers/DiamondInit.sol\":\"DiamondInit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IBank.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n// @title Bank interface\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBank {\\n    /// @notice returns the token used internally\\n    function getToken() external view returns (IERC20);\\n\\n    /// @notice get balance of `_owner`\\n    /// @param _owner account owner\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice transfer `_value` tokens from bank to `_to`\\n    /// @notice decrease the balance of caller by `_value`\\n    /// @param _to account that will receive `_value` tokens\\n    /// @param _value amount of tokens to be transfered\\n    function transferTokens(address _to, uint256 _value) external;\\n\\n    /// @notice transfer `_value` tokens from caller to bank\\n    /// @notice increase the balance of `_to` by `_value`\\n    /// @dev you may need to call `token.approve(bank, _value)`\\n    /// @param _to account that will have their balance increased by `_value`\\n    /// @param _value amount of tokens to be transfered\\n    function depositTokens(address _to, uint256 _value) external;\\n\\n    /// @notice `value` tokens were transfered from the bank to `to`\\n    /// @notice the balance of `from` was decreased by `value`\\n    /// @dev is triggered on any successful call to `transferTokens`\\n    /// @param from the account/contract that called `transferTokens` and\\n    ///              got their balance decreased by `value`\\n    /// @param to the one that received `value` tokens from the bank\\n    /// @param value amount of tokens that were transfered\\n    event Transfer(address indexed from, address to, uint256 value);\\n\\n    /// @notice `value` tokens were transfered from `from` to bank\\n    /// @notice the balance of `to` was increased by `value`\\n    /// @dev is triggered on any successful call to `depositTokens`\\n    /// @param from the account/contract that called `depositTokens` and\\n    ///              transfered `value` tokens to the bank\\n    /// @param to the one that got their balance increased by `value`\\n    /// @param value amount of tokens that were transfered\\n    event Deposit(address from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x483dc9b0c26e3a5d43148cf847bd4df2af03438a0d76d60d33549de3ca2dd77d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] diamondCut, address init, bytes callData);\\n}\\n\",\"keccak256\":\"0x6a3129be1f39b6fec871f2c94bf7debf2d6a4e665547a4d83e7f2def38359e44\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xd6c3796a7c45baea6e47fdd5f2cec95d7796991bc9a949604f99875590962a67\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc47289cda9c9cdb749612eb82ccb9abf9ab08dca74bdca22292ae7f765a15a5f\",\"license\":\"MIT\"},\"contracts/interfaces/IRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups interface\\npragma solidity >=0.7.0;\\n\\n// InputAccumulation - Inputs being accumulated for currrent epoch\\n// AwaitingConsensus - No disagreeing claims (or no claims)\\n// AwaitingDispute - Waiting for dispute to be over\\n// inputs received during InputAccumulation will be included in the\\n// current epoch. Inputs received while WaitingClaims or ChallengesInProgress\\n// are accumulated for the next epoch\\nenum Phase {\\n    InputAccumulation,\\n    AwaitingConsensus,\\n    AwaitingDispute\\n}\\n\\ninterface IRollups {\\n    /// @notice claim the result of current epoch\\n    /// @param _epochHash hash of epoch\\n    /// @dev ValidatorManager makes sure that msg.sender is allowed\\n    ///      and that claim != bytes32(0)\\n    /// TODO: add signatures for aggregated claims\\n    function claim(bytes32 _epochHash) external;\\n\\n    /// @notice finalize epoch after timeout\\n    /// @dev can only be called if challenge period is over\\n    function finalizeEpoch() external;\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two epochs two non\\n    ///      finalized epochs, one awaiting consensus/dispute and another\\n    ///      accumulating input\\n    function getCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice claim submitted\\n    /// @param epochHash claim being submitted by this epoch\\n    /// @param claimer address of current claimer\\n    /// @param epochNumber number of the epoch being submitted\\n    event Claim(\\n        uint256 indexed epochNumber,\\n        address claimer,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n}\\n\",\"keccak256\":\"0x241c3ee8bb900067903ac836d5f3ee81eca587c7f225ad6df686478a6b27329b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager interface\\npragma solidity >=0.7.0;\\n\\n// NoConflict - No conflicting claims or consensus\\n// Consensus - All validators had equal claims\\n// Conflict - Claim is conflicting with previous one\\nenum Result {\\n    NoConflict,\\n    Consensus,\\n    Conflict\\n}\\n\\n// TODO: What is the incentive for validators to not just copy the first claim that arrived?\\ninterface IValidatorManager {\\n    /// @notice get current claim\\n    function getCurrentClaim() external view returns (bytes32);\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n}\\n\",\"keccak256\":\"0x7eccbaf15dc80cd402459e8c940b0012fd3d3b8d2882fa13798afe92a9ea3b86\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibClaimsMask.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title ClaimsMask library\\npragma solidity >=0.8.8;\\n\\n// ClaimsMask is used to keep track of the number of claims for up to 8 validators\\n// | agreement mask | consensus goal mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n// |     8 bits     |        8 bits       |      30 bits       |      30 bits       | ... |      30 bits       |\\n// In Validator Manager, #claims_validator indicates the #claims the validator has made.\\n// In Fee Manager, #claims_validator indicates the #claims the validator has redeemed. In this case,\\n//      agreement mask and consensus goal mask are not used.\\n\\ntype ClaimsMask is uint256;\\n\\nlibrary LibClaimsMask {\\n    uint256 constant claimsBitLen = 30; // #bits used for each #claims\\n\\n    /// @notice this function creates a new ClaimsMask variable with value _value\\n    /// @param  _value the value following the format of ClaimsMask\\n    function newClaimsMask(uint256 _value) internal pure returns (ClaimsMask) {\\n        return ClaimsMask.wrap(_value);\\n    }\\n\\n    /// @notice this function creates a new ClaimsMask variable with the consensus goal mask set,\\n    ///         according to the number of validators\\n    /// @param  _numValidators the number of validators\\n    function newClaimsMaskWithConsensusGoalSet(uint256 _numValidators)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_numValidators <= 8, \\\"up to 8 validators\\\");\\n        uint256 consensusMask = (1 << _numValidators) - 1;\\n        return ClaimsMask.wrap(consensusMask << 240); // 256 - 8 - 8 = 240\\n    }\\n\\n    /// @notice this function returns the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    ///     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager\\n    function getNumClaims(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 bitmask = (1 << claimsBitLen) - 1;\\n        return\\n            (ClaimsMask.unwrap(_claimsMask) >>\\n                (claimsBitLen * _validatorIndex)) & bitmask;\\n    }\\n\\n    /// @notice this function increases the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the increase amount\\n    function increaseNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) internal pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 currentNum = getNumClaims(_claimsMask, _validatorIndex);\\n        uint256 newNum = currentNum + _value; // overflows checked by default with sol0.8\\n        return setNumClaims(_claimsMask, _validatorIndex, newNum);\\n    }\\n\\n    /// @notice this function sets the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the set value\\n    function setNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) internal pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        require(_value <= ((1 << claimsBitLen) - 1), \\\"ClaimsMask Overflow\\\");\\n        uint256 bitmask = ~(((1 << claimsBitLen) - 1) <<\\n            (claimsBitLen * _validatorIndex));\\n        uint256 clearedClaimsMask = ClaimsMask.unwrap(_claimsMask) & bitmask;\\n        _claimsMask = ClaimsMask.wrap(\\n            clearedClaimsMask | (_value << (claimsBitLen * _validatorIndex))\\n        );\\n        return _claimsMask;\\n    }\\n\\n    /// @notice get consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function clearAgreementMask(ClaimsMask _claimsMask)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        uint256 clearedMask = ClaimsMask.unwrap(_claimsMask) & ((1 << 248) - 1); // 256 - 8 = 248\\n        return ClaimsMask.wrap(clearedMask);\\n    }\\n\\n    /// @notice get the entire agreement mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getAgreementMask(ClaimsMask _claimsMask)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (ClaimsMask.unwrap(_claimsMask) >> 248); // get the first 8 bits\\n    }\\n\\n    /// @notice check if a validator has already claimed\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function alreadyClaimed(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // get the first 8 bits. Then & operation on the validator's bit to see if it's set\\n        return\\n            (((ClaimsMask.unwrap(_claimsMask) >> 248) >> _validatorIndex) &\\n                1) != 0;\\n    }\\n\\n    /// @notice set agreement mask for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function setAgreementMask(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 setMask = (ClaimsMask.unwrap(_claimsMask) |\\n            (1 << (248 + _validatorIndex))); // 256 - 8 = 248\\n        return ClaimsMask.wrap(setMask);\\n    }\\n\\n    /// @notice get the entire consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getConsensusGoalMask(ClaimsMask _claimsMask)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return ((ClaimsMask.unwrap(_claimsMask) << 8) >> 248); // get the second 8 bits\\n    }\\n\\n    /// @notice remove validator from the ClaimsMask\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function removeValidator(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        internal\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 claimsMaskValue = ClaimsMask.unwrap(_claimsMask);\\n        // remove validator from agreement bitmask\\n        uint256 zeroMask = ~(1 << (_validatorIndex + 248)); // 256 - 8 = 248\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from consensus goal mask\\n        zeroMask = ~(1 << (_validatorIndex + 240)); // 256 - 8 - 8 = 240\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from #claims\\n        return\\n            setNumClaims(ClaimsMask.wrap(claimsMaskValue), _validatorIndex, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x80b7355ef8d176c87e9c446542c4a7de8ee208601639af8acc23f6854f8f0080\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] diamondCut,\\n        address init,\\n        bytes callData\\n    );\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _selectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(\\n                _newFacetAddress,\\n                \\\"LibDiamondCut: Add facet has no code\\\"\\n            );\\n            for (\\n                uint256 selectorIndex;\\n                selectorIndex < _selectors.length;\\n                selectorIndex++\\n            ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    \\\"LibDiamondCut: Can't add function that already exists\\\"\\n                );\\n                // add facet for selector\\n                ds.facets[selector] =\\n                    bytes20(_newFacetAddress) |\\n                    bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot =\\n                    (_selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(\\n                _newFacetAddress,\\n                \\\"LibDiamondCut: Replace facet has no code\\\"\\n            );\\n            for (\\n                uint256 selectorIndex;\\n                selectorIndex < _selectors.length;\\n                selectorIndex++\\n            ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(\\n                    oldFacetAddress != address(this),\\n                    \\\"LibDiamondCut: Can't replace immutable function\\\"\\n                );\\n                require(\\n                    oldFacetAddress != _newFacetAddress,\\n                    \\\"LibDiamondCut: Can't replace function with same function\\\"\\n                );\\n                require(\\n                    oldFacetAddress != address(0),\\n                    \\\"LibDiamondCut: Can't replace function that doesn't exist\\\"\\n                );\\n                // replace old facet address\\n                ds.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(\\n                _newFacetAddress == address(0),\\n                \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n            );\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (\\n                uint256 selectorIndex;\\n                selectorIndex < _selectors.length;\\n                selectorIndex++\\n            ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(\\n                        address(bytes20(oldFacet)) != address(0),\\n                        \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n                    );\\n                    // only useful if immutable functions exist\\n                    require(\\n                        address(bytes20(oldFacet)) != address(this),\\n                        \\\"LibDiamondCut: Can't remove immutable function\\\"\\n                    );\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(\\n                        _selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x740ea3845282f09bb822e66a189ed431ac799ab08184de7457ef53799b2e99d6\",\"license\":\"MIT\"},\"contracts/libraries/LibDisputeManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Dispute Manager library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibDisputeManager {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    /// @notice initiates a dispute betweent two players\\n    /// @param claims conflicting claims\\n    /// @param claimers addresses of senders of conflicting claim\\n    /// @dev this is a mock implementation that just gives the win\\n    ///      to the address in the first posititon of claimers array\\n    function initiateDispute(\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        rollupsDS.resolveDispute(claimers[0], claimers[1], claims[0]);\\n    }\\n}\\n\",\"keccak256\":\"0x7d3fdb94a17c7f61ef8f6431f42eaa307b30398e3c24093c0526f449752563c9\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibFeeManager.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Fee Manager library\\npragma solidity ^0.8.0;\\n\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\nimport {IBank} from \\\"../IBank.sol\\\";\\n\\nlibrary LibFeeManager {\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n    using LibFeeManager for LibFeeManager.DiamondStorage;\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"FeeManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        address owner; // owner of Fee Manager\\n        uint256 feePerClaim;\\n        IBank bank; // bank that holds the tokens to pay validators\\n        bool lock; // reentrancy lock\\n        // A bit set used for up to 8 validators.\\n        // The first 16 bits are not used to keep compatibility with the validator manager contract.\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // |     not used    | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     16 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask numClaimsRedeemed;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function onlyOwner(DiamondStorage storage ds) internal view {\\n        require(ds.owner == msg.sender, \\\"caller is not the owner\\\");\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that's redeemable for the validator\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator\\n    function numClaimsRedeemable(DiamondStorage storage ds, address _validator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(_validator != address(0), \\\"address should not be 0\\\");\\n\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        uint256 totalClaims = validatorManagerDS.claimsMask.getNumClaims(\\n            valIndex\\n        );\\n        uint256 redeemedClaims = ds.numClaimsRedeemed.getNumClaims(valIndex);\\n\\n        // underflow checked by default with sol0.8\\n        // which means if the validator is removed, calling this function will\\n        // either return 0 or revert\\n        return totalClaims - redeemedClaims;\\n    }\\n\\n    /// @notice this function can be called to check the number of claims that has been redeemed for the validator\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator\\n    function getNumClaimsRedeemed(DiamondStorage storage ds, address _validator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(_validator != address(0), \\\"address should not be 0\\\");\\n\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        uint256 redeemedClaims = ds.numClaimsRedeemed.getNumClaims(valIndex);\\n\\n        return redeemedClaims;\\n    }\\n\\n    /// @notice contract owner can reset the value of fee per claim\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _value the new value of fee per claim\\n    function resetFeePerClaim(DiamondStorage storage ds, uint256 _value)\\n        internal\\n    {\\n        // before resetting the feePerClaim, pay fees for all validators as per current rates\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        for (uint256 valIndex; valIndex < validatorManagerDS.maxNumValidators; valIndex++) {\\n            address validator = validatorManagerDS.validators[valIndex];\\n            if (validator != address(0)) {\\n                uint256 nowRedeemingClaims = ds.numClaimsRedeemable(validator);\\n                if (nowRedeemingClaims > 0) {\\n                    ds.numClaimsRedeemed = ds.numClaimsRedeemed.increaseNumClaims(\\n                        valIndex,\\n                        nowRedeemingClaims\\n                    );\\n\\n                    uint256 feesToSend = nowRedeemingClaims * ds.feePerClaim; // number of erc20 tokens to send\\n                    ds.bank.transferTokens(validator, feesToSend); // will revert if transfer fails\\n                    // emit the number of claimed being redeemed, instead of the amount of tokens\\n                    emit FeeRedeemed(validator, nowRedeemingClaims);\\n                }\\n            }\\n        }\\n        ds.feePerClaim = _value;\\n        emit FeePerClaimReset(_value);\\n    }\\n\\n    /// @notice this function can be called to redeem fees for validators\\n    /// @param  ds pointer to FeeManager's diamond storage\\n    /// @param  _validator address of the validator that is redeeming\\n    function redeemFee(DiamondStorage storage ds, address _validator) internal {\\n        // follow the Checks-Effects-Interactions pattern for security\\n\\n        // ** checks **\\n        uint256 nowRedeemingClaims = ds.numClaimsRedeemable(_validator);\\n        require(nowRedeemingClaims > 0, \\\"nothing to redeem yet\\\");\\n\\n        // ** effects **\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n        uint256 valIndex = validatorManagerDS.getValidatorIndex(_validator); // will revert if not found\\n        ds.numClaimsRedeemed = ds.numClaimsRedeemed.increaseNumClaims(\\n            valIndex,\\n            nowRedeemingClaims\\n        );\\n\\n        // ** interactions **\\n        uint256 feesToSend = nowRedeemingClaims * ds.feePerClaim; // number of erc20 tokens to send\\n        ds.bank.transferTokens(_validator, feesToSend); // will revert if transfer fails\\n        // emit the number of claimed being redeemed, instead of the amount of tokens\\n        emit FeeRedeemed(_validator, nowRedeemingClaims);\\n    }\\n\\n    /// @notice emitted on resetting feePerClaim\\n    event FeePerClaimReset(uint256 value);\\n\\n    /// @notice emitted on ERC20 funds redeemed by validator\\n    event FeeRedeemed(address validator, uint256 claims);\\n}\\n\",\"keccak256\":\"0x56aa0836e83a6078d22974934176d4ff9bd81b561890989c4810cb794b66a5ff\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibInput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibInput {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Input.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // always needs to keep track of two input boxes:\\n        // 1 for the input accumulation of next epoch\\n        // and 1 for the messages during current epoch. To save gas we alternate\\n        // between inputBox0 and inputBox1\\n        bytes32[] inputBox0;\\n        bytes32[] inputBox1;\\n        uint256 inputDriveSize; // size of input flashdrive\\n        uint256 currentInputBox;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice get input inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @param index index of input inside that inbox\\n    /// @return hash of input at index index\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getInput(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1[index] : ds.inputBox0[index];\\n    }\\n\\n    /// @notice get number of inputs inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @return number of inputs on that input box\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getNumberOfInputs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1.length : ds.inputBox0.length;\\n    }\\n\\n    /// @notice add input to processed by next epoch\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, msg.sender);\\n    }\\n\\n    /// @notice add internal input to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInternalInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, address(this));\\n    }\\n\\n    /// @notice add input from a specific sender to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @param sender input sender address\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInputFromSender(\\n        DiamondStorage storage ds,\\n        bytes memory input,\\n        address sender\\n    ) internal returns (bytes32) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n\\n        require(input.length <= ds.inputDriveSize, \\\"input len: [0,driveSize]\\\");\\n\\n        // notifyInput returns true if that input\\n        // belongs to a new epoch\\n        if (rollupsDS.notifyInput()) {\\n            swapInputBox(ds);\\n        }\\n\\n        // points to correct inputBox\\n        bytes32[] storage inputBox = ds.currentInputBox == 0\\n            ? ds.inputBox0\\n            : ds.inputBox1;\\n\\n        // get current epoch index\\n        uint256 currentEpoch = rollupsDS.getCurrentEpoch();\\n\\n        // keccak 64 bytes into 32 bytes\\n        bytes32 keccakMetadata = keccak256(\\n            abi.encode(\\n                sender,\\n                block.number,\\n                block.timestamp,\\n                currentEpoch, // epoch index\\n                inputBox.length // input index\\n            )\\n        );\\n\\n        bytes32 keccakInput = keccak256(input);\\n\\n        bytes32 inputHash = keccak256(abi.encode(keccakMetadata, keccakInput));\\n\\n        // add input to correct inbox\\n        inputBox.push(inputHash);\\n\\n        emit InputAdded(\\n            currentEpoch,\\n            inputBox.length - 1,\\n            sender,\\n            block.timestamp,\\n            input\\n        );\\n\\n        return inputHash;\\n    }\\n\\n    /// @notice called when a new input accumulation phase begins\\n    ///         swap inbox to receive inputs for upcoming epoch\\n    /// @param ds diamond storage pointer\\n    function onNewInputAccumulation(DiamondStorage storage ds) internal {\\n        swapInputBox(ds);\\n    }\\n\\n    /// @notice called when a new epoch begins, clears deprecated inputs\\n    /// @param ds diamond storage pointer\\n    function onNewEpoch(DiamondStorage storage ds) internal {\\n        // clear input box for new inputs\\n        // the current input box should be accumulating inputs\\n        // for the new epoch already. So we clear the other one.\\n        ds.currentInputBox == 0 ? delete ds.inputBox1 : delete ds.inputBox0;\\n    }\\n\\n    /// @notice changes current input box\\n    /// @param ds diamond storage pointer\\n    function swapInputBox(DiamondStorage storage ds) internal {\\n        ds.currentInputBox = (ds.currentInputBox == 0) ? 1 : 0;\\n    }\\n\\n    /// @notice input added\\n    /// @param epochNumber which epoch this input belongs to\\n    /// @param inputIndex index of the input just added\\n    /// @param sender msg.sender\\n    /// @param timestamp block.timestamp\\n    /// @param input input data\\n    event InputAdded(\\n        uint256 indexed epochNumber,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        uint256 timestamp,\\n        bytes input\\n    );\\n}\\n\",\"keccak256\":\"0x9fec6d72c872e8f7f3adc79fa2bc5de8396d6ae97e2e23817e780e7d7a6cfaea\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibOutput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Output library\\npragma solidity ^0.8.0;\\n\\nlibrary LibOutput {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Output.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        mapping(uint256 => uint256) voucherBitmask;\\n        bytes32[] epochHashes;\\n        bool lock; //reentrancy lock\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice to be called when an epoch is finalized\\n    /// @param ds diamond storage pointer\\n    /// @param epochHash hash of finalized epoch\\n    /// @dev an epoch being finalized means that its vouchers can be called\\n    function onNewEpoch(DiamondStorage storage ds, bytes32 epochHash) internal {\\n        ds.epochHashes.push(epochHash);\\n    }\\n\\n    /// @notice get number of finalized epochs\\n    /// @param ds diamond storage pointer\\n    function getNumberOfFinalizedEpochs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.epochHashes.length;\\n    }\\n}\\n\",\"keccak256\":\"0xd0f88e13210013e9d5bde03399bb76304d6ab4e1f06d01c7e3525adc87a2d65e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups library\\npragma solidity ^0.8.0;\\n\\nimport {Phase} from \\\"../interfaces/IRollups.sol\\\";\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\nimport {LibOutput} from \\\"../libraries/LibOutput.sol\\\";\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibDisputeManager} from \\\"../libraries/LibDisputeManager.sol\\\";\\n\\nlibrary LibRollups {\\n    using LibInput for LibInput.DiamondStorage;\\n    using LibOutput for LibOutput.DiamondStorage;\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Rollups.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 templateHash; // state hash of the cartesi machine at t0\\n        uint32 inputDuration; // duration of input accumulation phase in seconds\\n        uint32 challengePeriod; // duration of challenge period in seconds\\n        uint32 inputAccumulationStart; // timestamp when current input accumulation phase started\\n        uint32 sealingEpochTimestamp; // timestamp on when a proposed epoch (claim) becomes challengeable\\n        uint32 currentPhase_int; // current phase in integer form\\n    }\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when new input arrives, manages the phase changes\\n    /// @param ds diamond storage pointer\\n    /// @dev can only be called by input contract\\n    function notifyInput(DiamondStorage storage ds) internal returns (bool) {\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n        uint256 inputAccumulationStart = ds.inputAccumulationStart;\\n        uint256 inputDuration = ds.inputDuration;\\n\\n        if (\\n            currentPhase == Phase.InputAccumulation &&\\n            block.timestamp > inputAccumulationStart + inputDuration\\n        ) {\\n            ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n            emit PhaseChange(Phase.AwaitingConsensus);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice called when a dispute is resolved by the dispute manager\\n    /// @param ds diamond storage pointer\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    function resolveDispute(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    ) internal {\\n        Result result;\\n        bytes32[2] memory claims;\\n        address payable[2] memory claimers;\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        (result, claims, claimers) = validatorManagerDS.onDisputeEnd(\\n            winner,\\n            loser,\\n            winningClaim\\n        );\\n\\n        // restart challenge period\\n        ds.sealingEpochTimestamp = uint32(block.timestamp);\\n\\n        emit ResolveDispute(winner, loser, winningClaim);\\n        resolveValidatorResult(ds, result, claims, claimers);\\n    }\\n\\n    /// @notice resolve results returned by validator manager\\n    /// @param ds diamond storage pointer\\n    /// @param result result from claim or dispute operation\\n    /// @param claims array of claims in case of new conflict\\n    /// @param claimers array of claimers in case of new conflict\\n    function resolveValidatorResult(\\n        DiamondStorage storage ds,\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        if (result == Result.NoConflict) {\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingConsensus) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n                emit PhaseChange(Phase.AwaitingConsensus);\\n            }\\n        } else if (result == Result.Consensus) {\\n            startNewEpoch(ds);\\n        } else {\\n            // for the case when result == Result.Conflict\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingDispute) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingDispute);\\n                emit PhaseChange(Phase.AwaitingDispute);\\n            }\\n            LibDisputeManager.initiateDispute(claims, claimers);\\n        }\\n    }\\n\\n    /// @notice starts new epoch\\n    /// @param ds diamond storage pointer\\n    function startNewEpoch(DiamondStorage storage ds) internal {\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        // reset input accumulation start and deactivate challenge period start\\n        ds.currentPhase_int = uint32(Phase.InputAccumulation);\\n        emit PhaseChange(Phase.InputAccumulation);\\n        ds.inputAccumulationStart = uint32(block.timestamp);\\n        ds.sealingEpochTimestamp = type(uint32).max;\\n\\n        bytes32 finalClaim = validatorManagerDS.onNewEpoch();\\n\\n        // emit event before finalized epoch is added to the Output storage\\n        emit FinalizeEpoch(outputDS.getNumberOfFinalizedEpochs(), finalClaim);\\n\\n        outputDS.onNewEpoch(finalClaim);\\n        inputDS.onNewEpoch();\\n    }\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @param ds diamond storage pointer\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two non finalized epochs,\\n    ///      one awaiting consensus/dispute and another accumulating input\\n    function getCurrentEpoch(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n\\n        uint256 finalizedEpochs = outputDS.getNumberOfFinalizedEpochs();\\n\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n\\n        return\\n            currentPhase == Phase.InputAccumulation\\n                ? finalizedEpochs\\n                : finalizedEpochs + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x04f72881c6032af40537ac14ff3720df2899a5746a42abd841b2292d66db11ca\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager library\\npragma solidity ^0.8.0;\\n\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\n\\nlibrary LibValidatorManager {\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"ValidatorManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 currentClaim; // current claim - first claim of this epoch\\n        address payable[] validators; // up to 8 validators\\n        uint256 maxNumValidators; // the maximum number of validators, set in the constructor\\n        // A bit set used for up to 8 validators.\\n        // The first 8 bits are used to indicate whom supports the current claim\\n        // The second 8 bits are used to indicate those should have claimed in order to reach consensus\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // | agreement mask | consensus mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     8 bits     |     8 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask claimsMask;\\n    }\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when a dispute ends in rollups\\n    /// @param ds diamond storage pointer\\n    /// @param winner address of dispute winner\\n    /// @param loser address of dispute loser\\n    /// @param winningClaim the winnning claim\\n    /// @return result of dispute being finished\\n    function onDisputeEnd(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        removeValidator(ds, loser);\\n\\n        if (winningClaim == ds.currentClaim) {\\n            // first claim stood, dont need to update the bitmask\\n            return\\n                isConsensus(ds)\\n                    ? emitDisputeEndedAndReturn(\\n                        Result.Consensus,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    )\\n                    : emitDisputeEndedAndReturn(\\n                        Result.NoConflict,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    );\\n        }\\n\\n        // if first claim lost, and other validators have agreed with it\\n        // there is a new dispute to be played\\n        if (ds.claimsMask.getAgreementMask() != 0) {\\n            return\\n                emitDisputeEndedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, winningClaim],\\n                    [getClaimerOfCurrentClaim(ds), winner]\\n                );\\n        }\\n        // else there are no valdiators that agree with losing claim\\n        // we can update current claim and check for consensus in case\\n        // the winner is the only validator left\\n        ds.currentClaim = winningClaim;\\n        updateClaimAgreementMask(ds, winner);\\n        return\\n            isConsensus(ds)\\n                ? emitDisputeEndedAndReturn(\\n                    Result.Consensus,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                )\\n                : emitDisputeEndedAndReturn(\\n                    Result.NoConflict,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                );\\n    }\\n\\n    /// @notice called when a new epoch starts\\n    /// @param ds diamond storage pointer\\n    /// @return current claim\\n    function onNewEpoch(DiamondStorage storage ds) internal returns (bytes32) {\\n        // reward validators who has made the correct claim by increasing their #claims\\n        claimFinalizedIncreaseCounts(ds);\\n\\n        bytes32 tmpClaim = ds.currentClaim;\\n\\n        // clear current claim\\n        ds.currentClaim = bytes32(0);\\n        // clear validator agreement bit mask\\n        ds.claimsMask = ds.claimsMask.clearAgreementMask();\\n\\n        emit NewEpoch(tmpClaim);\\n        return tmpClaim;\\n    }\\n\\n    /// @notice called when a claim is received by rollups\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of sender of that claim\\n    /// @param claim claim received by rollups\\n    /// @return result of claim, Consensus | NoConflict | Conflict\\n    /// @return [currentClaim, conflicting claim] if there is Conflict\\n    ///         [currentClaim, bytes32(0)] if there is Consensus or NoConflcit\\n    /// @return [claimer1, claimer2] if there is  Conflcit\\n    ///         [claimer1, address(0)] if there is Consensus or NoConflcit\\n    function onClaim(\\n        DiamondStorage storage ds,\\n        address payable sender,\\n        bytes32 claim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        require(claim != bytes32(0), \\\"empty claim\\\");\\n        require(isValidator(ds, sender), \\\"sender not allowed\\\");\\n\\n        // require the validator hasn't claimed in the same epoch before\\n        uint256 index = getValidatorIndex(ds, sender);\\n        require(\\n            !ds.claimsMask.alreadyClaimed(index),\\n            \\\"sender had claimed in this epoch before\\\"\\n        );\\n\\n        // cant return because a single claim might mean consensus\\n        if (ds.currentClaim == bytes32(0)) {\\n            ds.currentClaim = claim;\\n        }\\n\\n        if (claim != ds.currentClaim) {\\n            return\\n                emitClaimReceivedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, claim],\\n                    [getClaimerOfCurrentClaim(ds), sender]\\n                );\\n        }\\n        updateClaimAgreementMask(ds, sender);\\n\\n        return\\n            isConsensus(ds)\\n                ? emitClaimReceivedAndReturn(\\n                    Result.Consensus,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                )\\n                : emitClaimReceivedAndReturn(\\n                    Result.NoConflict,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                );\\n    }\\n\\n    /// @notice emits dispute ended event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitDisputeEndedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit DisputeEnded(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice emits claim received event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitClaimReceivedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit ClaimReceived(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice only call this function when a claim has been finalized\\n    ///         Either a consensus has been reached or challenge period has past\\n    /// @param ds pointer to diamond storage\\n    function claimFinalizedIncreaseCounts(DiamondStorage storage ds) internal {\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            // if a validator agrees with the current claim\\n            if ((agreementMask & (1 << i)) != 0) {\\n                // increase #claims by 1\\n                ds.claimsMask = ds.claimsMask.increaseNumClaims(i, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice removes a validator\\n    /// @param ds diamond storage pointer\\n    /// @param validator address of validator to be removed\\n    function removeValidator(DiamondStorage storage ds, address validator)\\n        internal\\n    {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (validator == ds.validators[i]) {\\n                // put address(0) in validators position\\n                ds.validators[i] = payable(0);\\n                // remove the validator from claimsMask\\n                ds.claimsMask = ds.claimsMask.removeValidator(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice check if consensus has been reached\\n    /// @param ds pointer to diamond storage\\n    function isConsensus(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        ClaimsMask claimsMask = ds.claimsMask;\\n        return\\n            claimsMask.getAgreementMask() == claimsMask.getConsensusGoalMask();\\n    }\\n\\n    /// @notice get one of the validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @return validator that agreed with current claim\\n    function getClaimerOfCurrentClaim(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (address payable)\\n    {\\n        // TODO: we are always getting the first validator\\n        // on the array that agrees with the current claim to enter a dispute\\n        // should this be random?\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (agreementMask & (1 << i) != 0) {\\n                return ds.validators[i];\\n            }\\n        }\\n        revert(\\\"Agreeing validator not found\\\");\\n    }\\n\\n    /// @notice updates mask of validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of validator that will be included in mask\\n    function updateClaimAgreementMask(\\n        DiamondStorage storage ds,\\n        address payable sender\\n    ) internal {\\n        uint256 validatorIndex = getValidatorIndex(ds, sender);\\n        ds.claimsMask = ds.claimsMask.setAgreementMask(validatorIndex);\\n    }\\n\\n    /// @notice check if the sender is a validator\\n    /// @param ds pointer to diamond storage\\n    /// @param sender sender address\\n    function isValidator(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice find the validator and return the index or revert\\n    /// @param ds pointer to diamond storage\\n    /// @param sender validator address\\n    /// @return validator index or revert\\n    function getValidatorIndex(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return i;\\n        }\\n        revert(\\\"validator not found\\\");\\n    }\\n\\n    /// @notice get number of claims the sender has made\\n    /// @param ds pointer to diamond storage\\n    /// @param _sender validator address\\n    /// @return #claims\\n    function getNumberOfClaimsByAddress(\\n        DiamondStorage storage ds,\\n        address payable _sender\\n    ) internal view returns (uint256) {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (_sender == ds.validators[i]) {\\n                return getNumberOfClaimsByIndex(ds, i);\\n            }\\n        }\\n        // if validator not found\\n        return 0;\\n    }\\n\\n    /// @notice get number of claims by the index in the validator set\\n    /// @param ds pointer to diamond storage\\n    /// @param index the index in validator set\\n    /// @return #claims\\n    function getNumberOfClaimsByIndex(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.claimsMask.getNumClaims(index);\\n    }\\n\\n    /// @notice get the maximum number of validators defined in validator manager\\n    /// @param ds pointer to diamond storage\\n    /// @return the maximum number of validators\\n    function getMaxNumValidators(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.maxNumValidators;\\n    }\\n}\\n\",\"keccak256\":\"0xa25792dbbddcb4f5ec3ef71e463e2df9153a90fecfa4b2cd81e03a6a06a45e83\",\"license\":\"Apache-2.0\"},\"contracts/upgrade_initializers/DiamondInit.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n// @title Diamond Initialization Contract\\npragma solidity ^0.8.0;\\n\\n// Rollups-related dependencies\\nimport {Phase} from \\\"../interfaces/IRollups.sol\\\";\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\nimport {LibFeeManager} from \\\"../libraries/LibFeeManager.sol\\\";\\nimport {IBank} from \\\"../IBank.sol\\\";\\n\\n// Diamond-related dependencies\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\"; // not in openzeppelin-contracts yet\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ncontract DiamondInit {\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n    using LibInput for LibInput.DiamondStorage;\\n\\n    /// @notice initialize the Rollups contract\\n    /// @param _templateHash state hash of the cartesi machine at t0\\n    /// @param _inputDuration duration of input accumulation phase in seconds\\n    /// @param _challengePeriod duration of challenge period in seconds\\n    /// @param _inputLog2Size size of the input memory range in this machine\\n    /// @param _feePerClaim fee per claim to reward the validators\\n    /// @param _feeManagerBank fee manager bank address\\n    /// @param _feeManagerOwner fee manager owner address\\n    /// @param _validators initial validator set\\n    /// @dev validators have to be unique, if the same validator is added twice\\n    ///      consensus will never be reached\\n    function init(\\n        // rollups init variables\\n        bytes32 _templateHash,\\n        uint256 _inputDuration,\\n        uint256 _challengePeriod,\\n        // input init variables\\n        uint256 _inputLog2Size,\\n        // fee manager init variables\\n        uint256 _feePerClaim,\\n        address _feeManagerBank,\\n        address _feeManagerOwner,\\n        // validator manager init variables\\n        address payable[] memory _validators\\n    ) external {\\n        // initializing facets\\n        initERC165();\\n        initValidatorManager(_validators);\\n        initRollups(_templateHash, _inputDuration, _challengePeriod);\\n        initFeeManager(_feePerClaim, _feeManagerBank, _feeManagerOwner);\\n        initInput(_inputLog2Size);\\n    }\\n\\n    /// @notice initialize ERC165 data\\n    function initERC165() private {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    /// @notice initalize the Input facet\\n    /// @param _inputLog2Size size of the input memory range in this machine\\n    function initInput(uint256 _inputLog2Size) private {\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n\\n        require(\\n            _inputLog2Size >= 3 && _inputLog2Size <= 64,\\n            \\\"Log of input size: [3,64]\\\"\\n        );\\n\\n        inputDS.inputDriveSize = (1 << _inputLog2Size);\\n\\n        // input box gets initialized with one empty input\\n        // so that the L2 DApp knows it's own address\\n        inputDS.addInternalInput(\\\"\\\");\\n    }\\n\\n    /// @notice initialize the Validator Manager facet\\n    /// @param _validators initial validator set\\n    function initValidatorManager(address payable[] memory _validators)\\n        private\\n    {\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        uint256 maxNumValidators = _validators.length;\\n\\n        require(maxNumValidators <= 8, \\\"up to 8 validators\\\");\\n\\n        validatorManagerDS.validators = _validators;\\n        validatorManagerDS.maxNumValidators = maxNumValidators;\\n\\n        // create a new ClaimsMask, with only the consensus goal set,\\n        //      according to the number of validators\\n        validatorManagerDS.claimsMask = LibClaimsMask\\n            .newClaimsMaskWithConsensusGoalSet(maxNumValidators);\\n    }\\n\\n    /// @notice rollups contract initialized\\n    /// @param inputDuration duration of input accumulation phase in seconds\\n    /// @param challengePeriod duration of challenge period in seconds\\n    event RollupsInitialized(uint256 inputDuration, uint256 challengePeriod);\\n\\n    /// @notice initialize the Rollups facet\\n    /// @param _templateHash state hash of the cartesi machine at t0\\n    /// @param _inputDuration duration of input accumulation phase in seconds\\n    /// @param _challengePeriod duration of challenge period in seconds\\n    function initRollups(\\n        bytes32 _templateHash,\\n        uint256 _inputDuration,\\n        uint256 _challengePeriod\\n    ) private {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n\\n        rollupsDS.templateHash = _templateHash;\\n        rollupsDS.inputDuration = uint32(_inputDuration);\\n        rollupsDS.challengePeriod = uint32(_challengePeriod);\\n        rollupsDS.inputAccumulationStart = uint32(block.timestamp);\\n        rollupsDS.currentPhase_int = uint32(Phase.InputAccumulation);\\n\\n        emit RollupsInitialized(_inputDuration, _challengePeriod);\\n    }\\n\\n    /// @notice FeeManagerImpl contract initialized\\n    /// @param feePerClaim fee per claim to reward the validators\\n    /// @param feeManagerBank fee manager bank address\\n    /// @param feeManagerOwner fee manager owner address\\n    event FeeManagerInitialized(\\n        uint256 feePerClaim,\\n        address feeManagerBank,\\n        address feeManagerOwner\\n    );\\n\\n    /// @notice initalize the Fee Manager facet\\n    /// @param _feePerClaim fee per claim to reward the validators\\n    /// @param _feeManagerBank fee manager bank address\\n    /// @param _feeManagerOwner fee manager owner address\\n    function initFeeManager(\\n        uint256 _feePerClaim,\\n        address _feeManagerBank,\\n        address _feeManagerOwner\\n    ) private {\\n        LibFeeManager.DiamondStorage storage feeManagerDS = LibFeeManager\\n            .diamondStorage();\\n\\n        feeManagerDS.feePerClaim = _feePerClaim;\\n        feeManagerDS.bank = IBank(_feeManagerBank);\\n        feeManagerDS.owner = _feeManagerOwner;\\n\\n        emit FeeManagerInitialized(\\n            _feePerClaim,\\n            _feeManagerBank,\\n            _feeManagerOwner\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe7cdcf9c5de5d29bb428edc2284d34a74813414b923d12702675a689c2012891\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "events": {
      "FeeManagerInitialized(uint256,address,address)": {
        "notice": "FeeManagerImpl contract initialized"
      },
      "RollupsInitialized(uint256,uint256)": {
        "notice": "rollups contract initialized"
      }
    },
    "kind": "user",
    "methods": {
      "init(bytes32,uint256,uint256,uint256,uint256,address,address,address[])": {
        "notice": "initialize the Rollups contract"
      }
    },
    "version": 1
  }
}