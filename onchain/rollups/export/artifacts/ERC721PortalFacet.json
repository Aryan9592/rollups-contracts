{
  "contractName": "ERC721PortalFacet",
  "sourceName": "contracts/facets/ERC721PortalFacet.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ERC721",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC721Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ERC721",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ERC721",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "erc721Deposit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "erc721Withdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506109fd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063150b7a021461004657806315e55ce51461009c5780636e9401e3146100bf575b600080fd5b61007e6100543660046106e4565b7f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6100af6100aa366004610757565b6100e0565b6040519015158152602001610093565b6100d26100cd366004610799565b6101ff565b604051908152602001610093565b60003330146101245760405162461bcd60e51b815260206004820152600b60248201526a37b7363c9034ba39b2b63360a91b60448201526064015b60405180910390fd5b60008080610134858701876107f5565b604051632142170760e11b81523060048201526001600160a01b03808416602483015260448201839052939650919450925084918216906342842e0e90606401600060405180830381600087803b15801561018e57600080fd5b505af11580156101a2573d6000803e3d6000fd5b5050604080516001600160a01b038089168252871660208201529081018590527feea167c0d54572a80626f5fd092a7c1f7b5d8e309533747e7e7d77b0558d6cf19250606001905060405180910390a15060019695505050505050565b6000807f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff604051632142170760e11b81523360048201523060248201526044810187905290915086906001600160a01b038216906342842e0e90606401600060405180830381600087803b15801561027657600080fd5b505af115801561028a573d6000803e3d6000fd5b5050505060007f64d9de45e7db1c0a7cb7960ad25107a6379b6ab85b30444f3a8d724857c1ac7833898989896040516020016102cb9695949392919061085f565b60405160208183030381529060405290507fd57e6e6bc6bb739e23ece1ca46fedc341bd22f8f305cb1b3c0cbc9ccd8419d908833898989604051610313959493929190610899565b60405180910390a16103258382610331565b98975050505050505050565b600061033e838330610345565b9392505050565b600283015482516000917fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c9111156103bf5760405162461bcd60e51b815260206004820152601860248201527f696e707574206c656e3a205b302c647269766553697a655d0000000000000000604482015260640161011b565b6103c8816104ea565b156103d6576103d6856105c2565b600085600301546000146103ed57856001016103ef565b855b905060006103fc836105e1565b8254604080516001600160a01b03891660208083019190915243828401524260608301526080820185905260a08083018590528351808403909101815260c0830184528051908201208b518c83012060e084018290526101008085018290528551808603909101815261012090940190945282519282019290922060018086018955600089815292909220909401849055865494955090939192916104a191906108ee565b847fa15a0da5519c084484141aaa73e525cee96062f5decc97e070f0c4da27738bc733428d6040516104d593929190610905565b60405180910390a39998505050505050505050565b60018101546000908190600160801b900463ffffffff16600281111561051257610512610971565b600184015490915063ffffffff68010000000000000000820481169116600083600281111561054357610543610971565b14801561055857506105558183610987565b42115b156105b7576001858101805463ffffffff60801b1916600160801b1790556040517fed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f916105a49161099f565b60405180910390a1506001949350505050565b506000949350505050565b6003810154156105d35760006105d6565b60015b60ff16600390910155565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea5675460018201546000917f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566918390600160801b900463ffffffff16600281111561064d5761064d610971565b9050600081600281111561066357610663610971565b1461067857610673826001610987565b61067a565b815b95945050505050565b6001600160a01b038116811461069857600080fd5b50565b60008083601f8401126106ad57600080fd5b50813567ffffffffffffffff8111156106c557600080fd5b6020830191508360208285010111156106dd57600080fd5b9250929050565b6000806000806000608086880312156106fc57600080fd5b853561070781610683565b9450602086013561071781610683565b935060408601359250606086013567ffffffffffffffff81111561073a57600080fd5b6107468882890161069b565b969995985093965092949392505050565b6000806020838503121561076a57600080fd5b823567ffffffffffffffff81111561078157600080fd5b61078d8582860161069b565b90969095509350505050565b600080600080606085870312156107af57600080fd5b84356107ba81610683565b935060208501359250604085013567ffffffffffffffff8111156107dd57600080fd5b6107e98782880161069b565b95989497509550505050565b60008060006060848603121561080a57600080fd5b833561081581610683565b9250602084013561082581610683565b929592945050506040919091013590565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8681526001600160a01b038681166020830152851660408201526060810184905260a0608082018190526000906103259083018486610836565b6001600160a01b03868116825285166020820152604081018490526080606082018190526000906108cd9083018486610836565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610900576109006108d8565b500390565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b818110156109475785810183015185820160800152820161092b565b81811115610959576000608083870101525b50601f01601f19169290920160800195945050505050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561099a5761099a6108d8565b500190565b60208101600383106109c157634e487b7160e01b600052602160045260246000fd5b9190529056fea264697066735822122037a668aec177fecc70f54e2e8cae4cca695179b134f33cba839b0e458163a57964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063150b7a021461004657806315e55ce51461009c5780636e9401e3146100bf575b600080fd5b61007e6100543660046106e4565b7f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6100af6100aa366004610757565b6100e0565b6040519015158152602001610093565b6100d26100cd366004610799565b6101ff565b604051908152602001610093565b60003330146101245760405162461bcd60e51b815260206004820152600b60248201526a37b7363c9034ba39b2b63360a91b60448201526064015b60405180910390fd5b60008080610134858701876107f5565b604051632142170760e11b81523060048201526001600160a01b03808416602483015260448201839052939650919450925084918216906342842e0e90606401600060405180830381600087803b15801561018e57600080fd5b505af11580156101a2573d6000803e3d6000fd5b5050604080516001600160a01b038089168252871660208201529081018590527feea167c0d54572a80626f5fd092a7c1f7b5d8e309533747e7e7d77b0558d6cf19250606001905060405180910390a15060019695505050505050565b6000807f943d5d24442f02461445e15c5d7d4a4ef0acb0d32c5d6f6af37a6882249912ff604051632142170760e11b81523360048201523060248201526044810187905290915086906001600160a01b038216906342842e0e90606401600060405180830381600087803b15801561027657600080fd5b505af115801561028a573d6000803e3d6000fd5b5050505060007f64d9de45e7db1c0a7cb7960ad25107a6379b6ab85b30444f3a8d724857c1ac7833898989896040516020016102cb9695949392919061085f565b60405160208183030381529060405290507fd57e6e6bc6bb739e23ece1ca46fedc341bd22f8f305cb1b3c0cbc9ccd8419d908833898989604051610313959493929190610899565b60405180910390a16103258382610331565b98975050505050505050565b600061033e838330610345565b9392505050565b600283015482516000917fd32d7f90491bee81172a406b65f3270d810392fe53bb0379dde8bdd4e624189c9111156103bf5760405162461bcd60e51b815260206004820152601860248201527f696e707574206c656e3a205b302c647269766553697a655d0000000000000000604482015260640161011b565b6103c8816104ea565b156103d6576103d6856105c2565b600085600301546000146103ed57856001016103ef565b855b905060006103fc836105e1565b8254604080516001600160a01b03891660208083019190915243828401524260608301526080820185905260a08083018590528351808403909101815260c0830184528051908201208b518c83012060e084018290526101008085018290528551808603909101815261012090940190945282519282019290922060018086018955600089815292909220909401849055865494955090939192916104a191906108ee565b847fa15a0da5519c084484141aaa73e525cee96062f5decc97e070f0c4da27738bc733428d6040516104d593929190610905565b60405180910390a39998505050505050505050565b60018101546000908190600160801b900463ffffffff16600281111561051257610512610971565b600184015490915063ffffffff68010000000000000000820481169116600083600281111561054357610543610971565b14801561055857506105558183610987565b42115b156105b7576001858101805463ffffffff60801b1916600160801b1790556040517fed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f916105a49161099f565b60405180910390a1506001949350505050565b506000949350505050565b6003810154156105d35760006105d6565b60015b60ff16600390910155565b7f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea5675460018201546000917f0635ad75fae4d4e8d896461a635d23700076a1c3fd8da26276f18cb1c09ea566918390600160801b900463ffffffff16600281111561064d5761064d610971565b9050600081600281111561066357610663610971565b1461067857610673826001610987565b61067a565b815b95945050505050565b6001600160a01b038116811461069857600080fd5b50565b60008083601f8401126106ad57600080fd5b50813567ffffffffffffffff8111156106c557600080fd5b6020830191508360208285010111156106dd57600080fd5b9250929050565b6000806000806000608086880312156106fc57600080fd5b853561070781610683565b9450602086013561071781610683565b935060408601359250606086013567ffffffffffffffff81111561073a57600080fd5b6107468882890161069b565b969995985093965092949392505050565b6000806020838503121561076a57600080fd5b823567ffffffffffffffff81111561078157600080fd5b61078d8582860161069b565b90969095509350505050565b600080600080606085870312156107af57600080fd5b84356107ba81610683565b935060208501359250604085013567ffffffffffffffff8111156107dd57600080fd5b6107e98782880161069b565b95989497509550505050565b60008060006060848603121561080a57600080fd5b833561081581610683565b9250602084013561082581610683565b929592945050506040919091013590565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8681526001600160a01b038681166020830152851660408201526060810184905260a0608082018190526000906103259083018486610836565b6001600160a01b03868116825285166020820152604081018490526080606082018190526000906108cd9083018486610836565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610900576109006108d8565b500390565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b818110156109475785810183015185820160800152820161092b565b81811115610959576000608083870101525b50601f01601f19169290920160800195945050505050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561099a5761099a6108d8565b500190565b60208101600383106109c157634e487b7160e01b600052602160045260246000fd5b9190529056fea264697066735822122037a668aec177fecc70f54e2e8cae4cca695179b134f33cba839b0e458163a57964736f6c634300080d0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "erc721Deposit(address,uint256,bytes)": {
        "params": {
          "_ERC721": "address of the ERC721 contract",
          "_data": "information to be interpreted by L2",
          "_tokenId": "index of token for the provided ERC721 contract"
        },
        "returns": {
          "_0": "hash of input generated by deposit"
        }
      },
      "erc721Withdrawal(bytes)": {
        "details": "can only be called by the Rollups contract",
        "params": {
          "_data": "data with withdrawal information"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9FD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x15E55CE5 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0x6E9401E3 EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E4 JUMP JUMPDEST PUSH32 0x150B7A023D4804D13E8C85FB27262CB750CF6BA9F9DD3BB30D90F482CEEB4B1F SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0xE0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH1 0x0 CALLER ADDRESS EQ PUSH2 0x124 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x37B7363C9034BA39B2B633 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x134 DUP6 DUP8 ADD DUP8 PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE SWAP4 SWAP7 POP SWAP2 SWAP5 POP SWAP3 POP DUP5 SWAP2 DUP3 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xEEA167C0D54572A80626F5FD092A7C1F7B5D8E309533747E7E7D77B0558D6CF1 SWAP3 POP PUSH1 0x60 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 SWAP2 POP DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x28A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH32 0x64D9DE45E7DB1C0A7CB7960AD25107A6379B6AB85B30444F3A8D724857C1AC78 CALLER DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CB SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x85F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH32 0xD57E6E6BC6BB739E23ECE1CA46FEDC341BD22F8F305CB1B3C0CBC9CCD8419D90 DUP9 CALLER DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x313 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x899 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x325 DUP4 DUP3 PUSH2 0x331 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP4 DUP4 ADDRESS PUSH2 0x345 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD DUP3 MLOAD PUSH1 0x0 SWAP2 PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C SWAP2 GT ISZERO PUSH2 0x3BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E707574206C656E3A205B302C647269766553697A655D0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x11B JUMP JUMPDEST PUSH2 0x3C8 DUP2 PUSH2 0x4EA JUMP JUMPDEST ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 DUP6 PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x3 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x3ED JUMPI DUP6 PUSH1 0x1 ADD PUSH2 0x3EF JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3FC DUP4 PUSH2 0x5E1 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE NUMBER DUP3 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 DUP4 ADD DUP5 MSTORE DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 DUP12 MLOAD DUP13 DUP4 ADD KECCAK256 PUSH1 0xE0 DUP5 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP6 MLOAD DUP1 DUP7 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x120 SWAP1 SWAP5 ADD SWAP1 SWAP5 MSTORE DUP3 MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 KECCAK256 PUSH1 0x1 DUP1 DUP7 ADD DUP10 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP5 ADD DUP5 SWAP1 SSTORE DUP7 SLOAD SWAP5 SWAP6 POP SWAP1 SWAP4 SWAP2 SWAP3 SWAP2 PUSH2 0x4A1 SWAP2 SWAP1 PUSH2 0x8EE JUMP JUMPDEST DUP5 PUSH32 0xA15A0DA5519C084484141AAA73E525CEE96062F5DECC97E070F0C4DA27738BC7 CALLER TIMESTAMP DUP14 PUSH1 0x40 MLOAD PUSH2 0x4D5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x905 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x512 JUMPI PUSH2 0x512 PUSH2 0x971 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF PUSH9 0x10000000000000000 DUP3 DIV DUP2 AND SWAP2 AND PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x543 JUMPI PUSH2 0x543 PUSH2 0x971 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x558 JUMPI POP PUSH2 0x555 DUP2 DUP4 PUSH2 0x987 JUMP JUMPDEST TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x5B7 JUMPI PUSH1 0x1 DUP6 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xED606D544C2202D032D2626C390923E6F260CA5D89625BBA0CFE70D2BDDA4E8F SWAP2 PUSH2 0x5A4 SWAP2 PUSH2 0x99F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 PUSH2 0x5D6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP2 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x64D JUMPI PUSH2 0x64D PUSH2 0x971 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x971 JUMP JUMPDEST EQ PUSH2 0x678 JUMPI PUSH2 0x673 DUP3 PUSH1 0x1 PUSH2 0x987 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST DUP2 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x6FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x707 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x717 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x746 DUP9 DUP3 DUP10 ADD PUSH2 0x69B JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x76A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78D DUP6 DUP3 DUP7 ADD PUSH2 0x69B JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x7BA DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E9 DUP8 DUP3 DUP9 ADD PUSH2 0x69B JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x80A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x815 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x825 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP6 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x325 SWAP1 DUP4 ADD DUP5 DUP7 PUSH2 0x836 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x8CD SWAP1 DUP4 ADD DUP5 DUP7 PUSH2 0x836 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x900 JUMPI PUSH2 0x900 PUSH2 0x8D8 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP2 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x947 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x80 ADD MSTORE DUP3 ADD PUSH2 0x92B JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x959 JUMPI PUSH1 0x0 PUSH1 0x80 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x80 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x99A JUMPI PUSH2 0x99A PUSH2 0x8D8 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x9C1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xA6 PUSH9 0xAEC177FECC70F54E2E DUP13 0xAE 0x4C 0xCA PUSH10 0x5179B134F33CBA839B0E GASLIMIT DUP2 PUSH4 0xA5796473 PUSH16 0x6C634300080D00330000000000000000 ",
      "sourceMap": "963:2335:17:-:0;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@addInputFromSender_7662": {
          "entryPoint": 837,
          "id": 7662,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@addInternalInput_7547": {
          "entryPoint": 817,
          "id": 7547,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@diamondStorage_7459": {
          "entryPoint": null,
          "id": 7459,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7759": {
          "entryPoint": null,
          "id": 7759,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@diamondStorage_7870": {
          "entryPoint": null,
          "id": 7870,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@erc721Deposit_3650": {
          "entryPoint": 511,
          "id": 3650,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@erc721Withdrawal_3715": {
          "entryPoint": 224,
          "id": 3715,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@getCurrentEpoch_8242": {
          "entryPoint": 1505,
          "id": 8242,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getNumberOfFinalizedEpochs_7791": {
          "entryPoint": null,
          "id": 7791,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@notifyInput_7930": {
          "entryPoint": 1258,
          "id": 7930,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@onERC721Received_3738": {
          "entryPoint": null,
          "id": 3738,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "@swapInputBox_7716": {
          "entryPoint": 1474,
          "id": 7716,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "abi_decode_bytes_calldata": {
          "entryPoint": 1691,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_address_payablet_address_payablet_uint256": {
          "entryPoint": 2037,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr": {
          "entryPoint": 1764,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr": {
          "entryPoint": 1945,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_bytes_calldata_ptr": {
          "entryPoint": 1879,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_encode_bytes_calldata": {
          "entryPoint": 2102,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_payable_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 2201,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 2309,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_bytes32_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 2143,
          "id": null,
          "parameterSlots": 7,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_enum$_Phase_$5664__to_t_uint8__fromStack_reversed": {
          "entryPoint": 2463,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_51082a759ffbac589c453a1a8e013d7023b9c30e175be30e35d3230343db4285__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_c96db3f4eb12b3889db743abc39efd0cfaf6a50bb9f2b590a7743b956a78cbe3__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 2439,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 2286,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 2264,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 2417,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_address": {
          "entryPoint": 1667,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:8975:49",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:49",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "59:86:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "123:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "132:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "135:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "125:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "125:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "125:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "82:5:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "93:5:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:3:49",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "113:1:49",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "104:3:49"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "104:11:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "117:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "100:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "100:19:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "89:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "89:31:49"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "79:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "79:42:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "72:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "72:50:49"
                      },
                      "nodeType": "YulIf",
                      "src": "69:70:49"
                    }
                  ]
                },
                "name": "validator_revert_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "48:5:49",
                    "type": ""
                  }
                ],
                "src": "14:131:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "222:275:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "271:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "280:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "283:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "273:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "273:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "273:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "250:6:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "258:4:49",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "246:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "246:17:49"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "265:3:49"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "242:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "242:27:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "235:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "235:35:49"
                      },
                      "nodeType": "YulIf",
                      "src": "232:55:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "296:30:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "319:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "306:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "306:20:49"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "296:6:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "369:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "378:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "381:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "371:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "371:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "371:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "341:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "349:18:49",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "338:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "338:30:49"
                      },
                      "nodeType": "YulIf",
                      "src": "335:50:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "394:29:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "410:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "418:4:49",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "406:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "406:17:49"
                      },
                      "variableNames": [
                        {
                          "name": "arrayPos",
                          "nodeType": "YulIdentifier",
                          "src": "394:8:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "475:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "484:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "487:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "477:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "477:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "477:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "446:6:49"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "454:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "442:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "442:19:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "463:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "438:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "438:30:49"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "470:3:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "435:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "435:39:49"
                      },
                      "nodeType": "YulIf",
                      "src": "432:59:49"
                    }
                  ]
                },
                "name": "abi_decode_bytes_calldata",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "185:6:49",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "193:3:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "arrayPos",
                    "nodeType": "YulTypedName",
                    "src": "201:8:49",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "211:6:49",
                    "type": ""
                  }
                ],
                "src": "150:347:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "642:614:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "689:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "698:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "701:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "691:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "691:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "691:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "663:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "672:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "659:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "659:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "684:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "655:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "655:33:49"
                      },
                      "nodeType": "YulIf",
                      "src": "652:53:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "714:36:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "740:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "727:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "727:23:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "718:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "784:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "759:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "759:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "759:31:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "799:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "809:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "799:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "823:47:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "855:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "866:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "851:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "851:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "838:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "838:32:49"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "827:7:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "904:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "879:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "879:33:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "879:33:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "921:17:49",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "931:7:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "921:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "947:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "974:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "985:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "970:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "970:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "957:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "957:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "947:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "998:46:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1029:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1040:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1025:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1025:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1012:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1012:32:49"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "1002:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1087:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1096:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1099:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1089:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1089:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1089:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1059:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1067:18:49",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1056:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1056:30:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1053:50:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1112:84:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1168:9:49"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1179:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1164:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1164:22:49"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1188:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "1138:25:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1138:58:49"
                      },
                      "variables": [
                        {
                          "name": "value3_1",
                          "nodeType": "YulTypedName",
                          "src": "1116:8:49",
                          "type": ""
                        },
                        {
                          "name": "value4_1",
                          "nodeType": "YulTypedName",
                          "src": "1126:8:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1205:18:49",
                      "value": {
                        "name": "value3_1",
                        "nodeType": "YulIdentifier",
                        "src": "1215:8:49"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "1205:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1232:18:49",
                      "value": {
                        "name": "value4_1",
                        "nodeType": "YulIdentifier",
                        "src": "1242:8:49"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "1232:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "576:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "587:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "599:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "607:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "615:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "623:6:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "631:6:49",
                    "type": ""
                  }
                ],
                "src": "502:754:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1360:103:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1370:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1382:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1393:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1378:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1378:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1370:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1412:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1427:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1439:3:49",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1444:10:49",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1435:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1435:20:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1423:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1423:33:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1405:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1405:52:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1405:52:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1329:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1340:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1351:4:49",
                    "type": ""
                  }
                ],
                "src": "1261:202:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1557:320:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1603:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1612:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1615:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1605:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1605:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1605:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1578:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1587:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1574:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1574:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1599:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1570:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1570:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1567:52:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1628:37:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1655:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1642:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1642:23:49"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "1632:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1708:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1717:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1720:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1710:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1710:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1710:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1680:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1688:18:49",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1677:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1677:30:49"
                      },
                      "nodeType": "YulIf",
                      "src": "1674:50:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1733:84:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1789:9:49"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1800:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1785:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1785:22:49"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1809:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "1759:25:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1759:58:49"
                      },
                      "variables": [
                        {
                          "name": "value0_1",
                          "nodeType": "YulTypedName",
                          "src": "1737:8:49",
                          "type": ""
                        },
                        {
                          "name": "value1_1",
                          "nodeType": "YulTypedName",
                          "src": "1747:8:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1826:18:49",
                      "value": {
                        "name": "value0_1",
                        "nodeType": "YulIdentifier",
                        "src": "1836:8:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1826:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1853:18:49",
                      "value": {
                        "name": "value1_1",
                        "nodeType": "YulIdentifier",
                        "src": "1863:8:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1853:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1515:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1526:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1538:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1546:6:49",
                    "type": ""
                  }
                ],
                "src": "1468:409:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1977:92:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1987:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1999:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2010:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1995:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1995:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1987:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2029:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2054:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2047:6:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2047:14:49"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2040:6:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2040:22:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2022:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2022:41:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2022:41:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1946:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1957:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1968:4:49",
                    "type": ""
                  }
                ],
                "src": "1882:187:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2197:489:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2243:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2252:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2255:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2245:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2245:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2245:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2218:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2227:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2214:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2214:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2239:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2210:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2210:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "2207:52:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2268:36:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2294:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2281:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2281:23:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "2272:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2338:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "2313:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2313:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2313:31:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2353:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2363:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2353:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2377:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2404:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2415:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2400:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2400:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2387:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2387:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2377:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2428:46:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2459:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2470:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2455:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2455:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2442:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2442:32:49"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "2432:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2517:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2526:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2529:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2519:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2519:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2519:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2489:6:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2497:18:49",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2486:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2486:30:49"
                      },
                      "nodeType": "YulIf",
                      "src": "2483:50:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2542:84:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2598:9:49"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2609:6:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2594:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2594:22:49"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2618:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bytes_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "2568:25:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2568:58:49"
                      },
                      "variables": [
                        {
                          "name": "value2_1",
                          "nodeType": "YulTypedName",
                          "src": "2546:8:49",
                          "type": ""
                        },
                        {
                          "name": "value3_1",
                          "nodeType": "YulTypedName",
                          "src": "2556:8:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2635:18:49",
                      "value": {
                        "name": "value2_1",
                        "nodeType": "YulIdentifier",
                        "src": "2645:8:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "2635:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2662:18:49",
                      "value": {
                        "name": "value3_1",
                        "nodeType": "YulIdentifier",
                        "src": "2672:8:49"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "2662:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2139:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2150:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2162:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2170:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2178:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "2186:6:49",
                    "type": ""
                  }
                ],
                "src": "2074:612:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2792:76:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2802:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2814:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2825:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2810:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2810:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2802:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2844:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2855:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2837:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2837:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2837:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2761:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2772:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2783:4:49",
                    "type": ""
                  }
                ],
                "src": "2691:177:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3047:161:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3064:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3075:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3057:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3057:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3057:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3098:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3109:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3094:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3094:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3114:2:49",
                            "type": "",
                            "value": "11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3087:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3087:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3087:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3137:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3148:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3133:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3133:18:49"
                          },
                          {
                            "hexValue": "6f6e6c7920697473656c66",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "3153:13:49",
                            "type": "",
                            "value": "only itself"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3126:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3126:41:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3126:41:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3176:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3188:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3199:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3184:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3184:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3176:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_51082a759ffbac589c453a1a8e013d7023b9c30e175be30e35d3230343db4285__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3024:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3038:4:49",
                    "type": ""
                  }
                ],
                "src": "2873:335:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3333:352:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3379:16:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3388:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3391:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3381:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3381:12:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3381:12:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3354:7:49"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3363:9:49"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3350:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3350:23:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3375:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3346:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3346:32:49"
                      },
                      "nodeType": "YulIf",
                      "src": "3343:52:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3404:36:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3430:9:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3417:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3417:23:49"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "3408:5:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3474:5:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "3449:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3449:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3449:31:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3489:15:49",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "3499:5:49"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3489:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3513:47:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3545:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3556:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3541:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3541:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3528:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3528:32:49"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "3517:7:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "3594:7:49"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "3569:24:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3569:33:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3569:33:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3611:17:49",
                      "value": {
                        "name": "value_1",
                        "nodeType": "YulIdentifier",
                        "src": "3621:7:49"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "3611:6:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3637:42:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3664:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3675:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3660:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3660:18:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3647:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3647:32:49"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "3637:6:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_payablet_address_payablet_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3283:9:49",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3294:7:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3306:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3314:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3322:6:49",
                    "type": ""
                  }
                ],
                "src": "3213:472:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3855:218:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3865:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3877:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3888:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3873:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3873:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3865:4:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3900:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3918:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3923:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "3914:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3914:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3927:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "3910:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3910:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "3904:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3945:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3960:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3968:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3956:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3956:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3938:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3938:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3938:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3992:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4003:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3988:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3988:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4012:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4020:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4008:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4008:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3981:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3981:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3981:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4044:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4055:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4040:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4040:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "4060:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4033:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4033:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4033:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3808:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3819:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3827:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3835:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3846:4:49",
                    "type": ""
                  }
                ],
                "src": "3690:383:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4251:218:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4261:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4273:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4284:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4269:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4269:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4261:4:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4296:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4314:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4319:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4310:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4310:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4323:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "4306:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4306:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "4300:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4341:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4356:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4364:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4352:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4352:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4334:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4334:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4334:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4388:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4399:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4384:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4384:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4408:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4416:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4404:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4404:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4377:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4377:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4377:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4440:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4451:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4436:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4436:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "4456:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4429:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4429:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4429:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_payable_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4204:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4215:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4223:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4231:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4242:4:49",
                    "type": ""
                  }
                ],
                "src": "4078:391:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4631:218:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4641:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4653:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4664:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4649:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4649:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4641:4:49"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4676:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4694:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4699:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4690:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4690:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4703:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "4686:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4686:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "4680:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4721:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4736:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4744:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4732:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4732:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4714:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4714:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4714:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4768:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4779:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4764:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4764:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4788:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4796:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4784:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4784:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4757:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4757:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4757:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4820:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4831:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4816:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4816:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "4836:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4809:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4809:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4809:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4584:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4595:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4603:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4611:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4622:4:49",
                    "type": ""
                  }
                ],
                "src": "4474:375:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4920:200:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4937:3:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "4942:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4930:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4930:19:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4930:19:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4975:3:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4980:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4971:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4971:14:49"
                          },
                          {
                            "name": "start",
                            "nodeType": "YulIdentifier",
                            "src": "4987:5:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "4994:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "4958:12:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4958:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4958:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5025:3:49"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5030:6:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5021:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5021:16:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5039:4:49",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5017:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5017:27:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5046:1:49",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5010:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5010:38:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5010:38:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5057:57:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5072:3:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "5085:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5093:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5081:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5081:15:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5102:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "5098:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5098:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5077:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5077:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5068:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5068:39:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5109:4:49",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5064:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5064:50:49"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "5057:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_bytes_calldata",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "start",
                    "nodeType": "YulTypedName",
                    "src": "4889:5:49",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "4896:6:49",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "4904:3:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "4912:3:49",
                    "type": ""
                  }
                ],
                "src": "4854:266:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5366:346:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5383:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5394:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5376:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5376:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5376:25:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5410:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5428:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5433:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "5424:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5424:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5437:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "5420:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5420:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5414:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5459:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5470:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5455:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5455:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5479:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5487:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5475:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5475:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5448:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5448:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5448:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5511:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5522:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5507:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5507:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "5531:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5539:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5527:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5527:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5500:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5500:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5500:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5563:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5574:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5559:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5559:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "5579:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5552:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5552:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5552:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5606:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5617:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5602:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5602:19:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5623:3:49",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5595:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5595:32:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5595:32:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5636:70:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "5670:6:49"
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulIdentifier",
                            "src": "5678:6:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5690:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5701:3:49",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5686:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5686:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "5644:25:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5644:62:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5636:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_bytes32_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5295:9:49",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "5306:6:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "5314:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "5322:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5330:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5338:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5346:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5357:4:49",
                    "type": ""
                  }
                ],
                "src": "5125:587:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5930:302:49",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5940:29:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5958:3:49",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5963:1:49",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "5954:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5954:11:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5967:1:49",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "5950:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5950:19:49"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5944:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5985:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6000:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6008:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5996:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5996:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5978:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5978:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5978:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6032:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6043:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6028:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6028:18:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6052:6:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6060:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6048:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6048:15:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6021:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6021:43:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6021:43:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6084:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6095:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6080:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6080:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "6100:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6073:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6073:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6073:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6127:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6138:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6123:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6123:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6143:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6116:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6116:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6116:31:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6156:70:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "6190:6:49"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "6198:6:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6210:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6221:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6206:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6206:19:49"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes_calldata",
                          "nodeType": "YulIdentifier",
                          "src": "6164:25:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6164:62:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6156:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5867:9:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "5878:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "5886:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "5894:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5902:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5910:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5921:4:49",
                    "type": ""
                  }
                ],
                "src": "5717:515:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6411:174:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6428:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6439:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6421:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6421:21:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6421:21:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6462:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6473:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6458:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6458:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6478:2:49",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6451:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6451:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6451:30:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6501:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6512:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6497:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6497:18:49"
                          },
                          {
                            "hexValue": "696e707574206c656e3a205b302c647269766553697a655d",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6517:26:49",
                            "type": "",
                            "value": "input len: [0,driveSize]"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6490:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6490:54:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6490:54:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6553:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6565:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6576:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6561:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6561:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6553:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_c96db3f4eb12b3889db743abc39efd0cfaf6a50bb9f2b590a7743b956a78cbe3__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6388:9:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6402:4:49",
                    "type": ""
                  }
                ],
                "src": "6237:348:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6803:276:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6813:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6825:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6836:3:49",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6821:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6821:19:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6813:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6856:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6871:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6887:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6892:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6883:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6883:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6896:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6879:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6879:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6867:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6867:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6849:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6849:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6849:51:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6920:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6931:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6916:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6916:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "6936:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6909:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6909:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6909:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6963:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6974:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6959:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6959:18:49"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "6979:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6952:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6952:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6952:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7006:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7017:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7002:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7002:18:49"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "7022:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6995:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6995:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6995:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7049:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7060:3:49",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7045:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7045:19:49"
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulIdentifier",
                            "src": "7066:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7038:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7038:35:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7038:35:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6740:9:49",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "6751:6:49",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "6759:6:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "6767:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6775:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6783:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6794:4:49",
                    "type": ""
                  }
                ],
                "src": "6590:489:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7213:119:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7223:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7235:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7246:2:49",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7231:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7231:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7223:4:49"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7265:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "7276:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7258:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7258:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7258:25:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7303:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7314:2:49",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7299:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7299:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "7319:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7292:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7292:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7292:34:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7174:9:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7185:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7193:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7204:4:49",
                    "type": ""
                  }
                ],
                "src": "7084:248:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7369:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7386:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7393:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7398:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "7389:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7389:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7379:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7379:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7379:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7426:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7429:4:49",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7419:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7419:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7419:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7450:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7453:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "7443:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7443:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7443:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "7337:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7518:76:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7540:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "7542:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7542:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7542:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7534:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "7537:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "7531:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7531:8:49"
                      },
                      "nodeType": "YulIf",
                      "src": "7528:34:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7571:17:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "7583:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "7586:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "7579:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7579:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "7571:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "7500:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "7503:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "7509:4:49",
                    "type": ""
                  }
                ],
                "src": "7469:125:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7774:591:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7791:9:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7806:6:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7822:3:49",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7827:1:49",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7818:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7818:11:49"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7831:1:49",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7814:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7814:19:49"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7802:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7802:32:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7784:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7784:51:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7784:51:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7844:12:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7854:2:49",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "7848:2:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7876:9:49"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7887:2:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7872:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7872:18:49"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "7892:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7865:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7865:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7865:34:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7919:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7930:2:49",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7915:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7915:18:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7935:2:49",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7908:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7908:30:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7908:30:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7947:27:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "7967:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "7961:5:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7961:13:49"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "7951:6:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7994:9:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8005:2:49",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7990:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7990:18:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8010:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7983:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7983:34:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7983:34:49"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8026:10:49",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8035:1:49",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "8030:1:49",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8095:91:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "headStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "8124:9:49"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "8135:1:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8120:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8120:17:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8139:3:49",
                                      "type": "",
                                      "value": "128"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8116:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8116:27:49"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "value2",
                                              "nodeType": "YulIdentifier",
                                              "src": "8159:6:49"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "8167:1:49"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8155:3:49"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8155:14:49"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "8171:2:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8151:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8151:23:49"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "8145:5:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8145:30:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8109:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8109:67:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8109:67:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "8056:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8059:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "8053:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8053:13:49"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "8067:19:49",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "8069:15:49",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "8078:1:49"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8081:2:49"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "8074:3:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8074:10:49"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "8069:1:49"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "8049:3:49",
                        "statements": []
                      },
                      "src": "8045:141:49"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8220:67:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "headStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "8249:9:49"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "8260:6:49"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8245:3:49"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8245:22:49"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8269:3:49",
                                      "type": "",
                                      "value": "128"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8241:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8241:32:49"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8275:1:49",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8234:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8234:43:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8234:43:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "8201:1:49"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "8204:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "8198:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8198:13:49"
                      },
                      "nodeType": "YulIf",
                      "src": "8195:92:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8296:63:49",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8312:9:49"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "8331:6:49"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8339:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8327:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8327:15:49"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8348:2:49",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8344:3:49"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8344:7:49"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8323:3:49"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8323:29:49"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8308:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8308:45:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8355:3:49",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8304:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8304:55:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8296:4:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7727:9:49",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "7738:6:49",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7746:6:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7754:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7765:4:49",
                    "type": ""
                  }
                ],
                "src": "7599:766:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8402:95:49",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8419:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8426:3:49",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8431:10:49",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "8422:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8422:20:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8412:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8412:31:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8412:31:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8459:1:49",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8462:4:49",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8452:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8452:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8452:15:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8483:1:49",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8486:4:49",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "8476:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8476:15:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8476:15:49"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "8370:127:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8550:80:49",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8577:22:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "8579:16:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8579:18:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8579:18:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "8566:1:49"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "8573:1:49"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "8569:3:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8569:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "8563:2:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8563:13:49"
                      },
                      "nodeType": "YulIf",
                      "src": "8560:39:49"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8608:16:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "8619:1:49"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "8622:1:49"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8615:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8615:9:49"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "8608:3:49"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "8533:1:49",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "8536:1:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "8542:3:49",
                    "type": ""
                  }
                ],
                "src": "8502:128:49"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8744:229:49",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8754:26:49",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8766:9:49"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8777:2:49",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8762:3:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8762:18:49"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8754:4:49"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8822:111:49",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8843:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8850:3:49",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8855:10:49",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "8846:3:49"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8846:20:49"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8836:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8836:31:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8836:31:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8887:1:49",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8890:4:49",
                                  "type": "",
                                  "value": "0x21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8880:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8880:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8880:15:49"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8915:1:49",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8918:4:49",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8908:6:49"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8908:15:49"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8908:15:49"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8802:6:49"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8810:1:49",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "8799:2:49"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8799:13:49"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "8792:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8792:21:49"
                      },
                      "nodeType": "YulIf",
                      "src": "8789:144:49"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8949:9:49"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "8960:6:49"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8942:6:49"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8942:25:49"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8942:25:49"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_enum$_Phase_$5664__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8713:9:49",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8724:6:49",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8735:4:49",
                    "type": ""
                  }
                ],
                "src": "8635:338:49"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_51082a759ffbac589c453a1a8e013d7023b9c30e175be30e35d3230343db4285__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"only itself\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_payable_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_bytes32_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_bytes_calldata(value4, value5, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_bytes_calldata(value3, value4, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_stringliteral_c96db3f4eb12b3889db743abc39efd0cfaf6a50bb9f2b590a7743b956a78cbe3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"input len: [0,driveSize]\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        let _1 := 32\n        mstore(add(headStart, _1), value1)\n        mstore(add(headStart, 64), 96)\n        let length := mload(value2)\n        mstore(add(headStart, 96), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 128), mload(add(add(value2, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 128), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 128)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_enum$_Phase_$5664__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 3))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n}",
          "id": 49,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x15E55CE5 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0x6E9401E3 EQ PUSH2 0xBF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E4 JUMP JUMPDEST PUSH32 0x150B7A023D4804D13E8C85FB27262CB750CF6BA9F9DD3BB30D90F482CEEB4B1F SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0xE0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x93 JUMP JUMPDEST PUSH1 0x0 CALLER ADDRESS EQ PUSH2 0x124 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x37B7363C9034BA39B2B633 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x134 DUP6 DUP8 ADD DUP8 PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE SWAP4 SWAP7 POP SWAP2 SWAP5 POP SWAP3 POP DUP5 SWAP2 DUP3 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xEEA167C0D54572A80626F5FD092A7C1F7B5D8E309533747E7E7D77B0558D6CF1 SWAP3 POP PUSH1 0x60 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x943D5D24442F02461445E15C5D7D4A4EF0ACB0D32C5D6F6AF37A6882249912FF PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 SWAP2 POP DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x28A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH32 0x64D9DE45E7DB1C0A7CB7960AD25107A6379B6AB85B30444F3A8D724857C1AC78 CALLER DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CB SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x85F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH32 0xD57E6E6BC6BB739E23ECE1CA46FEDC341BD22F8F305CB1B3C0CBC9CCD8419D90 DUP9 CALLER DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x313 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x899 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x325 DUP4 DUP3 PUSH2 0x331 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP4 DUP4 ADDRESS PUSH2 0x345 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD DUP3 MLOAD PUSH1 0x0 SWAP2 PUSH32 0xD32D7F90491BEE81172A406B65F3270D810392FE53BB0379DDE8BDD4E624189C SWAP2 GT ISZERO PUSH2 0x3BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E707574206C656E3A205B302C647269766553697A655D0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x11B JUMP JUMPDEST PUSH2 0x3C8 DUP2 PUSH2 0x4EA JUMP JUMPDEST ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 DUP6 PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x3 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x3ED JUMPI DUP6 PUSH1 0x1 ADD PUSH2 0x3EF JUMP JUMPDEST DUP6 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3FC DUP4 PUSH2 0x5E1 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE NUMBER DUP3 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 DUP4 ADD DUP5 MSTORE DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 DUP12 MLOAD DUP13 DUP4 ADD KECCAK256 PUSH1 0xE0 DUP5 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP6 MLOAD DUP1 DUP7 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH2 0x120 SWAP1 SWAP5 ADD SWAP1 SWAP5 MSTORE DUP3 MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 KECCAK256 PUSH1 0x1 DUP1 DUP7 ADD DUP10 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP5 ADD DUP5 SWAP1 SSTORE DUP7 SLOAD SWAP5 SWAP6 POP SWAP1 SWAP4 SWAP2 SWAP3 SWAP2 PUSH2 0x4A1 SWAP2 SWAP1 PUSH2 0x8EE JUMP JUMPDEST DUP5 PUSH32 0xA15A0DA5519C084484141AAA73E525CEE96062F5DECC97E070F0C4DA27738BC7 CALLER TIMESTAMP DUP14 PUSH1 0x40 MLOAD PUSH2 0x4D5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x905 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x512 JUMPI PUSH2 0x512 PUSH2 0x971 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF PUSH9 0x10000000000000000 DUP3 DIV DUP2 AND SWAP2 AND PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x543 JUMPI PUSH2 0x543 PUSH2 0x971 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x558 JUMPI POP PUSH2 0x555 DUP2 DUP4 PUSH2 0x987 JUMP JUMPDEST TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x5B7 JUMPI PUSH1 0x1 DUP6 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x80 SHL NOT AND PUSH1 0x1 PUSH1 0x80 SHL OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xED606D544C2202D032D2626C390923E6F260CA5D89625BBA0CFE70D2BDDA4E8F SWAP2 PUSH2 0x5A4 SWAP2 PUSH2 0x99F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 PUSH2 0x5D6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA567 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH32 0x635AD75FAE4D4E8D896461A635D23700076A1C3FD8DA26276F18CB1C09EA566 SWAP2 DUP4 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x64D JUMPI PUSH2 0x64D PUSH2 0x971 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x971 JUMP JUMPDEST EQ PUSH2 0x678 JUMPI PUSH2 0x673 DUP3 PUSH1 0x1 PUSH2 0x987 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST DUP2 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x6FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x707 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x717 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x746 DUP9 DUP3 DUP10 ADD PUSH2 0x69B JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x76A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78D DUP6 DUP3 DUP7 ADD PUSH2 0x69B JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x7BA DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E9 DUP8 DUP3 DUP9 ADD PUSH2 0x69B JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x80A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x815 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x825 DUP2 PUSH2 0x683 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP6 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x325 SWAP1 DUP4 ADD DUP5 DUP7 PUSH2 0x836 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x8CD SWAP1 DUP4 ADD DUP5 DUP7 PUSH2 0x836 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x900 JUMPI PUSH2 0x900 PUSH2 0x8D8 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP2 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x947 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x80 ADD MSTORE DUP3 ADD PUSH2 0x92B JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x959 JUMPI PUSH1 0x0 PUSH1 0x80 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x80 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x99A JUMPI PUSH2 0x99A PUSH2 0x8D8 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x9C1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xA6 PUSH9 0xAEC177FECC70F54E2E DUP13 0xAE 0x4C 0xCA PUSH10 0x5179B134F33CBA839B0E GASLIMIT DUP2 PUSH4 0xA5796473 PUSH16 0x6C634300080D00330000000000000000 ",
      "sourceMap": "963:2335:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2961:335;;;;;;:::i;:::-;3215:60;2961:335;;;;;;;;;;;-1:-1:-1;;;;;;1423:33:49;;;1405:52;;1393:2;1378:18;2961:335:17;;;;;;;;2292:618;;;;;;:::i;:::-;;:::i;:::-;;;2047:14:49;;2040:22;2022:41;;2010:2;1995:18;2292:618:17;1882:187:49;1459:660:17;;;;;;:::i;:::-;;:::i;:::-;;;2837:25:49;;;2825:2;2810:18;1459:660:17;2691:177:49;2292:618:17;2389:4;2492:10;2514:4;2492:27;2484:51;;;;-1:-1:-1;;;2484:51:17;;3075:2:49;2484:51:17;;;3057:21:49;3114:2;3094:18;;;3087:30;-1:-1:-1;;;3133:18:49;;;3126:41;3184:18;;2484:51:17;;;;;;;;;2547:17;;;2611:59;;;;2635:5;2611:59;:::i;:::-;2765:56;;-1:-1:-1;;;2765:56:17;;2796:4;2765:56;;;3938:34:49;-1:-1:-1;;;;;4008:15:49;;;3988:18;;;3981:43;4040:18;;;4033:34;;;2546:124:17;;-1:-1:-1;2546:124:17;;-1:-1:-1;2546:124:17;-1:-1:-1;2546:124:17;;2765:22;;;;;3873:18:49;;2765:56:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2837:45:17;;;-1:-1:-1;;;;;3956:15:49;;;3938:34;;4008:15;;4003:2;3988:18;;3981:43;4040:18;;;4033:34;;;2837:45:17;;-1:-1:-1;3888:2:49;3873:18;;-1:-1:-1;2837:45:17;;;;;;;-1:-1:-1;2899:4:17;;2292:618;-1:-1:-1;;;;;;2292:618:17:o;1459:660::-;1594:7;;852:34:41;1772:59:17;;-1:-1:-1;;;1772:59:17;;1795:10;1772:59;;;3938:34:49;1815:4:17;3988:18:49;;;3981:43;4040:18;;;4033:34;;;1613:67:17;;-1:-1:-1;1714:7:17;;-1:-1:-1;;;;;1772:22:17;;;;;3873:18:49;;1772:59:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1842:18;1111:28;1913:10;1937:7;1958:8;1980:5;;1863:132;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1842:153;;2011:53;2027:7;2036:10;2048:8;2058:5;;2011:53;;;;;;;;;;:::i;:::-;;;;;;;;2081:31;:7;2106:5;2081:24;:31::i;:::-;2074:38;1459:660;-1:-1:-1;;;;;;;;1459:660:17:o;3608:188:41:-;3715:7;3745:44;3764:2;3768:5;3783:4;3745:18;:44::i;:::-;3738:51;3608:188;-1:-1:-1;;;3608:188:41:o;4335:1458::-;4614:17;;;;4598:12;;4474:7;;1277:36:43;;4598:33:41;;4590:70;;;;-1:-1:-1;;;4590:70:41;;6439:2:49;4590:70:41;;;6421:21:49;6478:2;6458:18;;;6451:30;6517:26;6497:18;;;6490:54;6561:18;;4590:70:41;6237:348:49;4590:70:41;4759:23;:9;:21;:23::i;:::-;4755:70;;;4798:16;4811:2;4798:12;:16::i;:::-;4873:26;4902:2;:18;;;4924:1;4902:23;:77;;4967:2;:12;;4902:77;;;4940:2;4902:77;4873:106;;5025:20;5048:27;:9;:25;:27::i;:::-;5335:15;;5175:204;;;-1:-1:-1;;;;;6867:32:49;;5175:204:41;;;;6849:51:49;;;;5227:12:41;6916:18:49;;;6909:34;5257:15:41;6959:18:49;;;6952:34;7002:18;;;6995:34;;;7045:19;;;;7038:35;;;5175:204:41;;;;;;;;;;6821:19:49;;;5175:204:41;;5152:237;;;;;;5422:16;;;;;;5479:39;;;7258:25:49;;;7299:18;;;;7292:34;;;5479:39:41;;;;;;;;;;7231:18:49;;;;5479:39:41;;;5469:50;;;;;;;;;5568:24;;;;;;-1:-1:-1;5568:24:41;;;;;;;;;;;;;5658:15;;6995:34:49;;-1:-1:-1;5152:237:41;;5422:16;;5469:50;5658:19;;5568:24;5658:19;:::i;:::-;5632:12;5608:151;5691:10;5715:15;5744:5;5608:151;;;;;;;;:::i;:::-;;;;;;;;5777:9;4335:1458;-1:-1:-1;;;;;;;;;4335:1458:41:o;2837:583:43:-;2946:19;;;;2903:4;;;;-1:-1:-1;;;2946:19:43;;;;2940:26;;;;;;;;:::i;:::-;3009:25;;;;2919:47;;-1:-1:-1;3009:25:43;;;;;;;3068:16;2976:30;3112:12;:39;;;;;;;;:::i;:::-;;:111;;;;-1:-1:-1;3185:38:43;3210:13;3185:22;:38;:::i;:::-;3167:15;:56;3112:111;3095:297;;;3277:23;3248:19;;;:53;;-1:-1:-1;;;;3248:53:43;-1:-1:-1;;;3248:53:43;;;3320:36;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;3377:4:43;;2837:583;-1:-1:-1;;;;2837:583:43:o;3095:297::-;-1:-1:-1;3408:5:43;;2837:583;-1:-1:-1;;;;2837:583:43:o;6593:129:41:-;6683:18;;;;:23;6682:33;;6714:1;6682:33;;;6710:1;6682:33;6661:54;;:18;;;;:54;6593:129::o;7136:472:43:-;1752:14:42;:21;7440:19:43;;;;7235:7;;744:35:42;;7235:7:43;;-1:-1:-1;;;7440:19:43;;;;7434:26;;;;;;;;:::i;:::-;7413:47;-1:-1:-1;7506:23:43;7490:12;:39;;;;;;;;:::i;:::-;;:111;;7582:19;:15;7600:1;7582:19;:::i;:::-;7490:111;;;7548:15;7490:111;7471:130;7136:472;-1:-1:-1;;;;;7136:472:43:o;14:131:49:-;-1:-1:-1;;;;;89:31:49;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:347::-;201:8;211:6;265:3;258:4;250:6;246:17;242:27;232:55;;283:1;280;273:12;232:55;-1:-1:-1;306:20:49;;349:18;338:30;;335:50;;;381:1;378;371:12;335:50;418:4;410:6;406:17;394:29;;470:3;463:4;454:6;446;442:19;438:30;435:39;432:59;;;487:1;484;477:12;432:59;150:347;;;;;:::o;502:754::-;599:6;607;615;623;631;684:3;672:9;663:7;659:23;655:33;652:53;;;701:1;698;691:12;652:53;740:9;727:23;759:31;784:5;759:31;:::i;:::-;809:5;-1:-1:-1;866:2:49;851:18;;838:32;879:33;838:32;879:33;:::i;:::-;931:7;-1:-1:-1;985:2:49;970:18;;957:32;;-1:-1:-1;1040:2:49;1025:18;;1012:32;1067:18;1056:30;;1053:50;;;1099:1;1096;1089:12;1053:50;1138:58;1188:7;1179:6;1168:9;1164:22;1138:58;:::i;:::-;502:754;;;;-1:-1:-1;502:754:49;;-1:-1:-1;1215:8:49;;1112:84;502:754;-1:-1:-1;;;502:754:49:o;1468:409::-;1538:6;1546;1599:2;1587:9;1578:7;1574:23;1570:32;1567:52;;;1615:1;1612;1605:12;1567:52;1655:9;1642:23;1688:18;1680:6;1677:30;1674:50;;;1720:1;1717;1710:12;1674:50;1759:58;1809:7;1800:6;1789:9;1785:22;1759:58;:::i;:::-;1836:8;;1733:84;;-1:-1:-1;1468:409:49;-1:-1:-1;;;;1468:409:49:o;2074:612::-;2162:6;2170;2178;2186;2239:2;2227:9;2218:7;2214:23;2210:32;2207:52;;;2255:1;2252;2245:12;2207:52;2294:9;2281:23;2313:31;2338:5;2313:31;:::i;:::-;2363:5;-1:-1:-1;2415:2:49;2400:18;;2387:32;;-1:-1:-1;2470:2:49;2455:18;;2442:32;2497:18;2486:30;;2483:50;;;2529:1;2526;2519:12;2483:50;2568:58;2618:7;2609:6;2598:9;2594:22;2568:58;:::i;:::-;2074:612;;;;-1:-1:-1;2645:8:49;-1:-1:-1;;;;2074:612:49:o;3213:472::-;3306:6;3314;3322;3375:2;3363:9;3354:7;3350:23;3346:32;3343:52;;;3391:1;3388;3381:12;3343:52;3430:9;3417:23;3449:31;3474:5;3449:31;:::i;:::-;3499:5;-1:-1:-1;3556:2:49;3541:18;;3528:32;3569:33;3528:32;3569:33;:::i;:::-;3213:472;;3621:7;;-1:-1:-1;;;3675:2:49;3660:18;;;;3647:32;;3213:472::o;4854:266::-;4942:6;4937:3;4930:19;4994:6;4987:5;4980:4;4975:3;4971:14;4958:43;-1:-1:-1;5046:1:49;5021:16;;;5039:4;5017:27;;;5010:38;;;;5102:2;5081:15;;;-1:-1:-1;;5077:29:49;5068:39;;;5064:50;;4854:266::o;5125:587::-;5376:25;;;-1:-1:-1;;;;;5475:15:49;;;5470:2;5455:18;;5448:43;5527:15;;5522:2;5507:18;;5500:43;5574:2;5559:18;;5552:34;;;5428:3;5617;5602:19;;5595:32;;;5357:4;;5644:62;;5686:19;;5678:6;5670;5644:62;:::i;5717:515::-;-1:-1:-1;;;;;5996:15:49;;;5978:34;;6048:15;;6043:2;6028:18;;6021:43;6095:2;6080:18;;6073:34;;;6143:3;6138:2;6123:18;;6116:31;;;5921:4;;6164:62;;6206:19;;6198:6;6190;6164:62;:::i;:::-;6156:70;5717:515;-1:-1:-1;;;;;;;5717:515:49:o;7337:127::-;7398:10;7393:3;7389:20;7386:1;7379:31;7429:4;7426:1;7419:15;7453:4;7450:1;7443:15;7469:125;7509:4;7537:1;7534;7531:8;7528:34;;;7542:18;;:::i;:::-;-1:-1:-1;7579:9:49;;7469:125::o;7599:766::-;7831:1;7827;7822:3;7818:11;7814:19;7806:6;7802:32;7791:9;7784:51;7765:4;7854:2;7892:6;7887:2;7876:9;7872:18;7865:34;7935:2;7930;7919:9;7915:18;7908:30;7967:6;7961:13;8010:6;8005:2;7994:9;7990:18;7983:34;8035:1;8045:141;8059:6;8056:1;8053:13;8045:141;;;8155:14;;;8151:23;;8145:30;8120:17;;;8139:3;8116:27;8109:67;8074:10;;8045:141;;;8204:6;8201:1;8198:13;8195:92;;;8275:1;8269:3;8260:6;8249:9;8245:22;8241:32;8234:43;8195:92;-1:-1:-1;8348:2:49;8327:15;-1:-1:-1;;8323:29:49;8308:45;;;;8355:3;8304:55;;7599:766;-1:-1:-1;;;;;7599:766:49:o;8370:127::-;8431:10;8426:3;8422:20;8419:1;8412:31;8462:4;8459:1;8452:15;8486:4;8483:1;8476:15;8502:128;8542:3;8573:1;8569:6;8566:1;8563:13;8560:39;;;8579:18;;:::i;:::-;-1:-1:-1;8615:9:49;;8502:128::o;8635:338::-;8777:2;8762:18;;8810:1;8799:13;;8789:144;;8855:10;8850:3;8846:20;8843:1;8836:31;8890:4;8887:1;8880:15;8918:4;8915:1;8908:15;8789:144;8942:25;;;8635:338;:::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "511400",
        "executionCost": "543",
        "totalCost": "511943"
      },
      "external": {
        "erc721Deposit(address,uint256,bytes)": "infinite",
        "erc721Withdrawal(bytes)": "infinite",
        "onERC721Received(address,address,uint256,bytes)": "infinite"
      }
    },
    "methodIdentifiers": {
      "erc721Deposit(address,uint256,bytes)": "6e9401e3",
      "erc721Withdrawal(bytes)": "15e55ce5",
      "onERC721Received(address,address,uint256,bytes)": "150b7a02"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC721Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"erc721Deposit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"erc721Withdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"erc721Deposit(address,uint256,bytes)\":{\"params\":{\"_ERC721\":\"address of the ERC721 contract\",\"_data\":\"information to be interpreted by L2\",\"_tokenId\":\"index of token for the provided ERC721 contract\"},\"returns\":{\"_0\":\"hash of input generated by deposit\"}},\"erc721Withdrawal(bytes)\":{\"details\":\"can only be called by the Rollups contract\",\"params\":{\"_data\":\"data with withdrawal information\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC721Deposited(address,address,uint256,bytes)\":{\"notice\":\"emitted on ERC721 deposited\"},\"ERC721Withdrawn(address,address,uint256)\":{\"notice\":\"emitted on ERC721 withdrawal\"}},\"kind\":\"user\",\"methods\":{\"erc721Deposit(address,uint256,bytes)\":{\"notice\":\"deposit an ERC721 token in the portal and create a token in L2\"},\"erc721Withdrawal(bytes)\":{\"notice\":\"withdraw an ERC721 token from the portal\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handle the receipt of an NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ERC721PortalFacet.sol\":\"ERC721PortalFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/facets/ERC721PortalFacet.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Generic ERC721 Portal facet\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {IERC721Portal} from \\\"../interfaces/IERC721Portal.sol\\\";\\n\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\n\\ncontract ERC721PortalFacet is IERC721Portal, IERC721Receiver {\\n    using LibInput for LibInput.DiamondStorage;\\n\\n    bytes32 constant INPUT_HEADER = keccak256(\\\"ERC721_Transfer\\\");\\n\\n    /// @notice deposit an ERC721 token in the portal and create a token in L2\\n    /// @param _ERC721 address of the ERC721 contract\\n    /// @param _tokenId index of token for the provided ERC721 contract\\n    /// @param _data information to be interpreted by L2\\n    /// @return hash of input generated by deposit\\n    function erc721Deposit(\\n        address _ERC721,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) public override returns (bytes32) {\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n        IERC721 token = IERC721(_ERC721);\\n\\n        // transfer reverts on failure\\n        token.safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        bytes memory input = abi.encode(\\n            INPUT_HEADER,\\n            msg.sender,\\n            _ERC721,\\n            _tokenId,\\n            _data\\n        );\\n\\n        emit ERC721Deposited(_ERC721, msg.sender, _tokenId, _data);\\n        return inputDS.addInternalInput(input);\\n    }\\n\\n    /// @notice withdraw an ERC721 token from the portal\\n    /// @param _data data with withdrawal information\\n    /// @dev can only be called by the Rollups contract\\n    function erc721Withdrawal(bytes calldata _data)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        // Delegate calls preserve msg.sender, msg.value and address(this)\\n        require(msg.sender == address(this), \\\"only itself\\\");\\n\\n        (address tokenAddr, address payable receiver, uint256 tokenId) = abi\\n            .decode(_data, (address, address, uint256));\\n\\n        IERC721 token = IERC721(tokenAddr);\\n\\n        // transfer reverts on failure\\n        token.safeTransferFrom(address(this), receiver, tokenId);\\n\\n        emit ERC721Withdrawn(tokenAddr, receiver, tokenId);\\n        return true;\\n    }\\n\\n    /// @notice Handle the receipt of an NFT\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) public pure override returns (bytes4) {\\n        // always accept NFT transfers to this contract\\n        return\\n            bytes4(\\n                keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x60e79faa504582aa7f9b088d73f8d444aa229b247cfd52d7f73760cba5bdc6b7\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC721Portal.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Generic ERC721 Portal interface\\npragma solidity >=0.7.0;\\n\\ninterface IERC721Portal {\\n    /// @notice deposit an ERC721 token in the portal and create a token in L2\\n    /// @param _ERC721 address of the ERC721 contract\\n    /// @param _tokenId index of token for the provided ERC721 contract\\n    /// @param _data information to be interpreted by L2\\n    /// @return hash of input generated by deposit\\n    function erc721Deposit(\\n        address _ERC721,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes32);\\n\\n    /// @notice withdraw an ERC721 token from the portal\\n    /// @param _data data with withdrawal information\\n    /// @dev can only be called by the Rollups contract\\n    function erc721Withdrawal(bytes calldata _data) external returns (bool);\\n\\n    /// @notice emitted on ERC721 deposited\\n    event ERC721Deposited(\\n        address ERC721,\\n        address sender,\\n        uint256 tokenId,\\n        bytes data\\n    );\\n\\n    /// @notice emitted on ERC721 withdrawal\\n    event ERC721Withdrawn(\\n        address ERC721,\\n        address payable receiver,\\n        uint256 tokenId\\n    );\\n}\\n\",\"keccak256\":\"0xaa832745dc85d62e9817127575a699f25c71ea770c0ba77f0d874c44d3fd19e6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups interface\\npragma solidity >=0.7.0;\\n\\n// InputAccumulation - Inputs being accumulated for currrent epoch\\n// AwaitingConsensus - No disagreeing claims (or no claims)\\n// AwaitingDispute - Waiting for dispute to be over\\n// inputs received during InputAccumulation will be included in the\\n// current epoch. Inputs received while WaitingClaims or ChallengesInProgress\\n// are accumulated for the next epoch\\nenum Phase {\\n    InputAccumulation,\\n    AwaitingConsensus,\\n    AwaitingDispute\\n}\\n\\ninterface IRollups {\\n    /// @notice claim the result of current epoch\\n    /// @param _epochHash hash of epoch\\n    /// @dev ValidatorManager makes sure that msg.sender is allowed\\n    ///      and that claim != bytes32(0)\\n    /// TODO: add signatures for aggregated claims\\n    function claim(bytes32 _epochHash) external;\\n\\n    /// @notice finalize epoch after timeout\\n    /// @dev can only be called if challenge period is over\\n    function finalizeEpoch() external;\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two epochs two non\\n    ///      finalized epochs, one awaiting consensus/dispute and another\\n    ///      accumulating input\\n    function getCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice claim submitted\\n    /// @param epochHash claim being submitted by this epoch\\n    /// @param claimer address of current claimer\\n    /// @param epochNumber number of the epoch being submitted\\n    event Claim(\\n        uint256 indexed epochNumber,\\n        address claimer,\\n        bytes32 epochHash\\n    );\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n}\\n\",\"keccak256\":\"0x241c3ee8bb900067903ac836d5f3ee81eca587c7f225ad6df686478a6b27329b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager interface\\npragma solidity >=0.7.0;\\n\\n// NoConflict - No conflicting claims or consensus\\n// Consensus - All validators had equal claims\\n// Conflict - Claim is conflicting with previous one\\nenum Result {\\n    NoConflict,\\n    Consensus,\\n    Conflict\\n}\\n\\n// TODO: What is the incentive for validators to not just copy the first claim that arrived?\\ninterface IValidatorManager {\\n    /// @notice get current claim\\n    function getCurrentClaim() external view returns (bytes32);\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n}\\n\",\"keccak256\":\"0x7eccbaf15dc80cd402459e8c940b0012fd3d3b8d2882fa13798afe92a9ea3b86\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibClaimsMask.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title ClaimsMask library\\npragma solidity >=0.8.8;\\n\\n// ClaimsMask is used to keep track of the number of claims for up to 8 validators\\n// | agreement mask | consensus goal mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n// |     8 bits     |        8 bits       |      30 bits       |      30 bits       | ... |      30 bits       |\\n// In Validator Manager, #claims_validator indicates the #claims the validator has made.\\n// In Fee Manager, #claims_validator indicates the #claims the validator has redeemed. In this case,\\n//      agreement mask and consensus goal mask are not used.\\n\\ntype ClaimsMask is uint256;\\n\\nlibrary LibClaimsMask {\\n    uint256 constant claimsBitLen = 30; // #bits used for each #claims\\n\\n    /// @notice this function creates a new ClaimsMask variable with value _value\\n    /// @param  _value the value following the format of ClaimsMask\\n    function newClaimsMask(uint256 _value) public pure returns (ClaimsMask) {\\n        return ClaimsMask.wrap(_value);\\n    }\\n\\n    /// @notice this function creates a new ClaimsMask variable with the consensus goal mask set,\\n    ///         according to the number of validators\\n    /// @param  _numValidators the number of validators\\n    function newClaimsMaskWithConsensusGoalSet(uint256 _numValidators)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_numValidators <= 8, \\\"up to 8 validators\\\");\\n        uint256 consensusMask = (1 << _numValidators) - 1;\\n        return ClaimsMask.wrap(consensusMask << 240); // 256 - 8 - 8 = 240\\n    }\\n\\n    /// @notice this function returns the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    ///     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager\\n    function getNumClaims(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 bitmask = (1 << claimsBitLen) - 1;\\n        return\\n            (ClaimsMask.unwrap(_claimsMask) >>\\n                (claimsBitLen * _validatorIndex)) & bitmask;\\n    }\\n\\n    /// @notice this function increases the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the increase amount\\n    function increaseNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 currentNum = getNumClaims(_claimsMask, _validatorIndex);\\n        uint256 newNum = currentNum + _value; // overflows checked by default with sol0.8\\n        return setNumClaims(_claimsMask, _validatorIndex, newNum);\\n    }\\n\\n    /// @notice this function sets the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the set value\\n    function setNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        require(_value <= ((1 << claimsBitLen) - 1), \\\"ClaimsMask Overflow\\\");\\n        uint256 bitmask = ~(((1 << claimsBitLen) - 1) <<\\n            (claimsBitLen * _validatorIndex));\\n        uint256 clearedClaimsMask = ClaimsMask.unwrap(_claimsMask) & bitmask;\\n        _claimsMask = ClaimsMask.wrap(\\n            clearedClaimsMask | (_value << (claimsBitLen * _validatorIndex))\\n        );\\n        return _claimsMask;\\n    }\\n\\n    /// @notice get consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function clearAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        uint256 clearedMask = ClaimsMask.unwrap(_claimsMask) & ((1 << 248) - 1); // 256 - 8 = 248\\n        return ClaimsMask.wrap(clearedMask);\\n    }\\n\\n    /// @notice get the entire agreement mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return (ClaimsMask.unwrap(_claimsMask) >> 248); // get the first 8 bits\\n    }\\n\\n    /// @notice check if a validator has already claimed\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function alreadyClaimed(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        // get the first 8 bits. Then & operation on the validator's bit to see if it's set\\n        return\\n            (((ClaimsMask.unwrap(_claimsMask) >> 248) >> _validatorIndex) &\\n                1) != 0;\\n    }\\n\\n    /// @notice set agreement mask for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function setAgreementMask(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 setMask = (ClaimsMask.unwrap(_claimsMask) |\\n            (1 << (248 + _validatorIndex))); // 256 - 8 = 248\\n        return ClaimsMask.wrap(setMask);\\n    }\\n\\n    /// @notice get the entire consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getConsensusGoalMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return ((ClaimsMask.unwrap(_claimsMask) << 8) >> 248); // get the second 8 bits\\n    }\\n\\n    /// @notice remove validator from the ClaimsMask\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function removeValidator(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 claimsMaskValue = ClaimsMask.unwrap(_claimsMask);\\n        // remove validator from agreement bitmask\\n        uint256 zeroMask = ~(1 << (_validatorIndex + 248)); // 256 - 8 = 248\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from consensus goal mask\\n        zeroMask = ~(1 << (_validatorIndex + 240)); // 256 - 8 - 8 = 240\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from #claims\\n        return\\n            setNumClaims(ClaimsMask.wrap(claimsMaskValue), _validatorIndex, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x581915d6dcd3aa9e447f89b8bf902bc4f4a72c40b9e8575e196741a8974ea74a\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibDisputeManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Dispute Manager library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibDisputeManager {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    /// @notice initiates a dispute betweent two players\\n    /// @param claims conflicting claims\\n    /// @param claimers addresses of senders of conflicting claim\\n    /// @dev this is a mock implementation that just gives the win\\n    ///      to the address in the first posititon of claimers array\\n    function initiateDispute(\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n        rollupsDS.resolveDispute(claimers[0], claimers[1], claims[0]);\\n    }\\n}\\n\",\"keccak256\":\"0x7d3fdb94a17c7f61ef8f6431f42eaa307b30398e3c24093c0526f449752563c9\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibInput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input library\\npragma solidity ^0.8.0;\\n\\nimport {LibRollups} from \\\"../libraries/LibRollups.sol\\\";\\n\\nlibrary LibInput {\\n    using LibRollups for LibRollups.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Input.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // always needs to keep track of two input boxes:\\n        // 1 for the input accumulation of next epoch\\n        // and 1 for the messages during current epoch. To save gas we alternate\\n        // between inputBox0 and inputBox1\\n        bytes32[] inputBox0;\\n        bytes32[] inputBox1;\\n        uint256 inputDriveSize; // size of input flashdrive\\n        uint256 currentInputBox;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice get input inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @param index index of input inside that inbox\\n    /// @return hash of input at index index\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getInput(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1[index] : ds.inputBox0[index];\\n    }\\n\\n    /// @notice get number of inputs inside inbox of currently proposed claim\\n    /// @param ds diamond storage pointer\\n    /// @return number of inputs on that input box\\n    /// @dev currentInputBox being zero means that the inputs for\\n    ///      the claimed epoch are on input box one\\n    function getNumberOfInputs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ds.currentInputBox == 0 ? ds.inputBox1.length : ds.inputBox0.length;\\n    }\\n\\n    /// @notice add input to processed by next epoch\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, msg.sender);\\n    }\\n\\n    /// @notice add internal input to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInternalInput(DiamondStorage storage ds, bytes memory input)\\n        internal\\n        returns (bytes32)\\n    {\\n        return addInputFromSender(ds, input, address(this));\\n    }\\n\\n    /// @notice add input from a specific sender to processed by next epoch\\n    /// @notice this function is to be reserved for internal usage only\\n    /// @notice for normal inputs, call `addInput` instead\\n    /// @param ds diamond storage pointer\\n    /// @param input input to be understood by offchain machine\\n    /// @param sender input sender address\\n    /// @dev offchain code is responsible for making sure\\n    ///      that input size is power of 2 and multiple of 8 since\\n    ///      the offchain machine has a 8 byte word\\n    function addInputFromSender(\\n        DiamondStorage storage ds,\\n        bytes memory input,\\n        address sender\\n    ) internal returns (bytes32) {\\n        LibRollups.DiamondStorage storage rollupsDS = LibRollups\\n            .diamondStorage();\\n\\n        require(input.length <= ds.inputDriveSize, \\\"input len: [0,driveSize]\\\");\\n\\n        // notifyInput returns true if that input\\n        // belongs to a new epoch\\n        if (rollupsDS.notifyInput()) {\\n            swapInputBox(ds);\\n        }\\n\\n        // points to correct inputBox\\n        bytes32[] storage inputBox = ds.currentInputBox == 0\\n            ? ds.inputBox0\\n            : ds.inputBox1;\\n\\n        // get current epoch index\\n        uint256 currentEpoch = rollupsDS.getCurrentEpoch();\\n\\n        // keccak 64 bytes into 32 bytes\\n        bytes32 keccakMetadata = keccak256(\\n            abi.encode(\\n                sender,\\n                block.number,\\n                block.timestamp,\\n                currentEpoch, // epoch index\\n                inputBox.length // input index\\n            )\\n        );\\n\\n        bytes32 keccakInput = keccak256(input);\\n\\n        bytes32 inputHash = keccak256(abi.encode(keccakMetadata, keccakInput));\\n\\n        // add input to correct inbox\\n        inputBox.push(inputHash);\\n\\n        emit InputAdded(\\n            currentEpoch,\\n            inputBox.length - 1,\\n            msg.sender,\\n            block.timestamp,\\n            input\\n        );\\n\\n        return inputHash;\\n    }\\n\\n    /// @notice called when a new input accumulation phase begins\\n    ///         swap inbox to receive inputs for upcoming epoch\\n    /// @param ds diamond storage pointer\\n    function onNewInputAccumulation(DiamondStorage storage ds) internal {\\n        swapInputBox(ds);\\n    }\\n\\n    /// @notice called when a new epoch begins, clears deprecated inputs\\n    /// @param ds diamond storage pointer\\n    function onNewEpoch(DiamondStorage storage ds) internal {\\n        // clear input box for new inputs\\n        // the current input box should be accumulating inputs\\n        // for the new epoch already. So we clear the other one.\\n        ds.currentInputBox == 0 ? delete ds.inputBox1 : delete ds.inputBox0;\\n    }\\n\\n    /// @notice changes current input box\\n    /// @param ds diamond storage pointer\\n    function swapInputBox(DiamondStorage storage ds) internal {\\n        ds.currentInputBox = (ds.currentInputBox == 0) ? 1 : 0;\\n    }\\n\\n    /// @notice input added\\n    /// @param epochNumber which epoch this input belongs to\\n    /// @param inputIndex index of the input just added\\n    /// @param sender msg.sender\\n    /// @param timestamp block.timestamp\\n    /// @param input input data\\n    event InputAdded(\\n        uint256 indexed epochNumber,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        uint256 timestamp,\\n        bytes input\\n    );\\n}\\n\",\"keccak256\":\"0xc03eae300a81267e4b01c40d05e5399e74e4c0872fbde8a2101bc2c325187fce\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibOutput.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Output library\\npragma solidity ^0.8.0;\\n\\nlibrary LibOutput {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Output.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        mapping(uint256 => uint256) voucherBitmask;\\n        bytes32[] epochHashes;\\n        bool lock; //reentrancy lock\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice to be called when an epoch is finalized\\n    /// @param ds diamond storage pointer\\n    /// @param epochHash hash of finalized epoch\\n    /// @dev an epoch being finalized means that its vouchers can be called\\n    function onNewEpoch(DiamondStorage storage ds, bytes32 epochHash) internal {\\n        ds.epochHashes.push(epochHash);\\n    }\\n\\n    /// @notice get number of finalized epochs\\n    /// @param ds diamond storage pointer\\n    function getNumberOfFinalizedEpochs(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.epochHashes.length;\\n    }\\n}\\n\",\"keccak256\":\"0xd0f88e13210013e9d5bde03399bb76304d6ab4e1f06d01c7e3525adc87a2d65e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibRollups.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Rollups library\\npragma solidity ^0.8.0;\\n\\nimport {Phase} from \\\"../interfaces/IRollups.sol\\\";\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibInput} from \\\"../libraries/LibInput.sol\\\";\\nimport {LibOutput} from \\\"../libraries/LibOutput.sol\\\";\\nimport {LibValidatorManager} from \\\"../libraries/LibValidatorManager.sol\\\";\\nimport {LibDisputeManager} from \\\"../libraries/LibDisputeManager.sol\\\";\\n\\nlibrary LibRollups {\\n    using LibInput for LibInput.DiamondStorage;\\n    using LibOutput for LibOutput.DiamondStorage;\\n    using LibValidatorManager for LibValidatorManager.DiamondStorage;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"Rollups.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 templateHash; // state hash of the cartesi machine at t0\\n        uint32 inputDuration; // duration of input accumulation phase in seconds\\n        uint32 challengePeriod; // duration of challenge period in seconds\\n        uint32 inputAccumulationStart; // timestamp when current input accumulation phase started\\n        uint32 sealingEpochTimestamp; // timestamp on when a proposed epoch (claim) becomes challengeable\\n        uint32 currentPhase_int; // current phase in integer form\\n    }\\n\\n    /// @notice epoch finalized\\n    /// @param epochNumber number of the epoch being finalized\\n    /// @param epochHash claim being submitted by this epoch\\n    event FinalizeEpoch(uint256 indexed epochNumber, bytes32 epochHash);\\n\\n    /// @notice dispute resolved\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    event ResolveDispute(address winner, address loser, bytes32 winningClaim);\\n\\n    /// @notice phase change\\n    /// @param newPhase new phase\\n    event PhaseChange(Phase newPhase);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when new input arrives, manages the phase changes\\n    /// @param ds diamond storage pointer\\n    /// @dev can only be called by input contract\\n    function notifyInput(DiamondStorage storage ds) internal returns (bool) {\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n        uint256 inputAccumulationStart = ds.inputAccumulationStart;\\n        uint256 inputDuration = ds.inputDuration;\\n\\n        if (\\n            currentPhase == Phase.InputAccumulation &&\\n            block.timestamp > inputAccumulationStart + inputDuration\\n        ) {\\n            ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n            emit PhaseChange(Phase.AwaitingConsensus);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice called when a dispute is resolved by the dispute manager\\n    /// @param ds diamond storage pointer\\n    /// @param winner winner of dispute\\n    /// @param loser loser of dispute\\n    /// @param winningClaim initial claim of winning validator\\n    function resolveDispute(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    ) internal {\\n        Result result;\\n        bytes32[2] memory claims;\\n        address payable[2] memory claimers;\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        (result, claims, claimers) = validatorManagerDS.onDisputeEnd(\\n            winner,\\n            loser,\\n            winningClaim\\n        );\\n\\n        // restart challenge period\\n        ds.sealingEpochTimestamp = uint32(block.timestamp);\\n\\n        emit ResolveDispute(winner, loser, winningClaim);\\n        resolveValidatorResult(ds, result, claims, claimers);\\n    }\\n\\n    /// @notice resolve results returned by validator manager\\n    /// @param ds diamond storage pointer\\n    /// @param result result from claim or dispute operation\\n    /// @param claims array of claims in case of new conflict\\n    /// @param claimers array of claimers in case of new conflict\\n    function resolveValidatorResult(\\n        DiamondStorage storage ds,\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory claimers\\n    ) internal {\\n        if (result == Result.NoConflict) {\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingConsensus) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingConsensus);\\n                emit PhaseChange(Phase.AwaitingConsensus);\\n            }\\n        } else if (result == Result.Consensus) {\\n            startNewEpoch(ds);\\n        } else {\\n            // for the case when result == Result.Conflict\\n            Phase currentPhase = Phase(ds.currentPhase_int);\\n            if (currentPhase != Phase.AwaitingDispute) {\\n                ds.currentPhase_int = uint32(Phase.AwaitingDispute);\\n                emit PhaseChange(Phase.AwaitingDispute);\\n            }\\n            LibDisputeManager.initiateDispute(claims, claimers);\\n        }\\n    }\\n\\n    /// @notice starts new epoch\\n    /// @param ds diamond storage pointer\\n    function startNewEpoch(DiamondStorage storage ds) internal {\\n        LibInput.DiamondStorage storage inputDS = LibInput.diamondStorage();\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n        LibValidatorManager.DiamondStorage\\n            storage validatorManagerDS = LibValidatorManager.diamondStorage();\\n\\n        // reset input accumulation start and deactivate challenge period start\\n        ds.currentPhase_int = uint32(Phase.InputAccumulation);\\n        emit PhaseChange(Phase.InputAccumulation);\\n        ds.inputAccumulationStart = uint32(block.timestamp);\\n        ds.sealingEpochTimestamp = type(uint32).max;\\n\\n        bytes32 finalClaim = validatorManagerDS.onNewEpoch();\\n\\n        // emit event before finalized epoch is added to the Output storage\\n        emit FinalizeEpoch(outputDS.getNumberOfFinalizedEpochs(), finalClaim);\\n\\n        outputDS.onNewEpoch(finalClaim);\\n        inputDS.onNewEpoch();\\n    }\\n\\n    /// @notice returns index of current (accumulating) epoch\\n    /// @param ds diamond storage pointer\\n    /// @return index of current epoch\\n    /// @dev if phase is input accumulation, then the epoch number is length\\n    ///      of finalized epochs array, else there are two non finalized epochs,\\n    ///      one awaiting consensus/dispute and another accumulating input\\n    function getCurrentEpoch(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        LibOutput.DiamondStorage storage outputDS = LibOutput.diamondStorage();\\n\\n        uint256 finalizedEpochs = outputDS.getNumberOfFinalizedEpochs();\\n\\n        Phase currentPhase = Phase(ds.currentPhase_int);\\n\\n        return\\n            currentPhase == Phase.InputAccumulation\\n                ? finalizedEpochs\\n                : finalizedEpochs + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x04f72881c6032af40537ac14ff3720df2899a5746a42abd841b2292d66db11ca\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibValidatorManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Validator Manager library\\npragma solidity ^0.8.0;\\n\\nimport {Result} from \\\"../interfaces/IValidatorManager.sol\\\";\\n\\nimport {LibClaimsMask, ClaimsMask} from \\\"../libraries/LibClaimsMask.sol\\\";\\n\\nlibrary LibValidatorManager {\\n    using LibClaimsMask for ClaimsMask;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"ValidatorManager.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        bytes32 currentClaim; // current claim - first claim of this epoch\\n        address payable[] validators; // up to 8 validators\\n        uint256 maxNumValidators; // the maximum number of validators, set in the constructor\\n        // A bit set used for up to 8 validators.\\n        // The first 8 bits are used to indicate whom supports the current claim\\n        // The second 8 bits are used to indicate those should have claimed in order to reach consensus\\n        // The following every 30 bits are used to indicate the number of total claims each validator has made\\n        // | agreement mask | consensus mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n        // |     8 bits     |     8 bits     |      30 bits       |      30 bits       | ... |      30 bits       |\\n        ClaimsMask claimsMask;\\n    }\\n\\n    /// @notice emitted on Claim received\\n    event ClaimReceived(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on Dispute end\\n    event DisputeEnded(\\n        Result result,\\n        bytes32[2] claims,\\n        address payable[2] validators\\n    );\\n\\n    /// @notice emitted on new Epoch\\n    event NewEpoch(bytes32 claim);\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice called when a dispute ends in rollups\\n    /// @param ds diamond storage pointer\\n    /// @param winner address of dispute winner\\n    /// @param loser address of dispute loser\\n    /// @param winningClaim the winnning claim\\n    /// @return result of dispute being finished\\n    function onDisputeEnd(\\n        DiamondStorage storage ds,\\n        address payable winner,\\n        address payable loser,\\n        bytes32 winningClaim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        removeValidator(ds, loser);\\n\\n        if (winningClaim == ds.currentClaim) {\\n            // first claim stood, dont need to update the bitmask\\n            return\\n                isConsensus(ds)\\n                    ? emitDisputeEndedAndReturn(\\n                        Result.Consensus,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    )\\n                    : emitDisputeEndedAndReturn(\\n                        Result.NoConflict,\\n                        [winningClaim, bytes32(0)],\\n                        [winner, payable(0)]\\n                    );\\n        }\\n\\n        // if first claim lost, and other validators have agreed with it\\n        // there is a new dispute to be played\\n        if (ds.claimsMask.getAgreementMask() != 0) {\\n            return\\n                emitDisputeEndedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, winningClaim],\\n                    [getClaimerOfCurrentClaim(ds), winner]\\n                );\\n        }\\n        // else there are no valdiators that agree with losing claim\\n        // we can update current claim and check for consensus in case\\n        // the winner is the only validator left\\n        ds.currentClaim = winningClaim;\\n        updateClaimAgreementMask(ds, winner);\\n        return\\n            isConsensus(ds)\\n                ? emitDisputeEndedAndReturn(\\n                    Result.Consensus,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                )\\n                : emitDisputeEndedAndReturn(\\n                    Result.NoConflict,\\n                    [winningClaim, bytes32(0)],\\n                    [winner, payable(0)]\\n                );\\n    }\\n\\n    /// @notice called when a new epoch starts\\n    /// @param ds diamond storage pointer\\n    /// @return current claim\\n    function onNewEpoch(DiamondStorage storage ds) internal returns (bytes32) {\\n        // reward validators who has made the correct claim by increasing their #claims\\n        claimFinalizedIncreaseCounts(ds);\\n\\n        bytes32 tmpClaim = ds.currentClaim;\\n\\n        // clear current claim\\n        ds.currentClaim = bytes32(0);\\n        // clear validator agreement bit mask\\n        ds.claimsMask = ds.claimsMask.clearAgreementMask();\\n\\n        emit NewEpoch(tmpClaim);\\n        return tmpClaim;\\n    }\\n\\n    /// @notice called when a claim is received by rollups\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of sender of that claim\\n    /// @param claim claim received by rollups\\n    /// @return result of claim, Consensus | NoConflict | Conflict\\n    /// @return [currentClaim, conflicting claim] if there is Conflict\\n    ///         [currentClaim, bytes32(0)] if there is Consensus or NoConflcit\\n    /// @return [claimer1, claimer2] if there is  Conflcit\\n    ///         [claimer1, address(0)] if there is Consensus or NoConflcit\\n    function onClaim(\\n        DiamondStorage storage ds,\\n        address payable sender,\\n        bytes32 claim\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        require(claim != bytes32(0), \\\"empty claim\\\");\\n        require(isValidator(ds, sender), \\\"sender not allowed\\\");\\n\\n        // require the validator hasn't claimed in the same epoch before\\n        uint256 index = getValidatorIndex(ds, sender);\\n        require(\\n            !ds.claimsMask.alreadyClaimed(index),\\n            \\\"sender had claimed in this epoch before\\\"\\n        );\\n\\n        // cant return because a single claim might mean consensus\\n        if (ds.currentClaim == bytes32(0)) {\\n            ds.currentClaim = claim;\\n        }\\n\\n        if (claim != ds.currentClaim) {\\n            return\\n                emitClaimReceivedAndReturn(\\n                    Result.Conflict,\\n                    [ds.currentClaim, claim],\\n                    [getClaimerOfCurrentClaim(ds), sender]\\n                );\\n        }\\n        updateClaimAgreementMask(ds, sender);\\n\\n        return\\n            isConsensus(ds)\\n                ? emitClaimReceivedAndReturn(\\n                    Result.Consensus,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                )\\n                : emitClaimReceivedAndReturn(\\n                    Result.NoConflict,\\n                    [claim, bytes32(0)],\\n                    [sender, payable(0)]\\n                );\\n    }\\n\\n    /// @notice emits dispute ended event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitDisputeEndedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit DisputeEnded(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice emits claim received event and then return\\n    /// @param result to be emitted and returned\\n    /// @param claims to be emitted and returned\\n    /// @param validators to be emitted and returned\\n    /// @dev this function existis to make code more clear/concise\\n    function emitClaimReceivedAndReturn(\\n        Result result,\\n        bytes32[2] memory claims,\\n        address payable[2] memory validators\\n    )\\n        internal\\n        returns (\\n            Result,\\n            bytes32[2] memory,\\n            address payable[2] memory\\n        )\\n    {\\n        emit ClaimReceived(result, claims, validators);\\n        return (result, claims, validators);\\n    }\\n\\n    /// @notice only call this function when a claim has been finalized\\n    ///         Either a consensus has been reached or challenge period has past\\n    /// @param ds pointer to diamond storage\\n    function claimFinalizedIncreaseCounts(DiamondStorage storage ds) internal {\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            // if a validator agrees with the current claim\\n            if ((agreementMask & (1 << i)) != 0) {\\n                // increase #claims by 1\\n                ds.claimsMask = ds.claimsMask.increaseNumClaims(i, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice removes a validator\\n    /// @param ds diamond storage pointer\\n    /// @param validator address of validator to be removed\\n    function removeValidator(DiamondStorage storage ds, address validator)\\n        internal\\n    {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (validator == ds.validators[i]) {\\n                // put address(0) in validators position\\n                ds.validators[i] = payable(0);\\n                // remove the validator from claimsMask\\n                ds.claimsMask = ds.claimsMask.removeValidator(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice check if consensus has been reached\\n    /// @param ds pointer to diamond storage\\n    function isConsensus(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        ClaimsMask claimsMask = ds.claimsMask;\\n        return\\n            claimsMask.getAgreementMask() == claimsMask.getConsensusGoalMask();\\n    }\\n\\n    /// @notice get one of the validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @return validator that agreed with current claim\\n    function getClaimerOfCurrentClaim(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (address payable)\\n    {\\n        // TODO: we are always getting the first validator\\n        // on the array that agrees with the current claim to enter a dispute\\n        // should this be random?\\n        uint256 agreementMask = ds.claimsMask.getAgreementMask();\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (agreementMask & (1 << i) != 0) {\\n                return ds.validators[i];\\n            }\\n        }\\n        revert(\\\"Agreeing validator not found\\\");\\n    }\\n\\n    /// @notice updates mask of validators that agreed with current claim\\n    /// @param ds diamond storage pointer\\n    /// @param sender address of validator that will be included in mask\\n    function updateClaimAgreementMask(\\n        DiamondStorage storage ds,\\n        address payable sender\\n    ) internal {\\n        uint256 validatorIndex = getValidatorIndex(ds, sender);\\n        ds.claimsMask = ds.claimsMask.setAgreementMask(validatorIndex);\\n    }\\n\\n    /// @notice check if the sender is a validator\\n    /// @param ds pointer to diamond storage\\n    /// @param sender sender address\\n    function isValidator(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice find the validator and return the index or revert\\n    /// @param ds pointer to diamond storage\\n    /// @param sender validator address\\n    /// @return validator index or revert\\n    function getValidatorIndex(DiamondStorage storage ds, address sender)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(sender != address(0), \\\"address 0\\\");\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (sender == ds.validators[i]) return i;\\n        }\\n        revert(\\\"validator not found\\\");\\n    }\\n\\n    /// @notice get number of claims the sender has made\\n    /// @param ds pointer to diamond storage\\n    /// @param _sender validator address\\n    /// @return #claims\\n    function getNumberOfClaimsByAddress(\\n        DiamondStorage storage ds,\\n        address payable _sender\\n    ) internal view returns (uint256) {\\n        for (uint256 i; i < ds.validators.length; i++) {\\n            if (_sender == ds.validators[i]) {\\n                return getNumberOfClaimsByIndex(ds, i);\\n            }\\n        }\\n        // if validator not found\\n        return 0;\\n    }\\n\\n    /// @notice get number of claims by the index in the validator set\\n    /// @param ds pointer to diamond storage\\n    /// @param index the index in validator set\\n    /// @return #claims\\n    function getNumberOfClaimsByIndex(DiamondStorage storage ds, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.claimsMask.getNumClaims(index);\\n    }\\n\\n    /// @notice get the maximum number of validators defined in validator manager\\n    /// @param ds pointer to diamond storage\\n    /// @return the maximum number of validators\\n    function getMaxNumValidators(DiamondStorage storage ds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ds.maxNumValidators;\\n    }\\n}\\n\",\"keccak256\":\"0xa25792dbbddcb4f5ec3ef71e463e2df9153a90fecfa4b2cd81e03a6a06a45e83\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "events": {
      "ERC721Deposited(address,address,uint256,bytes)": {
        "notice": "emitted on ERC721 deposited"
      },
      "ERC721Withdrawn(address,address,uint256)": {
        "notice": "emitted on ERC721 withdrawal"
      }
    },
    "kind": "user",
    "methods": {
      "erc721Deposit(address,uint256,bytes)": {
        "notice": "deposit an ERC721 token in the portal and create a token in L2"
      },
      "erc721Withdrawal(bytes)": {
        "notice": "withdraw an ERC721 token from the portal"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Handle the receipt of an NFT"
      }
    },
    "version": 1
  }
}