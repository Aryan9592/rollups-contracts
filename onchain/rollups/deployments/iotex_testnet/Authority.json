{
  "address": "0x870d079FBB8f439863DCD5c241bc9A5E5D02900D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IHistory",
          "name": "_history",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "ApplicationJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IHistory",
          "name": "history",
          "type": "address"
        }
      ],
      "name": "ConsensusCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IHistory",
          "name": "history",
          "type": "address"
        }
      ],
      "name": "NewHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proofContext",
          "type": "bytes"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHistory",
      "outputs": [
        {
          "internalType": "contract IHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensus",
          "type": "address"
        }
      ],
      "name": "migrateHistoryToConsensus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHistory",
          "name": "_history",
          "type": "address"
        }
      ],
      "name": "setHistory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_claimData",
          "type": "bytes"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a28aea47e74d70b3c968140c12ebd568b037241090a56b6f27eb3f177c28d6e",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x870d079FBB8f439863DCD5c241bc9A5E5D02900D",
    "transactionIndex": 0,
    "gasUsed": "726391",
    "logsBloom": "0x
    "blockHash": "0xa56b70905d4300cb5d11bb0f737d511d88a1600906a813b9aefcc0c4903608bd",
    "transactionHash": "0x7a28aea47e74d70b3c968140c12ebd568b037241090a56b6f27eb3f177c28d6e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19458354,
        "transactionHash": "0x7a28aea47e74d70b3c968140c12ebd568b037241090a56b6f27eb3f177c28d6e",
        "address": "0x870d079FBB8f439863DCD5c241bc9A5E5D02900D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa56b70905d4300cb5d11bb0f737d511d88a1600906a813b9aefcc0c4903608bd"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19458354,
        "transactionHash": "0x7a28aea47e74d70b3c968140c12ebd568b037241090a56b6f27eb3f177c28d6e",
        "address": "0x870d079FBB8f439863DCD5c241bc9A5E5D02900D",
        "topics": [
          "0x25b0664e0a40f3e96d12428b372e2f2166432a8e6ac723e7911e81a588061c73"
        ],
        "data": "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0000000000000000000000000d6d09b0d631287f3877d4b70cf1123b2fc4ed0b800000000000000000000000022189c430844c8cc84224a18aa8b5cbd354a234f",
        "logIndex": 1,
        "blockHash": "0xa56b70905d4300cb5d11bb0f737d511d88a1600906a813b9aefcc0c4903608bd"
      }
    ],
    "blockNumber": 19458354,
    "cumulativeGasUsed": "726391",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "0xD6d09b0d631287F3877D4B70CF1123B2fc4eD0B8",
    "0x22189c430844c8cC84224A18aa8B5Cbd354a234f"
  ],
  "numDeployments": 2,
  "solcInputHash": "af212e0e8f765400ccc29518052524f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IHistory\",\"name\":\"_history\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"ApplicationJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IHistory\",\"name\":\"history\",\"type\":\"address\"}],\"name\":\"ConsensusCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IHistory\",\"name\":\"history\",\"type\":\"address\"}],\"name\":\"NewHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proofContext\",\"type\":\"bytes\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHistory\",\"outputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensus\",\"type\":\"address\"}],\"name\":\"migrateHistoryToConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"_history\",\"type\":\"address\"}],\"name\":\"setHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_claimData\",\"type\":\"bytes\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ConsensusCreated(address,address,address)\":{\"params\":{\"history\":\"The history that the consensus writes to\",\"inputBox\":\"The input box used by the consensus\",\"owner\":\"The address that owns the consensus\"}},\"NewHistory(address)\":{\"params\":{\"history\":\"The new history\"}}},\"kind\":\"dev\",\"methods\":{\"getClaim(address,bytes)\":{\"details\":\"The encoding of _proofContext might vary depending on the implementation\",\"params\":{\"_dapp\":\"The DApp\",\"_proofContext\":\"Data for retrieving the desired claim\"},\"returns\":{\"_0\":\"The epoch hash contained in the claim\",\"_1\":\"The index of the first input in the input box for which the epoch hash is valid\",\"_2\":\"The index of the last input in the input box for which the epoch hash is valid\"}},\"join()\":{\"details\":\"This function should be called by a DApp when it migrates to this consensusMUST fire the `ApplicationJoined` event with the message sender as argument\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"submitClaim(bytes)\":{\"details\":\"Will fail if history has migrated to another consensus\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ApplicationJoined(address)\":{\"notice\":\"An application has joined the consensus' validation set\"},\"ConsensusCreated(address,address,address)\":{\"notice\":\"A consensus was created\"},\"NewHistory(address)\":{\"notice\":\"A new history is used\"}},\"kind\":\"user\",\"methods\":{\"getClaim(address,bytes)\":{\"notice\":\"Get a claim\"},\"join()\":{\"notice\":\"Join the consensus' validation set\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/consensus/authority/Authority.sol\":\"Authority\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/consensus/AbstractConsensus.sol\":{\"content\":\"// Copyright 2023 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Abstract Consensus\\npragma solidity ^0.8.13;\\n\\nimport {IConsensus} from \\\"./IConsensus.sol\\\";\\n\\nabstract contract AbstractConsensus is IConsensus {\\n    function join() external override {\\n        emit ApplicationJoined(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x9b58af2376eea91efc7c17dfab8c5ea84f3724f15fe595d94b4b1b8c05c3df95\",\"license\":\"Apache-2.0\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// Copyright 2023 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Consensus interface\\npragma solidity ^0.8.13;\\n\\ninterface IConsensus {\\n    /// @notice An application has joined the consensus' validation set\\n    /// @param application The application\\n    /// @dev MUST be triggered on a successful call to `join()`\\n    event ApplicationJoined(address application);\\n\\n    /// @notice Get a claim\\n    /// @param _dapp The DApp\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The epoch hash contained in the claim\\n    /// @return firstInputIndex_ The index of the first input in the input box for which the epoch hash is valid\\n    /// @return lastInputIndex_ The index of the last input in the input box for which the epoch hash is valid\\n    /// @dev The encoding of _proofContext might vary depending on the implementation\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n\\n    /// @notice Join the consensus' validation set\\n    /// @dev This function should be called by a DApp when it migrates to this consensus\\n    /// @dev MUST fire the `ApplicationJoined` event with the message sender as argument\\n    function join() external;\\n}\\n\",\"keccak256\":\"0x34f08b5f3bafa99016f6d308ff7ec803da3ae7a39edddd2757e51121d9bcc1b7\",\"license\":\"Apache-2.0\"},\"contracts/consensus/authority/Authority.sol\":{\"content\":\"// Copyright 2023 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Authority\\npragma solidity ^0.8.13;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {AbstractConsensus} from \\\"../AbstractConsensus.sol\\\";\\nimport {IInputBox} from \\\"../../inputs/IInputBox.sol\\\";\\nimport {IHistory} from \\\"../../history/IHistory.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Authority is AbstractConsensus, Ownable {\\n    IHistory internal history;\\n\\n    /// @notice A consensus was created\\n    /// @param owner The address that owns the consensus\\n    /// @param inputBox The input box used by the consensus\\n    /// @param history The history that the consensus writes to\\n    event ConsensusCreated(address owner, IInputBox inputBox, IHistory history);\\n\\n    /// @notice A new history is used\\n    /// @param history The new history\\n    event NewHistory(IHistory history);\\n\\n    constructor(address _owner, IInputBox _inputBox, IHistory _history) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (msg.sender != _owner) {\\n            transferOwnership(_owner);\\n        }\\n        history = _history;\\n        emit ConsensusCreated(_owner, _inputBox, _history);\\n    }\\n\\n    /// @dev Will fail if history has migrated to another consensus\\n    function submitClaim(bytes calldata _claimData) external onlyOwner {\\n        history.submitClaim(_claimData);\\n    }\\n\\n    function migrateHistoryToConsensus(address _consensus) external onlyOwner {\\n        history.migrateToConsensus(_consensus);\\n    }\\n\\n    function setHistory(IHistory _history) external onlyOwner {\\n        history = _history;\\n        emit NewHistory(_history);\\n    }\\n\\n    function getHistory() external view returns (IHistory) {\\n        return history;\\n    }\\n\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        return history.getClaim(_dapp, _proofContext);\\n    }\\n\\n    function withdrawERC20Tokens(\\n        IERC20 _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(\\n            _token.transfer(_recipient, _amount),\\n            \\\"Authority: withdrawal failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x62d95dfc450487117203bc4cfa4f6eb0d62ae65138f493d883c64306333990f4\",\"license\":\"Apache-2.0\"},\"contracts/history/IHistory.sol\":{\"content\":\"// Copyright 2023 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title History interface\\npragma solidity ^0.8.13;\\n\\ninterface IHistory {\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev The encoding of _claimData might vary depending on the history implementation\\n    /// @dev Should have access control\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Migrate to a new consensus\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control\\n    function migrateToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get a claim\\n    /// @param _dapp The DApp\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The epoch hash of the claim\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    /// @dev The encoding of _proofContext might vary depending on the history implementation\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n}\\n\",\"keccak256\":\"0xbdb548d431866e14f342f5446621f8510bc93ad81cb0144d085a2e8939d0d63a\",\"license\":\"Apache-2.0\"},\"contracts/inputs/IInputBox.sol\":{\"content\":\"// Copyright 2023 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input Box interface\\npragma solidity ^0.8.13;\\n\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to a DApp's input box\\n    /// @param dapp The address of the DApp\\n    /// @param inboxInputIndex The index of the input in the input box\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    event InputAdded(\\n        address indexed dapp,\\n        uint256 indexed inboxInputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @return Number of inputs in the DApp's input box\\n    function getNumberOfInputs(address _dapp) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @param _index The index of the input in the DApp's input box\\n    /// @return The hash of the input at the provided index in the DApp's input box\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5e1244571412900cbf6f41ccb0efcc3357528141e95ba02a74869baa24b5a89d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a20380380610a2083398101604081905261002f916101f8565b610038336100b9565b336001600160a01b038416146100515761005183610109565b600180546001600160a01b0319166001600160a01b0383811691821790925560408051868416815292851660208401528201527f25b0664e0a40f3e96d12428b372e2f2166432a8e6ac723e7911e81a588061c739060600160405180910390a1505050610245565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610111610187565b6001600160a01b03811661017b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610184816100b9565b50565b6000546001600160a01b031633146101e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610172565b565b6001600160a01b038116811461018457600080fd5b60008060006060848603121561020d57600080fd5b8351610218816101e3565b6020850151909350610229816101e3565b604085015190925061023a816101e3565b809150509250925092565b6107cc806102546000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b688a36311610066578063b688a3631461010e578063bcdd1e1314610116578063d79a824014610129578063ddfdfbb014610157578063f2fde38b1461016a57600080fd5b8063159c5ea1146100a3578063715018a6146100b85780638da5cb5b146100c05780639368a3d3146100ea578063aa15efc8146100fd575b600080fd5b6100b66100b136600461058e565b61017d565b005b6100b66101d9565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66100f836600461058e565b6101ed565b6001546001600160a01b03166100cd565b6100b6610257565b6100b66101243660046105b2565b61028c565b61013c61013736600461063c565b61035d565b604080519384526020840192909252908201526060016100e1565b6100b6610165366004610691565b6103e6565b6100b661017836600461058e565b610456565b6101856104cf565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e9060200160405180910390a150565b6101e16104cf565b6101eb6000610529565b565b6101f56104cf565b60015460405163fc41168360e01b81526001600160a01b0383811660048301529091169063fc41168390602401600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b5050505050565b6040513381527f27c2b702d3bff195a18baca2daf00b20a986177c5f1449af4e2d46a3c3e02ce59060200160405180910390a1565b6102946104cf565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030791906106d3565b6103585760405162461bcd60e51b815260206004820152601c60248201527f417574686f726974793a207769746864726177616c206661696c65640000000060448201526064015b60405180910390fd5b505050565b60015460405163035e6a0960e61b8152600091829182916001600160a01b03169063d79a8240906103969089908990899060040161071e565b606060405180830381865afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d7919061074c565b92509250925093509350939050565b6103ee6104cf565b600154604051630ddfdfbb60e41b81526001600160a01b039091169063ddfdfbb090610420908590859060040161077a565b600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b505050505050565b61045e6104cf565b6001600160a01b0381166104c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034f565b6104cc81610529565b50565b6000546001600160a01b031633146101eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146104cc57600080fd5b6000602082840312156105a057600080fd5b81356105ab81610579565b9392505050565b6000806000606084860312156105c757600080fd5b83356105d281610579565b925060208401356105e281610579565b929592945050506040919091013590565b60008083601f84011261060557600080fd5b50813567ffffffffffffffff81111561061d57600080fd5b60208301915083602082850101111561063557600080fd5b9250929050565b60008060006040848603121561065157600080fd5b833561065c81610579565b9250602084013567ffffffffffffffff81111561067857600080fd5b610684868287016105f3565b9497909650939450505050565b600080602083850312156106a457600080fd5b823567ffffffffffffffff8111156106bb57600080fd5b6106c7858286016105f3565b90969095509350505050565b6000602082840312156106e557600080fd5b815180151581146105ab57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061074390830184866106f5565b95945050505050565b60008060006060848603121561076157600080fd5b8351925060208401519150604084015190509250925092565b60208152600061078e6020830184866106f5565b94935050505056fea26469706673582212207693d4a3038a9cd8677b88a1dfb541c031818e3eaff9aafc6e33e5945322028964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b688a36311610066578063b688a3631461010e578063bcdd1e1314610116578063d79a824014610129578063ddfdfbb014610157578063f2fde38b1461016a57600080fd5b8063159c5ea1146100a3578063715018a6146100b85780638da5cb5b146100c05780639368a3d3146100ea578063aa15efc8146100fd575b600080fd5b6100b66100b136600461058e565b61017d565b005b6100b66101d9565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66100f836600461058e565b6101ed565b6001546001600160a01b03166100cd565b6100b6610257565b6100b66101243660046105b2565b61028c565b61013c61013736600461063c565b61035d565b604080519384526020840192909252908201526060016100e1565b6100b6610165366004610691565b6103e6565b6100b661017836600461058e565b610456565b6101856104cf565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e9060200160405180910390a150565b6101e16104cf565b6101eb6000610529565b565b6101f56104cf565b60015460405163fc41168360e01b81526001600160a01b0383811660048301529091169063fc41168390602401600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b5050505050565b6040513381527f27c2b702d3bff195a18baca2daf00b20a986177c5f1449af4e2d46a3c3e02ce59060200160405180910390a1565b6102946104cf565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030791906106d3565b6103585760405162461bcd60e51b815260206004820152601c60248201527f417574686f726974793a207769746864726177616c206661696c65640000000060448201526064015b60405180910390fd5b505050565b60015460405163035e6a0960e61b8152600091829182916001600160a01b03169063d79a8240906103969089908990899060040161071e565b606060405180830381865afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d7919061074c565b92509250925093509350939050565b6103ee6104cf565b600154604051630ddfdfbb60e41b81526001600160a01b039091169063ddfdfbb090610420908590859060040161077a565b600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b505050505050565b61045e6104cf565b6001600160a01b0381166104c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034f565b6104cc81610529565b50565b6000546001600160a01b031633146101eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146104cc57600080fd5b6000602082840312156105a057600080fd5b81356105ab81610579565b9392505050565b6000806000606084860312156105c757600080fd5b83356105d281610579565b925060208401356105e281610579565b929592945050506040919091013590565b60008083601f84011261060557600080fd5b50813567ffffffffffffffff81111561061d57600080fd5b60208301915083602082850101111561063557600080fd5b9250929050565b60008060006040848603121561065157600080fd5b833561065c81610579565b9250602084013567ffffffffffffffff81111561067857600080fd5b610684868287016105f3565b9497909650939450505050565b600080602083850312156106a457600080fd5b823567ffffffffffffffff8111156106bb57600080fd5b6106c7858286016105f3565b90969095509350505050565b6000602082840312156106e557600080fd5b815180151581146105ab57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061074390830184866106f5565b95945050505050565b60008060006060848603121561076157600080fd5b8351925060208401519150604084015190509250925092565b60208152600061078e6020830184866106f5565b94935050505056fea26469706673582212207693d4a3038a9cd8677b88a1dfb541c031818e3eaff9aafc6e33e5945322028964736f6c634300080d0033",
  "devdoc": {
    "events": {
      "ConsensusCreated(address,address,address)": {
        "params": {
          "history": "The history that the consensus writes to",
          "inputBox": "The input box used by the consensus",
          "owner": "The address that owns the consensus"
        }
      },
      "NewHistory(address)": {
        "params": {
          "history": "The new history"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getClaim(address,bytes)": {
        "details": "The encoding of _proofContext might vary depending on the implementation",
        "params": {
          "_dapp": "The DApp",
          "_proofContext": "Data for retrieving the desired claim"
        },
        "returns": {
          "_0": "The epoch hash contained in the claim",
          "_1": "The index of the first input in the input box for which the epoch hash is valid",
          "_2": "The index of the last input in the input box for which the epoch hash is valid"
        }
      },
      "join()": {
        "details": "This function should be called by a DApp when it migrates to this consensusMUST fire the `ApplicationJoined` event with the message sender as argument"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "submitClaim(bytes)": {
        "details": "Will fail if history has migrated to another consensus"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApplicationJoined(address)": {
        "notice": "An application has joined the consensus' validation set"
      },
      "ConsensusCreated(address,address,address)": {
        "notice": "A consensus was created"
      },
      "NewHistory(address)": {
        "notice": "A new history is used"
      }
    },
    "kind": "user",
    "methods": {
      "getClaim(address,bytes)": {
        "notice": "Get a claim"
      },
      "join()": {
        "notice": "Join the consensus' validation set"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1155,
        "contract": "contracts/consensus/authority/Authority.sol:Authority",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2069,
        "contract": "contracts/consensus/authority/Authority.sol:Authority",
        "label": "history",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHistory)2959"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHistory)2959": {
        "encoding": "inplace",
        "label": "contract IHistory",
        "numberOfBytes": "20"
      }
    }
  }
}