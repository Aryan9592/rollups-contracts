{
  "address": "0xFB030f35bd46a1543BeEB7876A68940B39eE9748",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "epochHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint128",
              "name": "firstIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastIndex",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct History.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "NewClaimToHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proofContext",
          "type": "bytes"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensus",
          "type": "address"
        }
      ],
      "name": "migrateToConsensus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_encodedClaim",
          "type": "bytes"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x526ef43a0a2f5479090d579c9edfebdea93714d2335dfbbfa890cf4caa1c5e7a",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0xFB030f35bd46a1543BeEB7876A68940B39eE9748",
    "transactionIndex": 1,
    "gasUsed": "628650",
    "logsBloom": "0x
    "blockHash": "0x698926496a124baf08bb183929ce355611ccb73241257ad42678d9d97a322a15",
    "transactionHash": "0x526ef43a0a2f5479090d579c9edfebdea93714d2335dfbbfa890cf4caa1c5e7a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18211161,
        "transactionHash": "0x526ef43a0a2f5479090d579c9edfebdea93714d2335dfbbfa890cf4caa1c5e7a",
        "address": "0xFB030f35bd46a1543BeEB7876A68940B39eE9748",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x698926496a124baf08bb183929ce355611ccb73241257ad42678d9d97a322a15"
      }
    ],
    "blockNumber": 18211161,
    "cumulativeGasUsed": "628650",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18930e8a66a1DbE21D00581216789AAB7460Afd0"
  ],
  "numDeployments": 1,
  "solcInputHash": "0567aa60413bcde67383b46cd3cc8c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"epochHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"firstIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastIndex\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct History.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"NewClaimToHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proofContext\",\"type\":\"bytes\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensus\",\"type\":\"address\"}],\"name\":\"migrateToConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_encodedClaim\",\"type\":\"bytes\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NewClaimToHistory(address,(bytes32,uint128,uint128))\":{\"params\":{\"claim\":\"Claim for a specific dapp\",\"dapp\":\"The address of the dapp for which the claim was submitted.\"}}},\"kind\":\"dev\",\"methods\":{\"getClaim(address,bytes)\":{\"details\":\"The encoding of _proofContext might vary depending on the history implementation\",\"params\":{\"_dapp\":\"The DApp\",\"_proofContext\":\"Data for retrieving the desired claim\"},\"returns\":{\"_0\":\"The epoch hash of the claim\",\"_1\":\"The index of the first input of the epoch in the input box\",\"_2\":\"The index of the last input of the epoch in the input box\"}},\"migrateToConsensus(address)\":{\"details\":\"Should have access control\",\"params\":{\"_consensus\":\"The new consensus\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewClaimToHistory(address,(bytes32,uint128,uint128))\":{\"notice\":\"A new claim was submitted\"}},\"kind\":\"user\",\"methods\":{\"getClaim(address,bytes)\":{\"notice\":\"Get a claim\"},\"migrateToConsensus(address)\":{\"notice\":\"Migrate to a new consensus\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/history/History.sol\":\"History\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/history/History.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title History\\npragma solidity ^0.8.13;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IHistory} from \\\"./IHistory.sol\\\";\\n\\ncontract History is IHistory, Ownable {\\n    struct Claim {\\n        bytes32 epochHash;\\n        uint128 firstIndex;\\n        uint128 lastIndex;\\n    }\\n\\n    // mapping from dapp address => array of claims\\n    mapping(address => Claim[]) claims;\\n\\n    // Events\\n\\n    /// @notice A new claim was submitted\\n    /// @param dapp  The address of the dapp for which the claim was submitted.\\n    /// @param claim Claim for a specific dapp\\n    event NewClaimToHistory(address indexed dapp, Claim claim);\\n\\n    constructor(address _owner) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (_owner != msg.sender) {\\n            transferOwnership(_owner);\\n        }\\n    }\\n\\n    function submitClaim(\\n        bytes calldata _encodedClaim\\n    ) external override onlyOwner {\\n        (address dapp, Claim memory claim) = abi.decode(\\n            _encodedClaim,\\n            (address, Claim)\\n        );\\n\\n        require(claim.firstIndex <= claim.lastIndex, \\\"History: FI > LI\\\");\\n\\n        Claim[] storage dappClaims = claims[dapp];\\n        uint256 numDAppClaims = dappClaims.length;\\n\\n        require(\\n            numDAppClaims == 0 ||\\n                (claim.firstIndex > dappClaims[numDAppClaims - 1].lastIndex),\\n            \\\"History: FI <= previous LI\\\"\\n        );\\n\\n        dappClaims.push(claim);\\n\\n        emit NewClaimToHistory(dapp, claim);\\n    }\\n\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        uint256 claimIndex = abi.decode(_proofContext, (uint256));\\n\\n        Claim memory claim = claims[_dapp][claimIndex];\\n\\n        return (claim.epochHash, claim.firstIndex, claim.lastIndex);\\n    }\\n\\n    // emits an `OwnershipTransfered` event (see `Ownable`)\\n    function migrateToConsensus(\\n        address _consensus\\n    ) external override onlyOwner {\\n        transferOwnership(_consensus);\\n    }\\n}\\n\",\"keccak256\":\"0x7fb1b0d48b15eeeedd553b37dd84b5806ef35cd442b03a51d9c574c5ead4a36f\",\"license\":\"Apache-2.0\"},\"contracts/history/IHistory.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title History interface\\npragma solidity ^0.8.13;\\n\\ninterface IHistory {\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev The encoding of _claimData might vary depending on the history implementation\\n    /// @dev Should have access control\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Migrate to a new consensus\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control\\n    function migrateToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get a claim\\n    /// @param _dapp The DApp\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The epoch hash of the claim\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    /// @dev The encoding of _proofContext might vary depending on the history implementation\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n}\\n\",\"keccak256\":\"0x5aa9db5f552a082f345faaf21561022ca04ad71694b91f12aaae0460d5f4a05e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516108dd3803806108dd83398101604081905261002f91610181565b61003833610057565b6001600160a01b038116331461005157610051816100a7565b506101b1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100af610125565b6001600160a01b0381166101195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61012281610057565b50565b6000546001600160a01b0316331461017f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610110565b565b60006020828403121561019357600080fd5b81516001600160a01b03811681146101aa57600080fd5b9392505050565b61071d806101c06000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063d79a824014610091578063ddfdfbb0146100bf578063f2fde38b146100d2578063fc411683146100e5575b600080fd5b61006f6100f8565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a461009f36600461051e565b61010c565b60408051938452602084019290925290820152606001610088565b61006f6100cd366004610573565b6101a5565b61006f6100e03660046105b5565b61038c565b61006f6100f33660046105b5565b610405565b610100610416565b61010a6000610470565b565b600080808061011d858701876105d9565b6001600160a01b0388166000908152600160205260408120805492935090918390811061014c5761014c6105f2565b60009182526020918290206040805160608101825260029390930290910180548084526001909101546001600160801b03808216958501869052600160801b90910416929091018290529a919950975095505050505050565b6101ad610416565b6000806101bc83850185610624565b9150915080604001516001600160801b031681602001516001600160801b031611156102225760405162461bcd60e51b815260206004820152601060248201526f486973746f72793a204649203e204c4960801b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600160205260409020805480158061029e5750816102506001836106c2565b81548110610260576102606105f2565b906000526020600020906002020160010160109054906101000a90046001600160801b03166001600160801b031683602001516001600160801b0316115b6102ea5760405162461bcd60e51b815260206004820152601a60248201527f486973746f72793a204649203c3d2070726576696f7573204c490000000000006044820152606401610219565b8154600180820184556000848152602090819020865160029094020183815586820180516040808a0180516001600160801b03938416600160801b9185169190910217949096019390935582519586529051811692850192909252915116908201526001600160a01b038516907fb71880d7a0c514d48c0296b2721b0a4f9641a45117960f2ca86b5b7873c4ab2f9060600160405180910390a2505050505050565b610394610416565b6001600160a01b0381166103f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610219565b61040281610470565b50565b61040d610416565b6104028161038c565b6000546001600160a01b0316331461010a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610219565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461040257600080fd5b60008083601f8401126104e757600080fd5b50813567ffffffffffffffff8111156104ff57600080fd5b60208301915083602082850101111561051757600080fd5b9250929050565b60008060006040848603121561053357600080fd5b833561053e816104c0565b9250602084013567ffffffffffffffff81111561055a57600080fd5b610566868287016104d5565b9497909650939450505050565b6000806020838503121561058657600080fd5b823567ffffffffffffffff81111561059d57600080fd5b6105a9858286016104d5565b90969095509350505050565b6000602082840312156105c757600080fd5b81356105d2816104c0565b9392505050565b6000602082840312156105eb57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b80356001600160801b038116811461061f57600080fd5b919050565b600080828403608081121561063857600080fd5b8335610643816104c0565b92506060601f198201121561065757600080fd5b506040516060810181811067ffffffffffffffff8211171561068957634e487b7160e01b600052604160045260246000fd5b8060405250602084013581526106a160408501610608565b60208201526106b260608501610608565b6040820152809150509250929050565b6000828210156106e257634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220aab86c386d27d7d447c02978e9e9809782600674b1a0f0284a30dab697ac7e2064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b14610071578063d79a824014610091578063ddfdfbb0146100bf578063f2fde38b146100d2578063fc411683146100e5575b600080fd5b61006f6100f8565b005b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a461009f36600461051e565b61010c565b60408051938452602084019290925290820152606001610088565b61006f6100cd366004610573565b6101a5565b61006f6100e03660046105b5565b61038c565b61006f6100f33660046105b5565b610405565b610100610416565b61010a6000610470565b565b600080808061011d858701876105d9565b6001600160a01b0388166000908152600160205260408120805492935090918390811061014c5761014c6105f2565b60009182526020918290206040805160608101825260029390930290910180548084526001909101546001600160801b03808216958501869052600160801b90910416929091018290529a919950975095505050505050565b6101ad610416565b6000806101bc83850185610624565b9150915080604001516001600160801b031681602001516001600160801b031611156102225760405162461bcd60e51b815260206004820152601060248201526f486973746f72793a204649203e204c4960801b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600160205260409020805480158061029e5750816102506001836106c2565b81548110610260576102606105f2565b906000526020600020906002020160010160109054906101000a90046001600160801b03166001600160801b031683602001516001600160801b0316115b6102ea5760405162461bcd60e51b815260206004820152601a60248201527f486973746f72793a204649203c3d2070726576696f7573204c490000000000006044820152606401610219565b8154600180820184556000848152602090819020865160029094020183815586820180516040808a0180516001600160801b03938416600160801b9185169190910217949096019390935582519586529051811692850192909252915116908201526001600160a01b038516907fb71880d7a0c514d48c0296b2721b0a4f9641a45117960f2ca86b5b7873c4ab2f9060600160405180910390a2505050505050565b610394610416565b6001600160a01b0381166103f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610219565b61040281610470565b50565b61040d610416565b6104028161038c565b6000546001600160a01b0316331461010a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610219565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461040257600080fd5b60008083601f8401126104e757600080fd5b50813567ffffffffffffffff8111156104ff57600080fd5b60208301915083602082850101111561051757600080fd5b9250929050565b60008060006040848603121561053357600080fd5b833561053e816104c0565b9250602084013567ffffffffffffffff81111561055a57600080fd5b610566868287016104d5565b9497909650939450505050565b6000806020838503121561058657600080fd5b823567ffffffffffffffff81111561059d57600080fd5b6105a9858286016104d5565b90969095509350505050565b6000602082840312156105c757600080fd5b81356105d2816104c0565b9392505050565b6000602082840312156105eb57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b80356001600160801b038116811461061f57600080fd5b919050565b600080828403608081121561063857600080fd5b8335610643816104c0565b92506060601f198201121561065757600080fd5b506040516060810181811067ffffffffffffffff8211171561068957634e487b7160e01b600052604160045260246000fd5b8060405250602084013581526106a160408501610608565b60208201526106b260608501610608565b6040820152809150509250929050565b6000828210156106e257634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220aab86c386d27d7d447c02978e9e9809782600674b1a0f0284a30dab697ac7e2064736f6c634300080d0033",
  "devdoc": {
    "events": {
      "NewClaimToHistory(address,(bytes32,uint128,uint128))": {
        "params": {
          "claim": "Claim for a specific dapp",
          "dapp": "The address of the dapp for which the claim was submitted."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getClaim(address,bytes)": {
        "details": "The encoding of _proofContext might vary depending on the history implementation",
        "params": {
          "_dapp": "The DApp",
          "_proofContext": "Data for retrieving the desired claim"
        },
        "returns": {
          "_0": "The epoch hash of the claim",
          "_1": "The index of the first input of the epoch in the input box",
          "_2": "The index of the last input of the epoch in the input box"
        }
      },
      "migrateToConsensus(address)": {
        "details": "Should have access control",
        "params": {
          "_consensus": "The new consensus"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewClaimToHistory(address,(bytes32,uint128,uint128))": {
        "notice": "A new claim was submitted"
      }
    },
    "kind": "user",
    "methods": {
      "getClaim(address,bytes)": {
        "notice": "Get a claim"
      },
      "migrateToConsensus(address)": {
        "notice": "Migrate to a new consensus"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1155,
        "contract": "contracts/history/History.sol:History",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2594,
        "contract": "contracts/history/History.sol:History",
        "label": "claims",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(Claim)2588_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Claim)2588_storage)dyn_storage": {
        "base": "t_struct(Claim)2588_storage",
        "encoding": "dynamic_array",
        "label": "struct History.Claim[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Claim)2588_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct History.Claim[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Claim)2588_storage)dyn_storage"
      },
      "t_struct(Claim)2588_storage": {
        "encoding": "inplace",
        "label": "struct History.Claim",
        "members": [
          {
            "astId": 2583,
            "contract": "contracts/history/History.sol:History",
            "label": "epochHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2585,
            "contract": "contracts/history/History.sol:History",
            "label": "firstIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 2587,
            "contract": "contracts/history/History.sol:History",
            "label": "lastIndex",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}