{
  "address": "0xdfE71bbad0ce232131dcc9e42e131ADD57ff3998",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "alreadyClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        }
      ],
      "name": "clearAgreementMask",
      "outputs": [
        {
          "internalType": "ClaimsMask",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        }
      ],
      "name": "getAgreementMask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        }
      ],
      "name": "getConsensusGoalMask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getNumClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseNumClaims",
      "outputs": [
        {
          "internalType": "ClaimsMask",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "newClaimsMask",
      "outputs": [
        {
          "internalType": "ClaimsMask",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numValidators",
          "type": "uint256"
        }
      ],
      "name": "newClaimsMaskWithConsensusGoalSet",
      "outputs": [
        {
          "internalType": "ClaimsMask",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "removeValidator",
      "outputs": [
        {
          "internalType": "ClaimsMask",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "setAgreementMask",
      "outputs": [
        {
          "internalType": "ClaimsMask",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "ClaimsMask",
          "name": "_claimsMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setNumClaims",
      "outputs": [
        {
          "internalType": "ClaimsMask",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d9151f8df1427fffac28964c4a388a33756bf4e38c224ac7a78098f5693f072",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0xdfE71bbad0ce232131dcc9e42e131ADD57ff3998",
    "transactionIndex": 1,
    "gasUsed": "347185",
    "logsBloom": "0x
    "blockHash": "0x661f5fbc9bb6dfdf4bc5c67b49114d8598f778b825cc8f7e1f005d97f26dfd9c",
    "transactionHash": "0x2d9151f8df1427fffac28964c4a388a33756bf4e38c224ac7a78098f5693f072",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25798454,
        "transactionHash": "0x2d9151f8df1427fffac28964c4a388a33756bf4e38c224ac7a78098f5693f072",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000031568447a5961600000000000000000000000000000000000000000000000003ee5af95304e3230000000000000000000000000000000000000000000009f81e8ab6f11577881d00000000000000000000000000000000000000000000000003bd04750b5f4d0d0000000000000000000000000000000000000000000009f81ebc0d755d1d1e33",
        "logIndex": 7,
        "blockHash": "0x661f5fbc9bb6dfdf4bc5c67b49114d8598f778b825cc8f7e1f005d97f26dfd9c"
      }
    ],
    "blockNumber": 25798454,
    "cumulativeGasUsed": "762875",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a2b3a8408e24625b8f869ed6c9ef20a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"alreadyClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"}],\"name\":\"clearAgreementMask\",\"outputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"}],\"name\":\"getAgreementMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"}],\"name\":\"getConsensusGoalMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getNumClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseNumClaims\",\"outputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"newClaimsMask\",\"outputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numValidators\",\"type\":\"uint256\"}],\"name\":\"newClaimsMaskWithConsensusGoalSet\",\"outputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"setAgreementMask\",\"outputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"_claimsMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setNumClaims\",\"outputs\":[{\"internalType\":\"ClaimsMask\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"alreadyClaimed(uint256,uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\",\"_validatorIndex\":\"index of the validator in the validator array, starting from 0\"}},\"clearAgreementMask(uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\"}},\"getAgreementMask(uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\"}},\"getConsensusGoalMask(uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\"}},\"getNumClaims(uint256,uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\",\"_validatorIndex\":\"index of the validator in the validator array, starting from 0     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager\"}},\"increaseNumClaims(uint256,uint256,uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\",\"_validatorIndex\":\"index of the validator in the validator array, starting from 0\",\"_value\":\"the increase amount\"}},\"newClaimsMask(uint256)\":{\"params\":{\"_value\":\"the value following the format of ClaimsMask\"}},\"newClaimsMaskWithConsensusGoalSet(uint256)\":{\"params\":{\"_numValidators\":\"the number of validators\"}},\"removeValidator(uint256,uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\",\"_validatorIndex\":\"index of the validator in the validator array, starting from 0\"}},\"setAgreementMask(uint256,uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\",\"_validatorIndex\":\"index of the validator in the validator array, starting from 0\"}},\"setNumClaims(uint256,uint256,uint256)\":{\"params\":{\"_claimsMask\":\"the ClaimsMask value\",\"_validatorIndex\":\"index of the validator in the validator array, starting from 0\",\"_value\":\"the set value\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"alreadyClaimed(uint256,uint256)\":{\"notice\":\"check if a validator has already claimed\"},\"clearAgreementMask(uint256)\":{\"notice\":\"get consensus goal mask\"},\"getAgreementMask(uint256)\":{\"notice\":\"get the entire agreement mask\"},\"getConsensusGoalMask(uint256)\":{\"notice\":\"get the entire consensus goal mask\"},\"getNumClaims(uint256,uint256)\":{\"notice\":\"this function returns the #claims for the specified validator\"},\"increaseNumClaims(uint256,uint256,uint256)\":{\"notice\":\"this function increases the #claims for the specified validator\"},\"newClaimsMask(uint256)\":{\"notice\":\"this function creates a new ClaimsMask variable with value _value\"},\"newClaimsMaskWithConsensusGoalSet(uint256)\":{\"notice\":\"this function creates a new ClaimsMask variable with the consensus goal mask set,         according to the number of validators\"},\"removeValidator(uint256,uint256)\":{\"notice\":\"remove validator from the ClaimsMask\"},\"setAgreementMask(uint256,uint256)\":{\"notice\":\"set agreement mask for the specified validator\"},\"setNumClaims(uint256,uint256,uint256)\":{\"notice\":\"this function sets the #claims for the specified validator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/LibClaimsMask.sol\":\"LibClaimsMask\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/LibClaimsMask.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title ClaimsMask library\\npragma solidity >=0.8.8;\\n\\n// ClaimsMask is used to keep track of the number of claims for up to 8 validators\\n// | agreement mask | consensus goal mask | #claims_validator7 | #claims_validator6 | ... | #claims_validator0 |\\n// |     8 bits     |        8 bits       |      30 bits       |      30 bits       | ... |      30 bits       |\\n// In Validator Manager, #claims_validator indicates the #claims the validator has made.\\n// In Fee Manager, #claims_validator indicates the #claims the validator has redeemed. In this case,\\n//      agreement mask and consensus goal mask are not used.\\n\\ntype ClaimsMask is uint256;\\n\\nlibrary LibClaimsMask {\\n    uint256 constant claimsBitLen = 30; // #bits used for each #claims\\n\\n    /// @notice this function creates a new ClaimsMask variable with value _value\\n    /// @param  _value the value following the format of ClaimsMask\\n    function newClaimsMask(uint256 _value) public pure returns (ClaimsMask) {\\n        return ClaimsMask.wrap(_value);\\n    }\\n\\n    /// @notice this function creates a new ClaimsMask variable with the consensus goal mask set,\\n    ///         according to the number of validators\\n    /// @param  _numValidators the number of validators\\n    function newClaimsMaskWithConsensusGoalSet(uint256 _numValidators)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_numValidators <= 8, \\\"up to 8 validators\\\");\\n        uint256 consensusMask = (1 << _numValidators) - 1;\\n        return ClaimsMask.wrap(consensusMask << 240); // 256 - 8 - 8 = 240\\n    }\\n\\n    /// @notice this function returns the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    ///     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager\\n    function getNumClaims(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 bitmask = (1 << claimsBitLen) - 1;\\n        return\\n            (ClaimsMask.unwrap(_claimsMask) >>\\n                (claimsBitLen * _validatorIndex)) & bitmask;\\n    }\\n\\n    /// @notice this function increases the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the increase amount\\n    function increaseNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 currentNum = getNumClaims(_claimsMask, _validatorIndex);\\n        uint256 newNum = currentNum + _value; // overflows checked by default with sol0.8\\n        return setNumClaims(_claimsMask, _validatorIndex, newNum);\\n    }\\n\\n    /// @notice this function sets the #claims for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    /// @param  _value the set value\\n    function setNumClaims(\\n        ClaimsMask _claimsMask,\\n        uint256 _validatorIndex,\\n        uint256 _value\\n    ) public pure returns (ClaimsMask) {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        require(_value <= ((1 << claimsBitLen) - 1), \\\"ClaimsMask Overflow\\\");\\n        uint256 bitmask = ~(((1 << claimsBitLen) - 1) <<\\n            (claimsBitLen * _validatorIndex));\\n        uint256 clearedClaimsMask = ClaimsMask.unwrap(_claimsMask) & bitmask;\\n        _claimsMask = ClaimsMask.wrap(\\n            clearedClaimsMask | (_value << (claimsBitLen * _validatorIndex))\\n        );\\n        return _claimsMask;\\n    }\\n\\n    /// @notice get consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function clearAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        uint256 clearedMask = ClaimsMask.unwrap(_claimsMask) & ((1 << 248) - 1); // 256 - 8 = 248\\n        return ClaimsMask.wrap(clearedMask);\\n    }\\n\\n    /// @notice get the entire agreement mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getAgreementMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return (ClaimsMask.unwrap(_claimsMask) >> 248); // get the first 8 bits\\n    }\\n\\n    /// @notice check if a validator has already claimed\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function alreadyClaimed(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        // get the first 8 bits. Then & operation on the validator's bit to see if it's set\\n        return\\n            (((ClaimsMask.unwrap(_claimsMask) >> 248) >> _validatorIndex) &\\n                1) != 0;\\n    }\\n\\n    /// @notice set agreement mask for the specified validator\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function setAgreementMask(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 setMask = (ClaimsMask.unwrap(_claimsMask) |\\n            (1 << (248 + _validatorIndex))); // 256 - 8 = 248\\n        return ClaimsMask.wrap(setMask);\\n    }\\n\\n    /// @notice get the entire consensus goal mask\\n    /// @param  _claimsMask the ClaimsMask value\\n    function getConsensusGoalMask(ClaimsMask _claimsMask)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return ((ClaimsMask.unwrap(_claimsMask) << 8) >> 248); // get the second 8 bits\\n    }\\n\\n    /// @notice remove validator from the ClaimsMask\\n    /// @param  _claimsMask the ClaimsMask value\\n    /// @param  _validatorIndex index of the validator in the validator array, starting from 0\\n    function removeValidator(ClaimsMask _claimsMask, uint256 _validatorIndex)\\n        public\\n        pure\\n        returns (ClaimsMask)\\n    {\\n        require(_validatorIndex < 8, \\\"index out of range\\\");\\n        uint256 claimsMaskValue = ClaimsMask.unwrap(_claimsMask);\\n        // remove validator from agreement bitmask\\n        uint256 zeroMask = ~(1 << (_validatorIndex + 248)); // 256 - 8 = 248\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from consensus goal mask\\n        zeroMask = ~(1 << (_validatorIndex + 240)); // 256 - 8 - 8 = 240\\n        claimsMaskValue = (claimsMaskValue & zeroMask);\\n        // remove validator from #claims\\n        return\\n            setNumClaims(ClaimsMask.wrap(claimsMaskValue), _validatorIndex, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x581915d6dcd3aa9e447f89b8bf902bc4f4a72c40b9e8575e196741a8974ea74a\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61055161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c8063cb9f88131161007b578063cb9f881314610128578063cd70835c14610156578063cf7b90a614610169578063d4056ffe14610183578063de7fb2801461019a578063fa95f400146101ad57600080fd5b806352f1d2b4146100b8578063574125c2146100de5780638336d005146100f1578063a8c5d8f414610102578063ac266b8c14610115575b600080fd5b6100cb6100c6366004610424565b6101c1565b6040519081526020015b60405180910390f35b6100cb6100ec366004610450565b61021d565b6100cb6100ff366004610450565b90565b6100cb610110366004610469565b61027e565b6100cb610123366004610469565b6102cc565b610146610136366004610469565b60f89190911c901c600116151590565b60405190151581526020016100d5565b6100cb610164366004610469565b610332565b6100cb610177366004610450565b6001600160f81b031690565b6100cb610191366004610450565b60f01c60ff1690565b6100cb6101a8366004610424565b610370565b6100cb6101bb366004610450565b60f81c90565b6000600883106101ec5760405162461bcd60e51b81526004016101e39061048b565b60405180910390fd5b60006101f8858561027e565b9050600061020684836104cd565b9050610213868683610370565b9695505050505050565b600060088211156102655760405162461bcd60e51b8152602060048201526012602482015271757020746f20382076616c696461746f727360701b60448201526064016101e3565b6000610274600180851b6104e5565b60f01b9392505050565b6000600882106102a05760405162461bcd60e51b81526004016101e39061048b565b60006102b1600163400000006104e5565b9050806102bf84601e6104fc565b85901c1691505092915050565b6000600882106102ee5760405162461bcd60e51b81526004016101e39061048b565b8260006102fc8460f86104cd565b6001901b199182169190506103128460f06104cd565b6001901b1991821691905061032982856000610370565b95945050505050565b6000600882106103545760405162461bcd60e51b81526004016101e39061048b565b60006103618360f86104cd565b6001901b841791505092915050565b6000600883106103925760405162461bcd60e51b81526004016101e39061048b565b6103a1600163400000006104e5565b8211156103e65760405162461bcd60e51b8152602060048201526013602482015272436c61696d734d61736b204f766572666c6f7760681b60448201526064016101e3565b60006103f384601e6104fc565b610402600163400000006104e5565b901b19905084811661041585601e6104fc565b9390931b909217949350505050565b60008060006060848603121561043957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561046257600080fd5b5035919050565b6000806040838503121561047c57600080fd5b50508035926020909101359150565b602080825260129082015271696e646578206f7574206f662072616e676560701b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156104e0576104e06104b7565b500190565b6000828210156104f7576104f76104b7565b500390565b6000816000190483118215151615610516576105166104b7565b50029056fea26469706673582212203b7b0bad37adb9cc5e0857b6fa086328302081fb7c5a8152c39eef0f6358c04c64736f6c634300080d0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c8063cb9f88131161007b578063cb9f881314610128578063cd70835c14610156578063cf7b90a614610169578063d4056ffe14610183578063de7fb2801461019a578063fa95f400146101ad57600080fd5b806352f1d2b4146100b8578063574125c2146100de5780638336d005146100f1578063a8c5d8f414610102578063ac266b8c14610115575b600080fd5b6100cb6100c6366004610424565b6101c1565b6040519081526020015b60405180910390f35b6100cb6100ec366004610450565b61021d565b6100cb6100ff366004610450565b90565b6100cb610110366004610469565b61027e565b6100cb610123366004610469565b6102cc565b610146610136366004610469565b60f89190911c901c600116151590565b60405190151581526020016100d5565b6100cb610164366004610469565b610332565b6100cb610177366004610450565b6001600160f81b031690565b6100cb610191366004610450565b60f01c60ff1690565b6100cb6101a8366004610424565b610370565b6100cb6101bb366004610450565b60f81c90565b6000600883106101ec5760405162461bcd60e51b81526004016101e39061048b565b60405180910390fd5b60006101f8858561027e565b9050600061020684836104cd565b9050610213868683610370565b9695505050505050565b600060088211156102655760405162461bcd60e51b8152602060048201526012602482015271757020746f20382076616c696461746f727360701b60448201526064016101e3565b6000610274600180851b6104e5565b60f01b9392505050565b6000600882106102a05760405162461bcd60e51b81526004016101e39061048b565b60006102b1600163400000006104e5565b9050806102bf84601e6104fc565b85901c1691505092915050565b6000600882106102ee5760405162461bcd60e51b81526004016101e39061048b565b8260006102fc8460f86104cd565b6001901b199182169190506103128460f06104cd565b6001901b1991821691905061032982856000610370565b95945050505050565b6000600882106103545760405162461bcd60e51b81526004016101e39061048b565b60006103618360f86104cd565b6001901b841791505092915050565b6000600883106103925760405162461bcd60e51b81526004016101e39061048b565b6103a1600163400000006104e5565b8211156103e65760405162461bcd60e51b8152602060048201526013602482015272436c61696d734d61736b204f766572666c6f7760681b60448201526064016101e3565b60006103f384601e6104fc565b610402600163400000006104e5565b901b19905084811661041585601e6104fc565b9390931b909217949350505050565b60008060006060848603121561043957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561046257600080fd5b5035919050565b6000806040838503121561047c57600080fd5b50508035926020909101359150565b602080825260129082015271696e646578206f7574206f662072616e676560701b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156104e0576104e06104b7565b500190565b6000828210156104f7576104f76104b7565b500390565b6000816000190483118215151615610516576105166104b7565b50029056fea26469706673582212203b7b0bad37adb9cc5e0857b6fa086328302081fb7c5a8152c39eef0f6358c04c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "alreadyClaimed(uint256,uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value",
          "_validatorIndex": "index of the validator in the validator array, starting from 0"
        }
      },
      "clearAgreementMask(uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value"
        }
      },
      "getAgreementMask(uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value"
        }
      },
      "getConsensusGoalMask(uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value"
        }
      },
      "getNumClaims(uint256,uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value",
          "_validatorIndex": "index of the validator in the validator array, starting from 0     this index can be obtained though `getNumberOfClaimsByIndex` function in Validator Manager"
        }
      },
      "increaseNumClaims(uint256,uint256,uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value",
          "_validatorIndex": "index of the validator in the validator array, starting from 0",
          "_value": "the increase amount"
        }
      },
      "newClaimsMask(uint256)": {
        "params": {
          "_value": "the value following the format of ClaimsMask"
        }
      },
      "newClaimsMaskWithConsensusGoalSet(uint256)": {
        "params": {
          "_numValidators": "the number of validators"
        }
      },
      "removeValidator(uint256,uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value",
          "_validatorIndex": "index of the validator in the validator array, starting from 0"
        }
      },
      "setAgreementMask(uint256,uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value",
          "_validatorIndex": "index of the validator in the validator array, starting from 0"
        }
      },
      "setNumClaims(uint256,uint256,uint256)": {
        "params": {
          "_claimsMask": "the ClaimsMask value",
          "_validatorIndex": "index of the validator in the validator array, starting from 0",
          "_value": "the set value"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "alreadyClaimed(uint256,uint256)": {
        "notice": "check if a validator has already claimed"
      },
      "clearAgreementMask(uint256)": {
        "notice": "get consensus goal mask"
      },
      "getAgreementMask(uint256)": {
        "notice": "get the entire agreement mask"
      },
      "getConsensusGoalMask(uint256)": {
        "notice": "get the entire consensus goal mask"
      },
      "getNumClaims(uint256,uint256)": {
        "notice": "this function returns the #claims for the specified validator"
      },
      "increaseNumClaims(uint256,uint256,uint256)": {
        "notice": "this function increases the #claims for the specified validator"
      },
      "newClaimsMask(uint256)": {
        "notice": "this function creates a new ClaimsMask variable with value _value"
      },
      "newClaimsMaskWithConsensusGoalSet(uint256)": {
        "notice": "this function creates a new ClaimsMask variable with the consensus goal mask set,         according to the number of validators"
      },
      "removeValidator(uint256,uint256)": {
        "notice": "remove validator from the ClaimsMask"
      },
      "setAgreementMask(uint256,uint256)": {
        "notice": "set agreement mask for the specified validator"
      },
      "setNumClaims(uint256,uint256,uint256)": {
        "notice": "this function sets the #claims for the specified validator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}