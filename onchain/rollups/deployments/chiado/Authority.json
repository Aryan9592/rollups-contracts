{
  "address": "0x664AF8a1734f0726D47407F980d68f434e00cc49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IHistory",
          "name": "_history",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IInputBox",
          "name": "inputBox",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IHistory",
          "name": "history",
          "type": "address"
        }
      ],
      "name": "ConsensusCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IHistory",
          "name": "history",
          "type": "address"
        }
      ],
      "name": "NewHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proofContext",
          "type": "bytes"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHistory",
      "outputs": [
        {
          "internalType": "contract IHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consensus",
          "type": "address"
        }
      ],
      "name": "migrateHistoryToConsensus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHistory",
          "name": "_history",
          "type": "address"
        }
      ],
      "name": "setHistory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_claimData",
          "type": "bytes"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8768f3bc072d6d8fd133ccdfdca07fb2128494c838a443cd2683406caed78fb2",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "529750",
    "logsBloom": "0x
    "blockHash": "0x66f59a3ad422a1c6c5479330ae4925a172d36315f0475495d9cd170b145816e6",
    "transactionHash": "0x8768f3bc072d6d8fd133ccdfdca07fb2128494c838a443cd2683406caed78fb2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1839493,
        "transactionHash": "0x8768f3bc072d6d8fd133ccdfdca07fb2128494c838a443cd2683406caed78fb2",
        "address": "0x664AF8a1734f0726D47407F980d68f434e00cc49",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x66f59a3ad422a1c6c5479330ae4925a172d36315f0475495d9cd170b145816e6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1839493,
        "transactionHash": "0x8768f3bc072d6d8fd133ccdfdca07fb2128494c838a443cd2683406caed78fb2",
        "address": "0x664AF8a1734f0726D47407F980d68f434e00cc49",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x66f59a3ad422a1c6c5479330ae4925a172d36315f0475495d9cd170b145816e6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1839493,
        "transactionHash": "0x8768f3bc072d6d8fd133ccdfdca07fb2128494c838a443cd2683406caed78fb2",
        "address": "0x664AF8a1734f0726D47407F980d68f434e00cc49",
        "topics": [
          "0x25b0664e0a40f3e96d12428b372e2f2166432a8e6ac723e7911e81a588061c73"
        ],
        "data": "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0000000000000000000000000da5fbe19afc6e8cf32aab6df0a1154ef507ee238000000000000000000000000b82891259423911774fa11a4be7f1bac0dcf095d",
        "logIndex": 2,
        "blockHash": "0x66f59a3ad422a1c6c5479330ae4925a172d36315f0475495d9cd170b145816e6"
      }
    ],
    "blockNumber": 1839493,
    "cumulativeGasUsed": "529750",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "0xDA5fbE19afC6e8cf32aAb6Df0A1154EF507Ee238",
    "0xB82891259423911774FA11a4Be7F1bac0DCf095D"
  ],
  "numDeployments": 2,
  "solcInputHash": "0c9e5477ee1b2c079e9836e191b9e01f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IHistory\",\"name\":\"_history\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInputBox\",\"name\":\"inputBox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IHistory\",\"name\":\"history\",\"type\":\"address\"}],\"name\":\"ConsensusCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IHistory\",\"name\":\"history\",\"type\":\"address\"}],\"name\":\"NewHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proofContext\",\"type\":\"bytes\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHistory\",\"outputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consensus\",\"type\":\"address\"}],\"name\":\"migrateHistoryToConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHistory\",\"name\":\"_history\",\"type\":\"address\"}],\"name\":\"setHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_claimData\",\"type\":\"bytes\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getClaim(address,bytes)\":{\"details\":\"The encoding of _proofContext might vary depending on the history implementation\",\"params\":{\"_dapp\":\"The DApp\",\"_proofContext\":\"Data for retrieving the desired claim\"},\"returns\":{\"_0\":\"The epoch hash contained in the claim\",\"_1\":\"The index of the first input in the input box for which the epoch hash is valid\",\"_2\":\"The index of the last input in the input box for which the epoch hash is valid\"}},\"getHistory()\":{\"returns\":{\"_0\":\"The current history\"}},\"migrateHistoryToConsensus(address)\":{\"details\":\"Should have access control\",\"params\":{\"_consensus\":\"The new consensus\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setHistory(address)\":{\"details\":\"Should have access control\",\"params\":{\"_history\":\"The new history\"}},\"submitClaim(bytes)\":{\"details\":\"Will fail if history has migrated to another consensus\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20Tokens(address,address,uint256)\":{\"params\":{\"_amount\":\"The transfer amount\",\"_recipient\":\"The recipient address\",\"_token\":\"The ERC-20 token\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ConsensusCreated(address,address,address)\":{\"notice\":\"A consensus was created\"},\"NewHistory(address)\":{\"notice\":\"A new history is used\"}},\"kind\":\"user\",\"methods\":{\"getClaim(address,bytes)\":{\"notice\":\"Get the epoch hash for a given DApp from a claim\"},\"getHistory()\":{\"notice\":\"Get the current history\"},\"migrateHistoryToConsensus(address)\":{\"notice\":\"Migrate the current history to a new consensus\"},\"setHistory(address)\":{\"notice\":\"Point the consensus to a new history\"},\"withdrawERC20Tokens(address,address,uint256)\":{\"notice\":\"Transfer ERC-20 tokens from consensus contract to a recipient\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/consensus/authority/Authority.sol\":\"Authority\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/consensus/IConsensus.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Consensus interface\\npragma solidity ^0.8.13;\\n\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {IHistory} from \\\"../history/IHistory.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConsensus {\\n    // Events\\n\\n    /// @notice A consensus was created\\n    /// @param owner The address that owns the consensus\\n    /// @param inputBox The input box used by the consensus\\n    /// @param history The history that the consensus writes to\\n    event ConsensusCreated(address owner, IInputBox inputBox, IHistory history);\\n\\n    /// @notice A new history is used\\n    /// @param history The new history\\n    event NewHistory(IHistory history);\\n\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim to history\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev The encoding of _claimData might vary depending on the history implementation\\n    /// @dev Should have access control\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Point the consensus to a new history\\n    /// @param _history The new history\\n    /// @dev Should have access control\\n    function setHistory(IHistory _history) external;\\n\\n    /// @notice Migrate the current history to a new consensus\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control\\n    function migrateHistoryToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get the current history\\n    /// @return The current history\\n    function getHistory() external view returns (IHistory);\\n\\n    /// @notice Get the epoch hash for a given DApp from a claim\\n    /// @param _dapp The DApp\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The epoch hash contained in the claim\\n    /// @return firstInputIndex_ The index of the first input in the input box for which the epoch hash is valid\\n    /// @return lastInputIndex_ The index of the last input in the input box for which the epoch hash is valid\\n    /// @dev The encoding of _proofContext might vary depending on the history implementation\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n\\n    /// @notice Transfer ERC-20 tokens from consensus contract to a recipient\\n    /// @param _token The ERC-20 token\\n    /// @param _recipient The recipient address\\n    /// @param _amount The transfer amount\\n    function withdrawERC20Tokens(\\n        IERC20 _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x86419c156a1e2260e21088208443b684514b09301e97cb8338b3b20d488ed9dd\",\"license\":\"Apache-2.0\"},\"contracts/consensus/authority/Authority.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Authority\\npragma solidity ^0.8.13;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IConsensus} from \\\"../IConsensus.sol\\\";\\nimport {IInputBox} from \\\"../../inputs/IInputBox.sol\\\";\\nimport {IHistory} from \\\"../../history/IHistory.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Authority is IConsensus, Ownable {\\n    IHistory history;\\n\\n    constructor(address _owner, IInputBox _inputBox, IHistory _history) {\\n        // constructor in Ownable already called `transferOwnership(msg.sender)`, so\\n        // we only need to call `transferOwnership(_owner)` if _owner != msg.sender\\n        if (msg.sender != _owner) {\\n            transferOwnership(_owner);\\n        }\\n        history = _history;\\n        emit ConsensusCreated(_owner, _inputBox, _history);\\n    }\\n\\n    /// @dev Will fail if history has migrated to another consensus\\n    function submitClaim(\\n        bytes calldata _claimData\\n    ) external override onlyOwner {\\n        history.submitClaim(_claimData);\\n    }\\n\\n    function migrateHistoryToConsensus(\\n        address _consensus\\n    ) external override onlyOwner {\\n        history.migrateToConsensus(_consensus);\\n    }\\n\\n    function setHistory(IHistory _history) external override onlyOwner {\\n        history = _history;\\n        emit NewHistory(_history);\\n    }\\n\\n    function getHistory() external view override returns (IHistory) {\\n        return history;\\n    }\\n\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    ) external view override returns (bytes32, uint256, uint256) {\\n        return history.getClaim(_dapp, _proofContext);\\n    }\\n\\n    function withdrawERC20Tokens(\\n        IERC20 _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        require(\\n            _token.transfer(_recipient, _amount),\\n            \\\"Authority: withdrawal failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2eae87c1dd038bb002811dec8b78b7c495534077ceb04918c91dea3a86e20a64\",\"license\":\"Apache-2.0\"},\"contracts/history/IHistory.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title History interface\\npragma solidity ^0.8.13;\\n\\ninterface IHistory {\\n    // Permissioned functions\\n\\n    /// @notice Submit a claim\\n    /// @param _claimData Data for submitting a claim\\n    /// @dev The encoding of _claimData might vary depending on the history implementation\\n    /// @dev Should have access control\\n    function submitClaim(bytes calldata _claimData) external;\\n\\n    /// @notice Migrate to a new consensus\\n    /// @param _consensus The new consensus\\n    /// @dev Should have access control\\n    function migrateToConsensus(address _consensus) external;\\n\\n    // Permissionless functions\\n\\n    /// @notice Get a claim\\n    /// @param _dapp The DApp\\n    /// @param _proofContext Data for retrieving the desired claim\\n    /// @return epochHash_ The epoch hash of the claim\\n    /// @return firstInputIndex_ The index of the first input of the epoch in the input box\\n    /// @return lastInputIndex_ The index of the last input of the epoch in the input box\\n    /// @dev The encoding of _proofContext might vary depending on the history implementation\\n    function getClaim(\\n        address _dapp,\\n        bytes calldata _proofContext\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32 epochHash_,\\n            uint256 firstInputIndex_,\\n            uint256 lastInputIndex_\\n        );\\n}\\n\",\"keccak256\":\"0x5aa9db5f552a082f345faaf21561022ca04ad71694b91f12aaae0460d5f4a05e\",\"license\":\"Apache-2.0\"},\"contracts/inputs/IInputBox.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input Box interface\\npragma solidity ^0.8.13;\\n\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to a DApp's input box\\n    /// @param dapp The address of the DApp\\n    /// @param inboxInputIndex The index of the input in the input box\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    event InputAdded(\\n        address indexed dapp,\\n        uint256 indexed inboxInputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @return Number of inputs in the DApp's input box\\n    function getNumberOfInputs(address _dapp) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @param _index The index of the input in the DApp's input box\\n    /// @return The hash of the input at the provided index in the DApp's input box\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0d1f8f731b0205cfb902d4ff0b7f08fc962da0f532e075074f5d82948c2d8447\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109d83803806109d883398101604081905261002f916101f8565b610038336100b9565b336001600160a01b038416146100515761005183610109565b600180546001600160a01b0319166001600160a01b0383811691821790925560408051868416815292851660208401528201527f25b0664e0a40f3e96d12428b372e2f2166432a8e6ac723e7911e81a588061c739060600160405180910390a1505050610245565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610111610187565b6001600160a01b03811661017b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610184816100b9565b50565b6000546001600160a01b031633146101e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610172565b565b6001600160a01b038116811461018457600080fd5b60008060006060848603121561020d57600080fd5b8351610218816101e3565b6020850151909350610229816101e3565b604085015190925061023a816101e3565b809150509250925092565b610784806102546000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063aa15efc811610066578063aa15efc8146100f2578063bcdd1e1314610103578063d79a824014610116578063ddfdfbb014610144578063f2fde38b1461015757600080fd5b8063159c5ea114610098578063715018a6146100ad5780638da5cb5b146100b55780639368a3d3146100df575b600080fd5b6100ab6100a6366004610546565b61016a565b005b6100ab6101c6565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab6100ed366004610546565b6101da565b6001546001600160a01b03166100c2565b6100ab61011136600461056a565b610244565b6101296101243660046105f4565b610315565b604080519384526020840192909252908201526060016100d6565b6100ab610152366004610649565b61039e565b6100ab610165366004610546565b61040e565b610172610487565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e9060200160405180910390a150565b6101ce610487565b6101d860006104e1565b565b6101e2610487565b60015460405163fc41168360e01b81526001600160a01b0383811660048301529091169063fc41168390602401600060405180830381600087803b15801561022957600080fd5b505af115801561023d573d6000803e3d6000fd5b5050505050565b61024c610487565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bf919061068b565b6103105760405162461bcd60e51b815260206004820152601c60248201527f417574686f726974793a207769746864726177616c206661696c65640000000060448201526064015b60405180910390fd5b505050565b60015460405163035e6a0960e61b8152600091829182916001600160a01b03169063d79a82409061034e908990899089906004016106d6565b606060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610704565b92509250925093509350939050565b6103a6610487565b600154604051630ddfdfbb60e41b81526001600160a01b039091169063ddfdfbb0906103d89085908590600401610732565b600060405180830381600087803b1580156103f257600080fd5b505af1158015610406573d6000803e3d6000fd5b505050505050565b610416610487565b6001600160a01b03811661047b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610307565b610484816104e1565b50565b6000546001600160a01b031633146101d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461048457600080fd5b60006020828403121561055857600080fd5b813561056381610531565b9392505050565b60008060006060848603121561057f57600080fd5b833561058a81610531565b9250602084013561059a81610531565b929592945050506040919091013590565b60008083601f8401126105bd57600080fd5b50813567ffffffffffffffff8111156105d557600080fd5b6020830191508360208285010111156105ed57600080fd5b9250929050565b60008060006040848603121561060957600080fd5b833561061481610531565b9250602084013567ffffffffffffffff81111561063057600080fd5b61063c868287016105ab565b9497909650939450505050565b6000806020838503121561065c57600080fd5b823567ffffffffffffffff81111561067357600080fd5b61067f858286016105ab565b90969095509350505050565b60006020828403121561069d57600080fd5b8151801515811461056357600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906106fb90830184866106ad565b95945050505050565b60008060006060848603121561071957600080fd5b8351925060208401519150604084015190509250925092565b6020815260006107466020830184866106ad565b94935050505056fea2646970667358221220656d257d7377ee828600cb642cce8ef984c3e2434693a1831cccf775b661929864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063aa15efc811610066578063aa15efc8146100f2578063bcdd1e1314610103578063d79a824014610116578063ddfdfbb014610144578063f2fde38b1461015757600080fd5b8063159c5ea114610098578063715018a6146100ad5780638da5cb5b146100b55780639368a3d3146100df575b600080fd5b6100ab6100a6366004610546565b61016a565b005b6100ab6101c6565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab6100ed366004610546565b6101da565b6001546001600160a01b03166100c2565b6100ab61011136600461056a565b610244565b6101296101243660046105f4565b610315565b604080519384526020840192909252908201526060016100d6565b6100ab610152366004610649565b61039e565b6100ab610165366004610546565b61040e565b610172610487565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f2bcd43869347a1d42f97ac6042f3d129817abd05a6125f9750fe3724e321d23e9060200160405180910390a150565b6101ce610487565b6101d860006104e1565b565b6101e2610487565b60015460405163fc41168360e01b81526001600160a01b0383811660048301529091169063fc41168390602401600060405180830381600087803b15801561022957600080fd5b505af115801561023d573d6000803e3d6000fd5b5050505050565b61024c610487565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bf919061068b565b6103105760405162461bcd60e51b815260206004820152601c60248201527f417574686f726974793a207769746864726177616c206661696c65640000000060448201526064015b60405180910390fd5b505050565b60015460405163035e6a0960e61b8152600091829182916001600160a01b03169063d79a82409061034e908990899089906004016106d6565b606060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610704565b92509250925093509350939050565b6103a6610487565b600154604051630ddfdfbb60e41b81526001600160a01b039091169063ddfdfbb0906103d89085908590600401610732565b600060405180830381600087803b1580156103f257600080fd5b505af1158015610406573d6000803e3d6000fd5b505050505050565b610416610487565b6001600160a01b03811661047b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610307565b610484816104e1565b50565b6000546001600160a01b031633146101d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461048457600080fd5b60006020828403121561055857600080fd5b813561056381610531565b9392505050565b60008060006060848603121561057f57600080fd5b833561058a81610531565b9250602084013561059a81610531565b929592945050506040919091013590565b60008083601f8401126105bd57600080fd5b50813567ffffffffffffffff8111156105d557600080fd5b6020830191508360208285010111156105ed57600080fd5b9250929050565b60008060006040848603121561060957600080fd5b833561061481610531565b9250602084013567ffffffffffffffff81111561063057600080fd5b61063c868287016105ab565b9497909650939450505050565b6000806020838503121561065c57600080fd5b823567ffffffffffffffff81111561067357600080fd5b61067f858286016105ab565b90969095509350505050565b60006020828403121561069d57600080fd5b8151801515811461056357600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906106fb90830184866106ad565b95945050505050565b60008060006060848603121561071957600080fd5b8351925060208401519150604084015190509250925092565b6020815260006107466020830184866106ad565b94935050505056fea2646970667358221220656d257d7377ee828600cb642cce8ef984c3e2434693a1831cccf775b661929864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getClaim(address,bytes)": {
        "details": "The encoding of _proofContext might vary depending on the history implementation",
        "params": {
          "_dapp": "The DApp",
          "_proofContext": "Data for retrieving the desired claim"
        },
        "returns": {
          "_0": "The epoch hash contained in the claim",
          "_1": "The index of the first input in the input box for which the epoch hash is valid",
          "_2": "The index of the last input in the input box for which the epoch hash is valid"
        }
      },
      "getHistory()": {
        "returns": {
          "_0": "The current history"
        }
      },
      "migrateHistoryToConsensus(address)": {
        "details": "Should have access control",
        "params": {
          "_consensus": "The new consensus"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setHistory(address)": {
        "details": "Should have access control",
        "params": {
          "_history": "The new history"
        }
      },
      "submitClaim(bytes)": {
        "details": "Will fail if history has migrated to another consensus"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20Tokens(address,address,uint256)": {
        "params": {
          "_amount": "The transfer amount",
          "_recipient": "The recipient address",
          "_token": "The ERC-20 token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ConsensusCreated(address,address,address)": {
        "notice": "A consensus was created"
      },
      "NewHistory(address)": {
        "notice": "A new history is used"
      }
    },
    "kind": "user",
    "methods": {
      "getClaim(address,bytes)": {
        "notice": "Get the epoch hash for a given DApp from a claim"
      },
      "getHistory()": {
        "notice": "Get the current history"
      },
      "migrateHistoryToConsensus(address)": {
        "notice": "Migrate the current history to a new consensus"
      },
      "setHistory(address)": {
        "notice": "Point the consensus to a new history"
      },
      "withdrawERC20Tokens(address,address,uint256)": {
        "notice": "Transfer ERC-20 tokens from consensus contract to a recipient"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1155,
        "contract": "contracts/consensus/authority/Authority.sol:Authority",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1896,
        "contract": "contracts/consensus/authority/Authority.sol:Authority",
        "label": "history",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHistory)2764"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHistory)2764": {
        "encoding": "inplace",
        "label": "contract IHistory",
        "numberOfBytes": "20"
      }
    }
  }
}