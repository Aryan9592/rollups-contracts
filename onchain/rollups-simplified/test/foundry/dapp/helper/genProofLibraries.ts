import { BytesLike } from "@ethersproject/bytes";
import epochStatus from "./epoch-status.json";

interface OutputValidityProof {
    outputIndex: number;
    outputHashesRootHash: BytesLike;
    outputsEpochRootHash: BytesLike;
    machineStateHash: BytesLike;
    keccakInHashesSiblings: BytesLike[];
    outputHashesInEpochSiblings: BytesLike[];
}

function setupNoticeProof(epochInputIndex: number): OutputValidityProof {
    let noticeDataKeccakInHashes =
        epochStatus.processedInputs[epochInputIndex].acceptedData.notices[0]
            .keccakInNoticeHashes;
    let noticeHashesInEpoch =
        epochStatus.processedInputs[epochInputIndex].noticeHashesInEpoch
            .siblingHashes;
    var siblingKeccakInHashesN: BytesLike[] = [];
    var noticeHashesInEpochSiblingsN: BytesLike[] = [];
    noticeDataKeccakInHashes.siblingHashes.forEach((element) => {
        siblingKeccakInHashesN.push(element.data);
    });
    noticeHashesInEpoch.forEach((element) => {
        noticeHashesInEpochSiblingsN.push(element.data);
    });
    let noticeProof: OutputValidityProof = {
        outputIndex: 0,
        outputHashesRootHash: noticeDataKeccakInHashes.rootHash.data,
        outputsEpochRootHash: epochStatus.mostRecentNoticesEpochRootHash.data,
        machineStateHash: epochStatus.mostRecentMachineHash.data,
        keccakInHashesSiblings: siblingKeccakInHashesN.reverse(), // from top-down to bottom-up
        outputHashesInEpochSiblings: noticeHashesInEpochSiblingsN.reverse(),
    };
    return noticeProof;
}

function buildSolCodes(noticeProof: OutputValidityProof, libraryName: string): string {
    const array1 = noticeProof.keccakInHashesSiblings;
    const array2 = noticeProof.outputHashesInEpochSiblings;
    const lines: string[] = [
        "// SPDX-License-Identifier: UNLICENSED",
        "",
        "pragma solidity ^0.8.13;",
        "",
        "// THIS FILE WAS AUTOMATICALLY GENERATED BY `genProofLibraries.ts`.",
        "",
        'import {OutputValidityProof} from "contracts/library/LibOutputValidation.sol";',
        "",
        `library ${libraryName} {`,
        "    function getOutputProof() internal pure returns (OutputValidityProof memory) {",
        `        uint256[${array1.length}] memory array1 = [${array1}];`,
        `        uint256[${array2.length}] memory array2 = [${array2}];`,
        `        bytes32[] memory keccakInHashesSiblings = new bytes32[](${array1.length});`,
        `        bytes32[] memory outputHashesInEpochSiblings = new bytes32[](${array2.length});`,
        `        for (uint256 i; i < ${array1.length}; ++i) { keccakInHashesSiblings[i] = bytes32(array1[i]); }`,
        `        for (uint256 i; i < ${array2.length}; ++i) { outputHashesInEpochSiblings[i] = bytes32(array2[i]); }`,
        `        return OutputValidityProof({`,
        `            outputIndex: ${noticeProof.outputIndex},`,
        `            outputHashesRootHash: ${noticeProof.outputHashesRootHash},`,
        `            outputsEpochRootHash: ${noticeProof.outputsEpochRootHash},`,
        `            machineStateHash: ${noticeProof.machineStateHash},`,
        "            keccakInHashesSiblings: keccakInHashesSiblings,",
        "            outputHashesInEpochSiblings: outputHashesInEpochSiblings",
        "        });",
        "    }",
        "}",
        "",
    ];
    return lines.join("\n");
}

const fs = require("fs");

epochStatus.processedInputs.forEach((value, index) => {
    let libraryName = `LibOutputProof${index}`;
    let noticeProof = setupNoticeProof(index);
    let solidityCode = buildSolCodes(noticeProof, libraryName);
    let fileName = `${libraryName}.sol`;
    fs.writeFile(fileName, solidityCode, (err: any) => {
        if (err) throw err;
        console.log(`File '${fileName}' was generated.`);
    });
});
