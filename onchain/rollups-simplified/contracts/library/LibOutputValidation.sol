// Copyright 2022 Cartesi Pte. Ltd.

// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use
// this file except in compliance with the License. You may obtain a copy of the
// License at http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

/// @title Output Validation Library
pragma solidity ^0.8.13;

import {CanonicalMachine} from "../common/CanonicalMachine.sol";
import {Merkle} from "@cartesi/util/contracts/Merkle.sol";

// The epoch hash is a 256-bit value that fully describes the
// machine state and the outputs generated after the admission
// of the inputs. Each output is encoded in a byte array, which
// is then hashed (A). This digest is then divided into 4 pieces,
// 64 bits each. From these pieces, a Merkle tree is built (B).
// This is done for every output. Then, outputs generated by the
// same input are organized by order of emission (C) and their
// Merkle roots are then used to form another Merkle tree (D).
// This same process is repeated once again, but for each input
// admitted during the epoch (E), resulting in another Merkle
// tree (F). The Merkle root of this tree is then hashed together
// with the Machine state hash (G) to form the Epoch Hash (H).
// Be mindful that the hash function employed is the keccak-256.
//
//                    ┌──────────────┐
//          ┌─────────┤Epoch Hash (H)├────────┐
//          │         └──────────────┘        │
//          │                                 │
//          │                                 │
//    ┌─────▼─────┐                ┌──────────▼───────────┐
//    │Merkle Root│                │Machine State Hash (G)│
//    └───────────┘                └──────────────────────┘
//          xx
//         xxxx
//        xxxxxx
//       xxxxxxxx
//      xxxxxxxxxx <-- Merkle tree (F)
//     xxxxxxxxxxxx
//    xxxxxxxxxxxxxx
//   xxxxxxxxxxxxxxxx
// ┌───────┬─┬────────┐
// │       │┼│        │ <-- For each input in the epoch (E)
// └───────┴┼┴────────┘
//          │
//          │
//    ┌─────▼─────┐
//    │Merkle Root│
//    └───────────┘
//          xx
//         xxxx
//        xxxxxx
//       xxxxxxxx
//      xxxxxxxxxx <-- Merkle tree (D)
//     xxxxxxxxxxxx
//    xxxxxxxxxxxxxx
//   xxxxxxxxxxxxxxxx
// ┌───────┬─┬────────┐
// │       │┼│        │ <-- For each output from the input (C)
// └───────┴┼┴────────┘
//          │
//          │
//    ┌─────▼─────┐
//    │Merkle Root│
//    └───────────┘
//          xx
//         xxxx
//        xxxxxx
//       xxxxxxxx
//      xxxxxxxxxx <-- Merkle tree (B)
//     xxxxxxxxxxxx
//    xxxxxxxxxxxxxx
//   xxxxxxxxxxxxxxxx
// ┌──────────────────┐
// │                  │ <-- Output hash (A)
// └──────────────────┘
//

/// @param epochInputIndex which input, in the epoch, the output belongs to
/// @param outputIndex index of output inside the input
/// @param outputHashesRootHash merkle root of all epoch's output hashes merkle roots
/// @param outputsEpochRootHash merkle root of all inputs's output metadata hashes
/// @param machineStateHash hash of the machine state claimed this epoch
/// @param keccakInHashesSiblings proof that this output metadata is in metadata memory range
/// @param outputHashesInEpochSiblings proof that this output metadata is in epoch's output memory range
struct OutputValidityProof {
    uint64 epochInputIndex;
    uint64 outputIndex;
    bytes32 outputHashesRootHash;
    bytes32 outputsEpochRootHash;
    bytes32 machineStateHash;
    bytes32[] keccakInHashesSiblings;
    bytes32[] outputHashesInEpochSiblings;
}

library LibOutputValidation {
    using CanonicalMachine for CanonicalMachine.Log2Size;

    /// @notice Make sure the output proof is valid, otherwise revert
    /// @param _v the output validity proof
    /// @param _encodedOutput the encoded output
    /// @param _epochHash the hash of the epoch in which the output was generated
    function validateEncodedOutput(
        OutputValidityProof calldata _v,
        bytes memory _encodedOutput,
        bytes32 _epochHash
    ) internal pure {
        // prove that outputs hash is represented in a finalized epoch
        require(
            keccak256(
                abi.encodePacked(_v.outputsEpochRootHash, _v.machineStateHash)
            ) == _epochHash,
            "incorrect epochHash"
        );

        // prove that output metadata memory range is contained in epoch's output memory range
        require(
            Merkle.getRootAfterReplacementInDrive(
                CanonicalMachine.getIntraMemoryRangePosition(
                    _v.epochInputIndex,
                    CanonicalMachine.KECCAK_LOG2_SIZE
                ),
                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),
                CanonicalMachine.EPOCH_OUTPUT_LOG2_SIZE.uint64OfSize(),
                _v.outputHashesRootHash,
                _v.outputHashesInEpochSiblings
            ) == _v.outputsEpochRootHash,
            "incorrect outputsEpochRootHash"
        );

        // The hash of the output is converted to bytes (abi.encode) and
        // treated as data. The metadata output memory range stores that data while
        // being indifferent to its contents. To prove that the received
        // output is contained in the metadata output memory range we need to
        // prove that x, where:
        // x = keccak(
        //          keccak(
        //              keccak(hashOfOutput[0:7]),
        //              keccak(hashOfOutput[8:15])
        //          ),
        //          keccak(
        //              keccak(hashOfOutput[16:23]),
        //              keccak(hashOfOutput[24:31])
        //          )
        //     )
        // is contained in it. We can't simply use hashOfOutput because the
        // log2size of the leaf is three (8 bytes) not  five (32 bytes)
        bytes32 merkleRootOfHashOfOutput = Merkle.getMerkleRootFromBytes(
            abi.encodePacked(keccak256(_encodedOutput)),
            CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize()
        );

        // prove that merkle root hash of bytes(hashOfOutput) is contained
        // in the output metadata array memory range
        require(
            Merkle.getRootAfterReplacementInDrive(
                CanonicalMachine.getIntraMemoryRangePosition(
                    _v.outputIndex,
                    CanonicalMachine.KECCAK_LOG2_SIZE
                ),
                CanonicalMachine.KECCAK_LOG2_SIZE.uint64OfSize(),
                CanonicalMachine.OUTPUT_METADATA_LOG2_SIZE.uint64OfSize(),
                merkleRootOfHashOfOutput,
                _v.keccakInHashesSiblings
            ) == _v.outputHashesRootHash,
            "incorrect outputHashesRootHash"
        );
    }

    /// @notice Get the position of a voucher on the bit mask
    /// @param _voucher the index of voucher from those generated by such input
    /// @param _input the index of the input in the DApp's input box
    /// @return position of the voucher on the bit mask
    function getBitMaskPosition(uint256 _voucher, uint256 _input)
        internal
        pure
        returns (uint256)
    {
        // voucher * 2 ** 128 + input
        // this shouldn't overflow because it is impossible to have > 2**128 vouchers
        // and because we are assuming there will be < 2 ** 128 inputs on the input box
        return (((_voucher << 128) | _input));
    }
}
